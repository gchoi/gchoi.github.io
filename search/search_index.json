{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Alex Choi's Blog Contact Info: cinema4dr12@gmail.com","title":"Home"},{"location":"#welcome-to-alex-chois-blog","text":"Contact Info: cinema4dr12@gmail.com","title":"Welcome to Alex Choi's Blog"},{"location":"about/","text":"Who Am I? Geol Choi (ph.D) / \ucd5c\uac78 / Alex Choi Data Scientist / Deep Learning Professional / Research Scientist Contacts Email: cinema4dr12@gmail.com Tistory Blog: cinema4dr12.tistory.com GitHub: github.com/gchoi LinkedIn: linkedin.com/in/gchoi YouTube: youtube.com/gchoi Twitter: twitter.com/cinema4dr12 Work Experiences Vision Solution Engineer, COGNEX (2017.12 ~ Present) Data Scientist & Software Engineer, ALPINION MEDICAL SYSTEMS (2014.06 ~ 2017.11) Computer Graphics Researcher, CJ POWERCAST (2012.04 ~ 2014.03) Computer Vision & VR/AR Researcher, ETRI (2010.04 ~ 2012.03) Research Experiences Computer Vision Researcher@ Mixed and Augmented Reality Solutions Team, COOPERATION SYSTEMS Dept., Fraunhofer FIT (2010.07 ~ 2010.09) Computational Mechanics Researcher@Research Center for Ubiquitous MEMS and Micro Engineering, National Institute of Advanced Industrial Science and Technology (2006.03 ~ 2006.08) Education Nano Degree R Programming, Coursera (Johns Hopkins Univ.), 2014 Deep Neural Networks with PyTorch, Coursera (IBM), 2020 What is Data Science?, Coursera (IBM), 2020 Ph.D, Mechanical Engineering Dept. from KAIST, 2010 BS, Mechanical Engineering Dept. from Chung-Ang Univ., 2003 Interests General Machine Learning & Deep Learning Convolutional Neural Networks (CNN) Deep Generative Models (GANs) Computer Vision / Machine Vision / Visual Recognition Data Science / Data Analytics / Data Visualization Computer Graphics Realtime Web Applications Scientific Computing / Parallel Computing Languages Korean: Native English: Proficiency German: Intermediate Japanese: Basic Chinese: Novice(HSK Level3) Skills Machine & Deep Learning Related Theories and Algorithms: Probability, Statistics, Optimization, etc. Multi-layer Perceptron Convolutional Neural Networks (CNN) Recurrent Neural Networks (RNN) Generative Models (GANs, VAEs) Deep Learning Frameworks (Order of Frequently Used Frameworks) PyTorch / PyTorch Lightning / Detectron2 / OpenMMLab TensorFlow / Keras CNTK MXNet with Gluon Data Science Python(pands)/R SQL/NoSQL Data Wrangling Data Analytics Data Mining Data Visualization (matplotlib, ggplot, plotly, bokeh, etc.) Database (Order of Frequently Used Tools) MongoDB PostgreSQL MySQL Firebird Programming Languages (Order of Skillful Languages) C/C++ Python R JavaScript C# Matlab Java Computer Vision General Image Processing Algorithms (filters, etc.) Conventional & Deep Learning based CV Theories & Algorithms Object Detection Algorithms: YOLO, SSD, R-CNN, Fast R-CNN, Faster R-CNN, Selective Search, FPN, etc. Tools: Detectron2, TensorFlow Object Detection Module Segmentation: Mask R-CNN, FCN, U-Net, etc. Mixed Reality / Augmented reality OpenCV (C++ / Python / C#) Cloud Computing Amazon Web Services (AWS) Google Cloud Platform (GCP) Google Colab (Social Coding) Web Development Basic Web Document Concepts: HTML5 / CSS / JavaScript Server-side: Node.jS, PHP Client-side: ReactJS, AngularJS, jQuery Other Web Technologies: WebGL / WebRTC / WebSocket Web Frameworks: React Scientific Computing CUDA Parallel Computing Realtime Fluid Simulation Finite Element Analysis (FEA) Boundary Element Analaysis (BEA) Computer Graphics General Computer Graphics Theroies & Algorithms Rendering Theories: Global Illumination, Path Tracing, Ray Tracing Particle Simulation Tools: Maxon Cinema 4D, Adobe Photoshop & AfterEffects, NextLimit RealFlow, SideEffects Houdini, E-on Software Vue Publications Doctoral Thesis Isogeometric Analysis Based on Boundary Element Method , 2010, Thesis Ph.D., KAIST International Conferences Application of Isogeometric Analysis to Shape Optimal Design of Thermal Problems, 8th World Congress on Structural and Multidisciplinary Optimization, Lisbon, Portugal, 2009. Structural shape optimization based on isogeometric analysis with control weights, International Congress of Theoretical and Applied Mechanics, Adelaide, Australia, 2008. Structural shape optimization using shape design sensitivity of NURBS control weights, CJK-OSM 5, Cheju, Korea, 2008. Structural shape optimization using extended finite element method on boundary representation by NURBS, 7th World Congress on Structural and Multidisciplinary Optimization, Seoul, Korea, 2007. Imposing essential and natural boundary conditions on geometric boundaries for X-FEM, CJK-OSM 4, Kumming, China, 2006. Student Symposium Bone growth simulation based on topology optimization, KAIST-Michigan Univ. Joint Symposium, University of Michigan, Ann Arbor, USA, 2006. Articles Realtime Fluid Simulation Using Massively Parallel Computing with CUDA, 2013 , CJ POWERCAST Research Aritcles","title":"About"},{"location":"about/#who-am-i","text":"Geol Choi (ph.D) / \ucd5c\uac78 / Alex Choi Data Scientist / Deep Learning Professional / Research Scientist","title":"Who Am I?"},{"location":"about/#contacts","text":"Email: cinema4dr12@gmail.com Tistory Blog: cinema4dr12.tistory.com GitHub: github.com/gchoi LinkedIn: linkedin.com/in/gchoi YouTube: youtube.com/gchoi Twitter: twitter.com/cinema4dr12","title":"Contacts"},{"location":"about/#work-experiences","text":"Vision Solution Engineer, COGNEX (2017.12 ~ Present) Data Scientist & Software Engineer, ALPINION MEDICAL SYSTEMS (2014.06 ~ 2017.11) Computer Graphics Researcher, CJ POWERCAST (2012.04 ~ 2014.03) Computer Vision & VR/AR Researcher, ETRI (2010.04 ~ 2012.03)","title":"Work Experiences"},{"location":"about/#research-experiences","text":"Computer Vision Researcher@ Mixed and Augmented Reality Solutions Team, COOPERATION SYSTEMS Dept., Fraunhofer FIT (2010.07 ~ 2010.09) Computational Mechanics Researcher@Research Center for Ubiquitous MEMS and Micro Engineering, National Institute of Advanced Industrial Science and Technology (2006.03 ~ 2006.08)","title":"Research Experiences"},{"location":"about/#education","text":"Nano Degree R Programming, Coursera (Johns Hopkins Univ.), 2014 Deep Neural Networks with PyTorch, Coursera (IBM), 2020 What is Data Science?, Coursera (IBM), 2020 Ph.D, Mechanical Engineering Dept. from KAIST, 2010 BS, Mechanical Engineering Dept. from Chung-Ang Univ., 2003","title":"Education"},{"location":"about/#interests","text":"General Machine Learning & Deep Learning Convolutional Neural Networks (CNN) Deep Generative Models (GANs) Computer Vision / Machine Vision / Visual Recognition Data Science / Data Analytics / Data Visualization Computer Graphics Realtime Web Applications Scientific Computing / Parallel Computing","title":"Interests"},{"location":"about/#languages","text":"Korean: Native English: Proficiency German: Intermediate Japanese: Basic Chinese: Novice(HSK Level3)","title":"Languages"},{"location":"about/#skills","text":"","title":"Skills"},{"location":"about/#machine-deep-learning","text":"Related Theories and Algorithms: Probability, Statistics, Optimization, etc. Multi-layer Perceptron Convolutional Neural Networks (CNN) Recurrent Neural Networks (RNN) Generative Models (GANs, VAEs)","title":"Machine &amp; Deep Learning"},{"location":"about/#deep-learning-frameworks-order-of-frequently-used-frameworks","text":"PyTorch / PyTorch Lightning / Detectron2 / OpenMMLab TensorFlow / Keras CNTK MXNet with Gluon","title":"Deep Learning Frameworks (Order of Frequently Used Frameworks)"},{"location":"about/#data-science","text":"Python(pands)/R SQL/NoSQL Data Wrangling Data Analytics Data Mining Data Visualization (matplotlib, ggplot, plotly, bokeh, etc.)","title":"Data Science"},{"location":"about/#database-order-of-frequently-used-tools","text":"MongoDB PostgreSQL MySQL Firebird","title":"Database (Order of Frequently Used Tools)"},{"location":"about/#programming-languages-order-of-skillful-languages","text":"C/C++ Python R JavaScript C# Matlab Java","title":"Programming Languages (Order of Skillful Languages)"},{"location":"about/#computer-vision","text":"General Image Processing Algorithms (filters, etc.) Conventional & Deep Learning based CV Theories & Algorithms Object Detection Algorithms: YOLO, SSD, R-CNN, Fast R-CNN, Faster R-CNN, Selective Search, FPN, etc. Tools: Detectron2, TensorFlow Object Detection Module Segmentation: Mask R-CNN, FCN, U-Net, etc. Mixed Reality / Augmented reality OpenCV (C++ / Python / C#)","title":"Computer Vision"},{"location":"about/#cloud-computing","text":"Amazon Web Services (AWS) Google Cloud Platform (GCP) Google Colab (Social Coding)","title":"Cloud Computing"},{"location":"about/#web-development","text":"Basic Web Document Concepts: HTML5 / CSS / JavaScript Server-side: Node.jS, PHP Client-side: ReactJS, AngularJS, jQuery Other Web Technologies: WebGL / WebRTC / WebSocket Web Frameworks: React","title":"Web Development"},{"location":"about/#scientific-computing","text":"CUDA Parallel Computing Realtime Fluid Simulation Finite Element Analysis (FEA) Boundary Element Analaysis (BEA)","title":"Scientific Computing"},{"location":"about/#computer-graphics","text":"General Computer Graphics Theroies & Algorithms Rendering Theories: Global Illumination, Path Tracing, Ray Tracing Particle Simulation Tools: Maxon Cinema 4D, Adobe Photoshop & AfterEffects, NextLimit RealFlow, SideEffects Houdini, E-on Software Vue","title":"Computer Graphics"},{"location":"about/#publications","text":"","title":"Publications"},{"location":"about/#doctoral-thesis","text":"Isogeometric Analysis Based on Boundary Element Method , 2010, Thesis Ph.D., KAIST","title":"Doctoral Thesis"},{"location":"about/#international-conferences","text":"Application of Isogeometric Analysis to Shape Optimal Design of Thermal Problems, 8th World Congress on Structural and Multidisciplinary Optimization, Lisbon, Portugal, 2009. Structural shape optimization based on isogeometric analysis with control weights, International Congress of Theoretical and Applied Mechanics, Adelaide, Australia, 2008. Structural shape optimization using shape design sensitivity of NURBS control weights, CJK-OSM 5, Cheju, Korea, 2008. Structural shape optimization using extended finite element method on boundary representation by NURBS, 7th World Congress on Structural and Multidisciplinary Optimization, Seoul, Korea, 2007. Imposing essential and natural boundary conditions on geometric boundaries for X-FEM, CJK-OSM 4, Kumming, China, 2006.","title":"International Conferences"},{"location":"about/#student-symposium","text":"Bone growth simulation based on topology optimization, KAIST-Michigan Univ. Joint Symposium, University of Michigan, Ann Arbor, USA, 2006.","title":"Student Symposium"},{"location":"about/#articles","text":"Realtime Fluid Simulation Using Massively Parallel Computing with CUDA, 2013 , CJ POWERCAST Research Aritcles","title":"Articles"},{"location":"posts/deep-learning/2017-02-21-Deep-Learning-from-Scratch-Part-01/","text":"Written by Alex Choi, Feb. 21, 2017. \uc774 \uae00\uc740 Parallel R \uc758 R for Deep Learning (I): Build Fully Connected Neural Network from Scratch \ub97c \ubc88\uc5ed\ud55c \uac83\uc785\ub2c8\ub2e4. Source Code: DNN from Scratch.zip GitHub: https://github.com/PatricZhao/ParallelR \uc774\ub860\uc801 \ubc30\uacbd \uc2ec\uce35 \uc778\uacf5\uc2e0\uacbd\ub9dd (\uc774\ud558 \uc6d0\uc5b4 \uc0ac\uc6a9: Deep Neural Network; DNN)\ub294 \ucd5c\uadfc \uba87\ub144\uac04 \uc774\ubbf8\uc9c0 \uc778\uc2dd, \uc790\uc5f0\uc5b4 \ucc98\ub9ac \ubc0f \uc790\uc728\uc8fc\ud589\ucc28 \ubd84\uc57c\uc5d0\uc11c \ub9c9\ub300\ud55c \uc131\uacfc\ub97c \uc774\ub8e8\uc5b4 \ub0c8\uc73c\uba70, \uadf8\ub9bc 1.\uc5d0\uc11c \ubcf4\uc774\ub294 \ubc14\uc640 \uac19\uc774 2012\ub144\uc5d0\uc11c 2015\ub144 \uc0ac\uc774 DNN\uc740 IMAGNET \uc758 \uc815\ud655\ub3c4\ub97c 80%\uc5d0\uc11c 95%\uae4c\uc9c0 \ub04c\uc5b4\uc62c\ub838\uc2b5\ub2c8\ub2e4. \uc774\ub294 \uc804\ud1b5\uc801\uc778 \ucef4\ud4e8\ud130 \ube44\uc804(Computer Vision; CV) \ubc29\ubc95\ub860\ub4e4\uc744 \uaebe\uc740 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub9bc 1. CES16\uc758 NVIDIA CEO \uc820\uc2a8 \ud669\uc758 \uc5f0\uc124\uc5d0\uc11c \ubc1c\ucdcc \uc774 \uae00\uc5d0\uc11c\ub294 \ub370\uc774\ud130 \uacfc\ud559 \ubd84\uc57c\uc5d0\uc11c \uacf5\ud1b5\uc801\uc73c\ub85c DNN\uc774\ub77c \ubd80\ub974\ub294 Fully Connected Neural Networks\uc5d0 \ub300\ud574 \uc9d1\uc911\uc801\uc73c\ub85c \ub2e4\ub8e8\uace0\uc790 \ud569\ub2c8\ub2e4. DNN\uc758 \uac00\uc7a5 \ud070 \uc7a5\uc810\uc740, Kaggle \uc758 \uc608\uc81c\ucc98\ub7fc \uc5d4\uc9c0\ub2c8\uc5b4\uac00 \uc27d\uac8c \uc815\uc758\ud560 \uc218 \uc5c6\ub294 \ubcf5\uc7a1\ud558\uace0 \uace0\ucc28\uc6d0\uc801\uc778 \ub370\uc774\ud130\ub97c Deep Layers \uc544\ud0a4\ud14d\uccd0\ub97c \uc774\uc6a9\ud558\uc5ec \uc790\ub3d9\uc73c\ub85c \ud53c\uccd0(Feature)\ub4e4\uc744 \ucd94\ucd9c\ud558\uace0 \ud559\uc2b5\ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. \ub530\ub77c\uc11c, DNN\uc740 \ub370\uc774\ud130 \uacfc\ud559\uc790\ub4e4\uc5d0\uac8c \ub9e4\uc6b0 \ub9e4\ub825\uc801\uc774\uba70, Nick\uc774 \uc4f4 \uae00 \uacfc DNN\uc744 \uc774\uc6a9\ud55c \uc2e0\uc6a9\uc810\uc218 \ub9e4\uae30\uae30 \ucc98\ub7fc \ubd84\ub958(Classification), \uc2dc\uacc4\uc5f4(Time Series), \ucd94\ucc9c \ub4f1\uc758 \ubd84\uc57c\uc5d0\uc11c \uc131\uacf5\uc801\uc778 \ucf00\uc774\uc2a4\uac00 \uc874\uc7ac\ud569\ub2c8\ub2e4. CRAN\uacfc R \ucee4\ubba4\ub2c8\ud2f0\uc5d0 nnet , nerualnet , H2O , DARCH , deepnet \ubc0f mxnet \ub4f1\uacfc \uac19\uc740 \uc778\uae30\uac00 \ub9ce\uace0 \uc131\uc219\ud55c DNN \ud328\ud0a4\uc9c0\ub4e4\uc774 \ub9ce\uc774 \uc874\uc7ac\ud558\uc9c0\ub9cc, H2O DNN \uc54c\uace0\ub9ac\uc998-R \uc778\ud130\ud398\uc774\uc2a4 \ub97c \uac15\ub825\ud558\uac8c \uad8c\uc7a5\ud569\ub2c8\ub2e4. \ud328\ud0a4\uc9c0 \ubc31\uc5d4\ub4dc \ucef4\ud4e8\ud130 \uc790\uc6d0 nnet C/C++ \uc2f1\uae00 \uc2a4\ub808\ub4dc (Single Thread) neuralnet C/C++ \uc2f1\uae00 \uc2a4\ub808\ub4dc (Single Thread) DARCH C/C++ \uc2f1\uae00 \uc2a4\ub808\ub4dc (Single Thread) deepnet R \uc2f1\uae00 \uc2a4\ub808\ub4dc (Single Thread) h2o Java \uba40\ud2f0-\uc2a4\ub808\ub4dc, \uba40\ud2f0-\ub178\ub4dc mxnet C/C++/CUDA \uba40\ud2f0-\uc2a4\ub808\ub4dc, GPU, \uba40\ud2f0-\ub178\ub4dc \uadf8\ub7ec\uba74 \uad73\uc774 DNN\uc744 \ubc14\ub2e5\ubd80\ud130 \uad6c\ud604\ud560 \ud544\uc694\uac00 \uc788\ub294 \uac83\uc77c\uae4c\uc694? \u2013 \uc2e0\uacbd\ub9dd\uc758 \uc791\ub3d9 \uc6d0\ub9ac\ub97c \uc774\ud574\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4 \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 \uae30\uc874\uc758 DNN \ud328\ud0a4\uc9c0\ub97c \uc774\uc6a9\ud558\uc5ec DNN \ubaa8\ub378\uc5d0 \ub300\ud55c \ud55c \uc904\uc758 R \ucf54\ub4dc\ub9cc\uc73c\ub85c \ud574\uacb0\ud560 \uc218 \uc788\ub294\ub370, neuralnet \ud328\ud0a4\uc9c0\uc758 \uc608 \uac00 \uadf8\ub807\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098, \uacbd\ud5d8\uc774 \uc5c6\ub294 \uc720\uc800\ub77c\uba74 \ucc98\ub9ac \uacfc\uc815\uacfc \uacb0\uacfc\ub97c \uc774\ud574\ud558\uae30 \uc5b4\ub824\uc6b8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c, \uba54\ucee4\ub2c8\uc998\uc5d0\uc11c \uc5f0\uc0b0 \uc2dc\uac01\uc5d0 \uc774\ub974\ub294 \ubcf4\ub2e4 \uc0c1\uc138\ud55c \ub0b4\uc6a9\uc744 \uc774\ud574\ud558\ub824\uba74 \uc790\uc2e0\ub9cc\uc758 \ub124\ud2b8\uc6cc\ud06c\ub97c \uad6c\ud604\ud574 \ubcf4\ub294 \uc5f0\uc2b5\uc774 \ub9e4\uc6b0 \uac00\uce58\uc788\ub294 \uc791\uc5c5\uc77c \uac83\uc785\ub2c8\ub2e4. \u2013 \uc790\uc2e0\uc758 \uc0c8\ub85c\uc6b4 \uc544\uc774\ub514\uc5b4\ub97c \ub124\ud2b8\uc6cc\ud06c\uc5d0 \uc811\ubaa9\ud560 \uc218 \uc788\ub2e4 DNN\uc740 \uae09\uc18d\ub3c4\ub85c \ubc1c\uc804\ud558\ub294 \ubd84\uc57c \uc911 \ud558\ub098\uc785\ub2c8\ub2e4. \ub9ce\uc740 \ud6cc\ub96d\ud55c \uc791\uc5c5\uacfc \uc5f0\uad6c \uacb0\uacfc\ub4e4\uc774 \ud1b1\uc800\ub110\uacfc \uc778\ud130\ub137\uc5d0 \ub9e4\uc8fc\ub9c8\ub2e4 \uac8c\uc7ac\ub418\uba70, \uc720\uc800\ub4e4\uc740 \uc790\uc2e0\ub4e4\uc758 \ud2b9\uc815 \ub124\ud2b8\uc6cc\ud06c \uc124\uc815\uc774 \ub2e4\uc591\ud55c \ud65c\uc131 \ud568\uc218(Activation Function), \uc190\uc2e4 \ud568\uc218(Loss Function), \uc815\uaddc\ud654(Regularization), \uc5f0\uacb0 \uadf8\ub798\ud504 \ub4f1\uc758 \ubb38\uc81c\ub97c \ub9cc\uc871\ud558\ub3c4\ub85d \ud558\uace0 \uc788\ub2e4. \ubc18\uba74\uc5d0 \uae30\uc874\uc758 \ud328\ud0a4\uc9c0\ub4e4\uc740 \ubd84\uba85 \ucd5c\uadfc\uc758 \uc5f0\uad6c\ub97c \ubaa8\ub450 \ubc18\uc601\ud558\uc9c0\ub294 \ubabb\ud558\uace0 \uc788\uc73c\uba70, \uae30\uc874\uc758 \uac70\uc758 \ub300\ubd80\ubd84\uc758 \ud328\ud0a4\uc9c0\ub4e4\uc740 C/C++, Java\ub85c \uc791\uc131\ub418\uc5c8\uae30 \ub54c\ubb38\uc5d0 \ucd5c\uadfc\uc758 \ubcc0\ud654\uc640 \ub2f9\uc2e0\uc758 \uc544\uc774\ub514\uc5b4\uc5d0 \uc720\uc5f0\ud558\uac8c \ub300\uc751\ud558\uc9c0 \ubabb\ud569\ub2c8\ub2e4. \u2013 \ub124\ud2b8\uc6cc\ud06c\uc640 \ub370\uc774\ud130\ub97c \ub514\ubc84\uae45\ud558\uace0 \uc2dc\uac01\ud654\ud560 \uc218 \uc788\ub2e4 \uc5b8\uae09\ud55c \ubc14\uc640 \uac19\uc774, \uae30\uc874\uc758 DNN \ud328\ud0a4\uc9c0\ub4e4\uc740 \uace0\ub3c4\ub85c \uc870\ud569\ub418\uc5c8\uc73c\uba70 \uc800\uc218\uc900 \uc5b8\uc5b4\ub85c \uc791\uc131\ub418\uc5c8\uae30 \ub54c\ubb38\uc5d0 \ub808\uc774\uc5b4 \ubcc4\ub85c \ub610\ub294 \ub178\ub4dc \ubcc4\ub85c \ub124\ud2b8\uc6cc\ud06c\ub97c \ub514\ubc84\uae45\ud558\ub294 \uac83\uc740 \uc545\ubabd\uacfc\ub3c4 \uac19\uc740 \uac83\uc785\ub2c8\ub2e4. \uac01 \ub808\uc774\uc5b4\uc758 \uacb0\uacfc\ub97c \uc2dc\uac01\ud654\ud558\ub294 \uac83\uc774 \uc26c\uc6b4 \uc77c\uc740 \uc544\ub2c8\ub354\ub77c\ub3c4, \ud559\uc2b5 \uacfc\uc815 \ub3d9\uc548 \ub370\uc774\ud130 \ub610\ub294 Weight\ub4e4\uc744 \ubaa8\ub2c8\ud130\ub9c1\ud558\uace0 \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \ubc1c\uacac\ub41c \ud328\ud134\ub4e4\uc744 \uc2dc\uac01\ud654\ud558\ub294 \uac83\uc740 \uc911\uc694\ud569\ub2c8\ub2e4. \uae30\ubcf8 \uac1c\ub150\uacfc \uad6c\uc131\uc694\uc18c \ub370\uc774\ud130 \uacfc\ud559\uc5d0\uc11c DNN\uc774\ub77c\uace0 \ubd80\ub974\ub294, Fully Connected Neural Network \ub294 \uc778\uc811\ud558\ub294 \ub124\ud2b8\uc6cc\ud06c \ub808\uc774\uc5b4 \uac04\uc5d0 \uc644\uc804\ud788 \uc5f0\uacb0\ub418\ub294 \ub124\ud2b8\uc6cc\ud06c\uc774\ub2e4. \ub124\ud2b8\uc6cc\ud06c \ub0b4 \ubaa8\ub4e0 \ub274\ub7f0\uc774 \uc778\uc811\ud558\ub294 \ub808\uc774\uc5b4\uc758 \ubaa8\ub4e0 \ub274\ub7f0\uacfc \uc5f0\uacb0\ub418\ub294 \uac83\uc785\ub2c8\ub2e4. \uc544\ub798\uc758 \uadf8\ub9bc\uc740 1\uac1c\uc758 \uc785\ub825 \ub808\uc774\uc5b4, 2\uac1c\uc758 \uc740\ub2c9 \ub808\uc774\uc5b4, 1\uac1c\uc758 \ucd9c\ub825 \ub808\uc774\uc5b4\ub85c \uad6c\uc131\ub41c \ub9e4\uc6b0 \uac04\ub2e8\ud558\uace0 \uc804\ud615\uc801\uc778 \ub124\ud2b8\uc6cc\ud06c\ub97c \ubcf4\uc5ec\uc90d\ub2c8\ub2e4. \ub300\ubd80\ubd84 \uc5f0\uad6c\uc790\ub4e4\uc774 \ub124\ud2b8\uc6cc\ud06c \uc544\ud0a4\ud14d\uccd0\uc5d0 \ub300\ud574 \uc5b8\uae09\ud560 \ub54c, \uc774\ub294 \ub124\ud2b8\uc6cc\ud06c \ub0b4\uc758 \ub808\uc774\uc5b4 \uac1c\uc218, \uac01 \ub808\uc774\uc5b4 \ub0b4 \ub274\ub7f0\uc758 \uac1c\uc218, \uc0ac\uc6a9\ub41c \ud65c\uc131\ud568\uc218, \uc190\uc2e4\ud568\uc218, \uc815\uaddc\ud654\uc758 \ud615\ud0dc \ub4f1\uacfc \uac19\uc740 DNN\uc758 \uc124\uc815\uc744 \uc77c\uceeb\uc2b5\ub2c8\ub2e4. \uc774\uc81c DNN\uc758 \uae30\ubcf8 \uad6c\uc131\uc694\uc18c\ub97c \ud6d1\uc5b4\ubcf4\uace0 \uc774\uac83\uc774 R\uc5d0\uc11c \uc5b4\ub5bb\uac8c \uad6c\ud604\ub418\ub294\uc9c0 \uc54c\uc544\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. Weight\uc640 Bias \uc704\uc758 DNN \uc544\ud0a4\ud14d\uccd0\ub97c \uc608\ub97c \ub4e4\uc5b4\ubcf4\uba74, 3\uac1c\uc758 Weight \uadf8\ub8f9\uc774 \uc788\ub294\ub370, \uc785\ub825 \ub808\uc774\uc5b4\uc5d0\uc11c \uccab\ubc88\uc9f8 \uc740\ub2c9 \ub808\uc774\uc5b4\uae4c\uc9c0, \uccab\ubc88\uc9f8 \uc740\ub2c9 \ub808\uc774\uc5b4\uc5d0\uc11c \ub450\ubc88\uc9f8 \uc740\ub2c9 \ub808\uc774\uc5b4\uae4c\uc9c0, \ub450\ubc88\uc9f8 \uc740\ub2c9 \ub808\uc774\uc5b4\uc5d0\uc11c \ucd9c\ub825 \ub808\uc774\uc5b4\uae4c\uc9c0\uc785\ub2c8\ub2e4. Bias \ub2e8\uc704\ub294 \ubaa8\ub4e0 \uc740\ub2c9 \ub178\ub4dc\ub85c \uc5f0\uacb0\ub418\uba70 \uc774\ub294 \ucd9c\ub825 \uc810\uc218\uc5d0 \uc601\ud5a5\uc744 \uc8fc\uc9c0\ub9cc \uc2e4\uc81c \ub370\uc774\ud130\uc640 \uc0c1\ud638\uc791\uc6a9\uc774 \uc5c6\ub294 \uac83\uc744 \uac00\uc815\ud569\ub2c8\ub2e4. R\uc5d0\uc11c\uc758 \uad6c\ud604\uc5d0\uc11c Weight\uc640 Bias\ub294 \ud589\ub82c\ub85c \ud45c\ud604\ud569\ub2c8\ub2e4. Weight\uc758 \ud06c\uae30\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ud569\ub2c8\ub2e4: (\ub808\uc774\uc5b4 M \ub0b4 \ub274\ub7f0\uc758 \uac1c\uc218) X (\ub808\uc774\uc5b4 M+1 \ub0b4 \ub274\ub7f0\uc758 \uac1c\uc218) \uadf8\ub9ac\uace0 Weight\ub4e4\uc740 rnorm\uc73c\ub85c\ubd80\ud130 \uc784\uc758\ub85c \ucd08\uae30\ud654 \ub429\ub2c8\ub2e4. Bias\ub294 \ub2e8\uc9c0 \ub274\ub7f0\uc758 \ud06c\uae30\uc640 \ub3d9\uc77c\ud55c 1\ucc28\uc6d0 \ud589\ub82c\uc774\uba70 0\uc73c\ub85c \uc124\uc815\ub429\ub2c8\ub2e4. 1/sqrt(n) \uc744 \uc774\uc6a9\ud55c \ubd84\uc0b0 \ubcf4\uc815\uacfc Sparse \ucd08\uae30\ud654\uc640 \uac19\uc740 \ub2e4\ub978 \ucd08\uae30\ud654 \ubc29\ubc95\uc740 Stanford CS231n\uc758 Weight Initialization \uc5d0 \uc18c\uac1c\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. R CODE: weight.i <- 0.01*matrix(rnorm(layer.size(i)*layer.size(i+1)), nrow=layer.size(i), ncol=layer.size(i+1)) bias.i <- matrix(0, nrow=1, ncol = layer.size(i)) \ub2e4\ub978 \uc77c\ubc18\uc801\uc778 \uad6c\ud604 \ubc29\ubc95\uc740 Weight\ub4e4\uacfc Bias\ub97c \uacb0\ud569\ud558\uc5ec \uc785\ub825 \ucc28\uc6d0\uc774 N+1\uc774 \ub418\ub3c4\ub85d \ud558\ub294 \uac83\uc778\ub370, N\uc740 \uc544\ub798\uc640 \uac19\uc774 1\uac1c\uc758 Bias\ub97c \uac16\ub294 \uc785\ub825 \ud53c\uccd0\uc758 \uac1c\uc218\uc785\ub2c8\ub2e4. weight <- 0.01*matrix(rnorm((layer.size(i)+1)*layer.size(i+1)), nrow=layer.size(i)+1, ncol=layer.size(i+1)) \ub274\ub7f0(Neuron) \ub274\ub7f0\uc740 \uc778\uac04\uc758 \uc0dd\ubb3c\ud559\uc801 \ub274\ub7f0 \ubaa8\ub378\uc5d0\uc11c \uc601\uac10\uc744 \uc5bb\uc740 DNN\uc758 \uae30\ubcf8 \ub2e8\uc704\uc785\ub2c8\ub2e4. \ud558\ub098\uc758 \ub274\ub7f0\uc740 \ub370\uc774\ud130 \uacfc\ud559\uc758 \uc120\ud615 \ud68c\uadc0\ubd84\uc11d\uacfc \uac19\uc774 Weight\uacfc \uc785\ub825\uc744 \uacf1\ud558\uace0 \ub354\ud558\ub294 \uc5f0\uc0b0\uc744 \uc218\ud589(FMA)\ud558\ub294\ub370, FMA\uc758 \uacb0\uacfc\ub294 \ud65c\uc131\ud568\uc218\ub85c \uc804\ub2ec\ub429\ub2c8\ub2e4. \uc8fc\ub85c \uc0ac\uc6a9\ub418\ub294 \ud65c\uc131\ud568\uc218\ub4e4\uc5d0\ub294 sigmoid , ReLu , Tanh \ubc0f Maxout \ub4f1\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uae00\uc5d0\uc11c\ub294 Rectified Linear Unit (ReLU), f(x) = max(0, x) \ub97c \ud65c\uc131\ud568\uc218\ub85c \uc0ac\uc6a9\ud560 \uac83\uc785\ub2c8\ub2e4. \ub2e4\ub978 \ud65c\uc131\ud568\uc218\uc5d0 \ub300\ud574 \uc54c\uc544\ubcf4\ub824\uba74 \uc5ec\uae30 \ub97c \ucc38\uace0\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4. R\uc5d0\uc11c sum(xi*wi) \uacfc \uac19\uc774 \ub2e4\uc591\ud55c \ubc29\ubc95\uc73c\ub85c \ub274\ub7f0\uc744 \uad6c\ud604\ud560 \uc218 \uc788\uc9c0\ub9cc, \ubcf4\ub2e4 \ud6a8\uc728\uc801\uc778 \ud45c\ud604\uc740 \ud589\ub82c \uacf1\uc148\uc744 \uc774\uc6a9\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. neuron.ij <- max(0, input %*% weight + bias) \uad6c\ud604 \ud301 \uc2e4\uc9c8\uc801\uc73c\ub85c, \uc131\ub2a5\uc744 \uace0\ub824\ud558\uc5ec \ud56d\uc0c1 \uc77c\uad04\uc801\uc73c\ub85c \ub808\uc774\uc5b4 \ub0b4 \ubaa8\ub4e0 \ub274\ub7f0\uc744 \uc5c5\ub370\uc774\ud2b8\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c, \uc704\uc758 \ucf54\ub4dc\ub294 \uc81c\ub300\ub85c \ub3d9\uc791\ud558\uc9c0 \uc54a\uc744 \uac83\uc785\ub2c8\ub2e4. 1) \ud589\ub82c \uacf1\uc148\uacfc \ub367\uc148 \uc544\ub798\uc758 \ucf54\ub4dc\uc5d0\uc11c \ubcf4\ub294 \ubc14\uc640 \uac19\uc774, \uc11c\ub85c \ub2e4\ub978 \ucc28\uc6d0\uc744 \uac16\ub294 input %*% weights \uc640 bias \ub97c \uc9c1\uc811 \ub354\ud560 \uc218\ub294 \uc5c6\uc2b5\ub2c8\ub2e4. \uc774\uc5d0 \ub300\ud55c \ub450\uac00\uc9c0 \uc194\ub8e8\uc158\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uccab\ubc88\uc9f8\ub294 Bias\ub97c ncol\ubc88 \ubc18\ubcf5\ud558\ub294 \uac83\uc778\ub370, \ud06c\uae30\uac00 \ud070 \ub370\uc774\ud130 \uc785\ub825\uc5d0 \ub300\ud558\uc5ec \uba54\ubaa8\ub9ac\ub97c \ub0ad\ube44\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 \ub450\ubc88\uc9f8 \ubc29\ubc95\uc774 \ub354 \ub0ab\uc2b5\ub2c8\ub2e4. # dimension: 2X2 input <- matrix(1:4, nrow=2, ncol=2) # dimension: 2x3 weights <- matrix(1:6, nrow=2, ncol=3) # dimension: 1*3 bias <- matrix(1:3, nrow=1, ncol=3) # doesn't work since unmatched dimension input %*% weights + bias Error input %*% weights + bias : non-conformable arrays # solution 1: repeat bias aligned to 2X3 s1 <- input %*% weights + matrix(rep(bias, each=2), ncol=3) # solution 2: sweep addition s2 <- sweep(input %*% weights ,2, bias, '+') all.equal(s1, s2) [1] TRUE 2) \ud589\ub82c\uc5d0 \ub300\ud55c \uc694\uc18c \ucd5c\ub300\uac12 \uc5ec\uae30\uc5d0\uc11c \ub2e4\ub978 \ud2b8\ub9ad\uc740 pmax \ub97c max \ub85c \uad50\uccb4\ud558\uc5ec \ud589\ub82c \uc804\uccb4\uc758 \ucd5c\ub300\uac12 \ub300\uc2e0 \ud589\ub82c\uc758 \uc694\uc18c\uc5d0 \ub300\ud55c \ucd5c\ub300\uac12\uc744 \uc5bb\ub294 \uac83\uc778\ub370, \ud2b9\ud788 pmax \uc758 \uc21c\uc11c\uc5d0 \uc720\uc758\ud574\uc57c \ud569\ub2c8\ub2e4. # the original matrix > s1 [,1] [,2] [,3] [1,] 8 17 26 [2,] 11 24 37 # max returns global maximum > max(0, s1) [1] 37 # s1 is aligned with a scalar, so the matrix structure is lost > pmax(0, s1) [1] 8 11 17 24 26 37 # correct # put matrix in the first, the scalar will be recycled to match matrix structure > pmax(s1, 0) [,1] [,2] [,3] [1,] 8 17 26 [2,] 11 24 37 \ub808\uc774\uc5b4(Layer) \uc785\ub825 \ub808\uc774\uc5b4 \uc785\ub825 \ub808\uc774\uc5b4\ub294 1\uac1c\uc758 \ub808\uc774\uc5b4\ub85c \uc0c1\ub300\uc801\uc73c\ub85c \uace0\uc815\ub418\uc5b4 \uc788\uc73c\uba70 \uae30\ubcf8 \uac1c\uc218\ub294 \uc785\ub825 \ub370\uc774\ud130\uc758 \ud53c\uccd0(Feature) \uac1c\uc218\uc640 \ub3d9\uc77c\ud569\ub2c8\ub2e4. \uc740\ub2c9 \ub808\uc774\uc5b4 \uc740\ub2c9 \ub808\uc774\uc5b4\ub294 \ub9e4\uc6b0 \ub2e4\uc591\ud558\uba70 DNN\uc758 \ud575\uc2ec \uad6c\uc131\uc694\uc18c\uc785\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc77c\ubc18\uc801\uc73c\ub85c \ubb38\uc81c\uac00 \ubcf5\uc7a1\ud560\uc218\ub85d(\ube44\uc120\ud615) \ubc14\ub78c\uc9c1\ud55c \ud328\ud134\uc744 \ucc3e\uae30 \uc704\ud574\uc11c\ub294 \ub354 \ub9ce\uc740 \uc740\ub2c9 \ub808\uc774\uc5b4\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. \ucd9c\ub825 \ub808\uc774\uc5b4 \ucd9c\ub825 \ub808\uc774\uc5b4\uc758 \ub2e8\uc704\ub294 Classification\uc5d0 \uc788\uc5b4\uc11c\ub294 \uac01 \ud074\ub798\uc2a4\uc758 \uc810\uc218\ub97c \ud45c\ud604\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ub418\uace0 \ud68c\uadc0\ubd84\uc11d\uc5d0 \uc788\uc5b4\uc11c\ub294 \uc784\uc758\uc758 \uc2e4\uc218 \uac12\uc744 \ub098\ud0c0\ub0b4\uae30 \ub54c\ubb38\uc5d0 \uc77c\ubc18\uc801\uc73c\ub85c \ud65c\uc131\ud568\uc218\ub97c \uac16\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ud68c\uadc0\ubd84\uc11d\uc5d0 \ub300\ud574\uc11c \ucd9c\ub825 \ub178\ub4dc\ub294 \ub2e8 \ud55c \uac1c\uc774\uc9c0\ub9cc, Classification\uc5d0 \uc788\uc5b4\uc11c\ub294 \ucd9c\ub825 \ub2e8\uc704\uc758 \uac1c\uc218\ub294 \uc608\uce21\uc758 \uce74\ud14c\uace0\ub9ac\uc758 \uac1c\uc218\uc640 \uc77c\uce58\ud569\ub2c8\ub2e4. \uc2e0\uacbd\ub9dd \uad6c\ucd95\ud558\uae30: \uc544\ud0a4\ud14d\uccd0, \uc608\uce21 \uadf8\ub9ac\uace0 \ud559\uc2b5 \uc9c0\uae08\uae4c\uc9c0, Deep Neural Network\uc758 \uae30\ubcf8 \uac1c\ub150\uc5d0 \ub300\ud574 \uc54c\uc544\ubcf4\uc558\uc73c\uba70, \uc774\uc81c Deep Neural Network\uc744 \uad6c\ucd95\ud574 \ubcf4\ub824\uace0 \ud558\ub294\ub370, \uc774\ub294 \ub124\ud2b8\uc6cc\ud06c \uc544\ud0a4\ud14d\uccd0, \ud559\uc2b5 \ub124\ud2b8\uc6cc\ud06c\ub97c \uacb0\uc815\ud558\ub294 \uac83\uacfc \ud559\uc2b5\ub41c \ub124\ud2b8\uc6cc\ud06c\ub97c \uac00\uc9c0\uace0 \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130\ub97c \uc608\uce21\ud558\ub294 \uc77c\uc744 \ud3ec\ud568\ud569\ub2c8\ub2e4. \uc27d\uac8c \uc774\ud574\ud558\uae30 \uc704\ud574\uc11c, \uc6b0\ub9ac\ub294 \uc791\uc740 \ub370\uc774\ud130\uc138\ud2b8\uc778 Edgar Anderson\uc758 \ub370\uc774\ud130( iris )\ub97c \uc0ac\uc6a9\ud558\uc5ec DNN\uc73c\ub85c Classification\uc744 \uc218\ud589\ud558\uace0\uc790 \ud569\ub2c8\ub2e4. \ub124\ud2b8\uc6cc\ud06c \uc544\ud0a4\ud14d\uccd0 IRIS \ub294 \uc798 \uc54c\ub824\uc9c4 \uba38\uc2e0\ub7ec\ub2dd\uc6a9 stock R\uc758 \ube4c\ud2b8\uc778(Built-In) \ub370\uc774\ud130\uc138\ud2b8\uc785\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc544\ub798\uc640 \uac19\uc774 \ucf58\uc194\uc5d0\uc11c \uc9c1\uc811 summary \ub97c \ud1b5\ud574 \ub370\uc774\ud130\uc138\ud2b8\ub97c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. summary(iris) Sepal.Length Sepal.Width Petal.Length Petal.Width Species Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 setosa :50 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 versicolor:50 Median :5.800 Median :3.000 Median :4.350 Median :1.300 virginica :50 Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 Summary\ub85c\ubd80\ud130 4\uac1c\uc758 \ud53c\uccd0\uc640 3\uac1c\uc758 Species \uce74\ud14c\uace0\ub9ac\uac00 \uc788\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc544\ub798\uc640 \uac19\uc774 DNN \uc544\ud0a4\ud14d\uccd0\ub97c \uc124\uacc4\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0\ub098\uc11c list\ub85c DNN \ubaa8\ub378\uc744 \uc800\uc7a5\ud560 \uc218 \uc788\ub294\ub370, \uc774\uac83\uc740 \uc544\ub798\uc640 \uac19\uc774 \uc800\uc7a5 \ub610\ub294 \uc608\uce21\uc744 \uc704\ud574 \uc0ac\uc6a9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc0ac\uc2e4, \uc720\uc5f0\ud558\uac8c \ubaa8\ub378\uc5d0 \ub300\ud55c \ub354\ub9ce\uc740 \uad00\uc2ec \ud30c\ub77c\ubbf8\ud130\ub4e4\uc744 \uc800\uc7a5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. List of 7 $ D : int 4 $ H : num 6 $ K : int 3 $ W1: num [1:4, 1:6] 1.34994 1.11369 -0.57346 -1.12123 -0.00107 ... $ b1: num [1, 1:6] 1.336621 -0.509689 -0.000277 -0.473194 0 ... $ W2: num [1:6, 1:3] 1.31464 -0.92211 -0.00574 -0.82909 0.00312 ... $ b2: num [1, 1:3] 0.581 0.506 -1.088 \uc608\uce21 \uba38\uc2e0\ub7ec\ub2dd \ubd84\uc57c\uc5d0\uc11c Classification \ub610\ub294 \ucd94\ub860\uc774\ub77c\uace0\ub3c4 \ubd88\ub9ac\uc6b0\ub294 \uc608\uce21\uc740 \ud559\uc2b5\uc640 \ube44\uad50\ud560 \ub54c \ud568\ucd95\uc801\uc778 \uac1c\ub150\uc774\uba70 \ud589\ub82c \uacf1\uc148\uc744 \ud1b5\ud574 \uc785\ub825\uc73c\ub85c\ubd80\ud130 \ucd9c\ub825 \ub808\uc774\uc5b4 \uac04 \ub124\ud2b8\uc6cc\ud06c\ub97c \ud6d1\uace0 \uc9c0\ub098\uac11\ub2c8\ub2e4. \ucd9c\ub825 \ub808\uc774\uc5b4\ub294 \ud65c\uc131\ud568\uc218\ub97c \ud544\uc694\ub85c \ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ud68c\uadc0\ubd84\uc11d\uc5d0\uc11c\ub294 \ucd9c\ub825\uc740 \uc608\uce21\ub41c \uc2e4\uc218 \uac12\uc744 \ub098\ud0c0\ub0b4\ub294 \ubc18\uba74, Classification\uc5d0\uc11c\ub294 softmax \uc5d0 \uc758\ud574 \ud655\ub960\uc774 \uacc4\uc0b0\ub420 \uac83\uc785\ub2c8\ub2e4. \uc774 \uacfc\uc815\uc740 Feed Forward \ub610\ub294 Feed Propagation\uc774\ub77c\uace0 \ubd88\ub9ac\uc6c1\ub2c8\ub2e4. # Prediction predict.dnn <- function(model, data = X.test) { # new data, transfer to matrix new.data <- data.matrix(data) # Feed Forwad hidden.layer <- sweep(new.data %*% model$W1 ,2, model$b1, '+') # neurons : Rectified Linear hidden.layer <- pmax(hidden.layer, 0) score <- sweep(hidden.layer %*% model$W2, 2, model$b2, '+') # Loss Function: softmax score.exp <- exp(score) probs <-sweep(score.exp, 1, rowSums(score.exp), '/') # select max possiblity labels.predicted <- max.col(probs) return(labels.predicted) } \ud559\uc2b5 \ud559\uc2b5\uc740 \uc8fc\uc5b4\uc9c4 \ub124\ud2b8\uc6cc\ud06c \uc544\ud0a4\ud14d\uccd0\uc5d0\uc11c \ucd5c\uc801\ud654 \ud30c\ub77c\ubbf8\ud130(Weight\ub4e4\uacfc Bias)\ub97c \ucc3e\uace0 Classification \uc624\ucc28 \ub610\ub294 \uc794\ub958\uc624\ucc28\ub97c \ucd5c\uc18c\ud654\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uc774 \uacfc\uc815\uc740 Feed Forward\uc640 Back Propagation\uc758 \ub450 \uac1c\uc758 \ud30c\ud2b8\ub85c \ub098\ub20c \uc218 \uc788\uc2b5\ub2c8\ub2e4. Feed Forward\ub294 \uc785\ub825 \ub370\uc774\ud130 (\uc608\uce21 \ubd80\ubd84)\ub97c \uac16\ub294 \ub124\ud2b8\uc6cc\ud06c\ub97c \ud6d1\uace0 \uc9c0\ub098\uac00\uace0 Loss Function (Cost Function)\uc73c\ub85c \ucd9c\ub825 \ub808\uc774\ud130\uc758 \ub370\uc774\ud130 \uc190\uc2e4\uc744 \uacc4\uc0b0\ud569\ub2c8\ub2e4. \"\ub370\uc774\ud130 \uc190\uc2e4\uc740 \uc608\uce21(\uac00\ub839, Classification\uc5d0\uc11c Class \uc810\uc218 \uc2e4\uc9c0 \uac80\uc99d \ub77c\ubca8) \uac04\uc758 \ud638\ud658\uc131\uc744 \uce21\uc815\ud569\ub2c8\ub2e4.\" \ubcf8 \uc608\uc81c \ucf54\ub4dc\uc5d0\uc11c \ub370\uc774\ud130 \uc190\uc2e4\uc744 \ud3c9\uac00\ud558\uae30 \uc704\ud574 Cross-Entropy \ud568\uc218\ub97c \uc120\ud0dd\ud558\uc600\uc73c\uba70 \uc774\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \uc5ec\uae30 \ub97c \ucc38\uace0\ud558\uae30 \ubc14\ub78d\ub2c8\ub2e4. \ub370\uc774\ud130 \uc190\uc2e4\uac12\uc744 \uc5bb\uc740 \ud6c4, Weights\uc640 Bias\ub97c \ubcc0\uacbd\ud558\uc5ec \ub370\uc774\ud130 \uc190\uc2e4\uc744 \ucd5c\uc18c\ud654\ud574\uc57c \ud569\ub2c8\ub2e4. \uac00\uc7a5 \ub9ce\uc774 \uc0ac\uc6a9\ub418\ub294 \ubc29\ubc95\uc740 \uac01 \ud30c\ub77c\ubbf8\ud130( W1 , W2 , b1 , b2 )\uc5d0 \ub300\ud558\uc5ec \ub370\uc774\ud130 \uc190\uc2e4\uc758 \ubbf8\ubd84\uc744 \uacc4\uc0b0\ud574\uc57c \ud558\ub294 \uae09\uac15\ud558\ubc95( Gradient Descent )\uc774\ub098 \ud655\ub960\uc801 \uae09\uac15\ud558\ubc95( Stochastic Gradient Descent )\uc73c\ub85c \ubaa8\ub4e0 \ub808\uc774\uc5b4\uc640 \ub274\ub7f0\uc73c\ub85c \uc190\uc2e4\uc744 \uc5ed\uc804\ud30c(Back Propagation)\uc2dc\ud0a4\ub294 \uac83\uc785\ub2c8\ub2e4. \uc5ed\uc804\ud30c\ub294 \ub2e4\uc591\ud55c \ud65c\uc131\ud568\uc218\uc5d0 \ub2e4\ub77c \ub2ec\ub77c\uc9c8 \uac83\uc774\uba70 \uc5ed\uc804\ud30c\uc2dd\uacfc \ubc29\ubc95\uc740 \uc5ec\uae30 \uc640 \uc5ec\uae30 \ub97c \ucc38\uace0\ud558\uae30 \ubc14\ub78d\ub2c8\ub2e4. Stanford CS231n \uc5d0\uc11c \ub354 \uc790\uc138\ud55c \ud301\uc744 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubcf8 \uc608\uc81c\uc5d0\uc11c ReLU\uc5d0 \ub300\ud55c \uac01 \ud3ec\uc778\ud2b8\uc5d0 \ub300\ud55c \ubbf8\ubd84\uc740: # Train: build and train a 2-layers neural network train.dnn <- function(x, y, traindata=data, testdata=NULL, # set hidden layers and neurons # currently, only support 1 hidden layer hidden=c(6), # max iteration steps maxit=2000, # delta loss abstol=1e-2, # learning rate lr = 1e-2, # regularization rate reg = 1e-3, # show results every 'display' step display = 100, random.seed = 1) { # to make the case reproducible. set.seed(random.seed) # total number of training set N <- nrow(traindata) # extract the data and label # don't need atribute X <- unname(data.matrix(traindata[,x])) Y <- traindata[,y] if(is.factor(Y)) { Y <- as.integer(Y) } # updated: 10.March.2016: create index for both row and col Y.len <- length(unique(Y)) Y.set <- sort(unique(Y)) Y.index <- cbind(1:N, match(Y, Y.set)) # number of input features D <- ncol(X) # number of categories for classification K <- length(unique(Y)) H <- hidden # create and init weights and bias W1 <- 0.01*matrix(rnorm(D*H), nrow=D, ncol=H) b1 <- matrix(0, nrow=1, ncol=H) W2 <- 0.01*matrix(rnorm(H*K), nrow=H, ncol=K) b2 <- matrix(0, nrow=1, ncol=K) # use all train data to update weights since it's a small dataset batchsize <- N # updated: March 17. 2016 # init loss to a very big value loss <- 100000 # Training the network i <- 0 while(i < maxit && loss > abstol ) { # iteration index i <- i +1 # forward .... # 1 indicate row, 2 indicate col hidden.layer <- sweep(X %*% W1 ,2, b1, '+') # neurons : ReLU hidden.layer <- pmax(hidden.layer, 0) score <- sweep(hidden.layer %*% W2, 2, b2, '+') # softmax score.exp <- exp(score) probs <-sweep(score.exp, 1, rowSums(score.exp), '/') # compute the loss corect.logprobs <- -log(probs[Y.index]) data.loss <- sum(corect.logprobs)/batchsize reg.loss <- 0.5*reg* (sum(W1*W1) + sum(W2*W2)) loss <- data.loss + reg.loss # display results and update model if( i %% display == 0) { if(!is.null(testdata)) { model <- list( D = D, H = H, K = K, # weights and bias W1 = W1, b1 = b1, W2 = W2, b2 = b2) labs <- predict.dnn(model, testdata[,-y]) # updated: 10.March.2016 accuracy <- mean(as.integer(testdata[,y]) == Y.set[labs]) cat(i, loss, accuracy, \"\\n\") } else { cat(i, loss, \"\\n\") } } # backward .... dscores <- probs dscores[Y.index] <- dscores[Y.index] -1 dscores <- dscores / batchsize dW2 <- t(hidden.layer) %*% dscores db2 <- colSums(dscores) dhidden <- dscores %*% t(W2) dhidden[hidden.layer <= 0] <- 0 dW1 <- t(X) %*% dhidden db1 <- colSums(dhidden) # update .... dW2 <- dW2 + reg*W2 dW1 <- dW1 + reg*W1 W1 <- W1 - lr * dW1 b1 <- b1 - lr * db1 W2 <- W2 - lr * dW2 b2 <- b2 - lr * db2 } # final results # creat list to store learned parameters # you can add more parameters for debug and visualization # such as residuals, fitted.values ... model <- list( D = D, H = H, K = K, # weights and bias W1= W1, b1= b1, W2= W2, b2= b2) return(model) } \ud14c\uc2a4\ud2b8 \ubc0f \uc2dc\uac01\ud654 2\uac1c\uc758 \ub808\uc774\uc5b4\ub97c \uac16\ub294 \uac04\ub2e8\ud55c DNN \ubaa8\ub378\uc744 \uad6c\uc131\ud558\uc600\uc73c\ub2c8 \uc774\uc81c \uc6b0\ub9ac\uc758 \ubaa8\ub378\uc744 \ud14c\uc2a4\ud2b8\ud560 \uc218 \uc788\uac8c \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uba3c\uc800, \ub370\uc774\ud130\uc138\ud2b8\ub97c \ud559\uc2b5\uc6a9\uacfc \ud14c\uc2a4\ud2b8\uc6a9 \uadf8\ub8f9\uc73c\ub85c \ubd84\ub9ac\ud558\uace0 \ud559\uc2b5 \ub370\uc774\ud130\uc138\ud2b8\ub97c \uc774\uc6a9\ud558\uc5ec \ud559\uc2b5 \ubaa8\ub378\uc744 \uc138\uc6b0\ub294 \ud55c\ud3b8 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc138\ud2b8\ub97c \uc774\uc6a9\ud558\uc5ec \uc6b0\ub9ac\uc758 \ubaa8\ub378\uc758 \uc77c\ubc18\ud654 \uac00\ub2a5\uc131\uc744 \uce21\uc815\ud558\uace0\uc790 \ud569\ub2c8\ub2e4. ######################################################################## # testing ####################################################################### set.seed(1) # 0. EDA summary(iris) plot(iris) # 1. split data into test/train samp <- c(sample(1:50,25), sample(51:100,25), sample(101:150,25)) # 2. train model ir.model <- train.dnn(x=1:4, y=5, traindata=iris[samp,], testdata=iris[-samp,], hidden=6, maxit=2000, display=50) # 3. prediction labels.dnn <- predict.dnn(ir.model, iris[-samp, -5]) # 4. verify the results table(iris[-samp,5], labels.dnn) # labels.dnn # 1 2 3 #setosa 25 0 0 #versicolor 0 24 1 #virginica 0 0 25 #accuracy mean(as.integer(iris[-samp, 5]) == labels.dnn) # 0.98 \ud559\uc2b5 \ub370\uc774\ud130\uc138\ud2b8\uc758 \ub370\uc774\ud130 \uc190\uc2e4\uacfc \uc815\ud655\ub3c4\ub294 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4: \uc544\ub798\uc758 \ucf54\ub4dc\uc640 \uac19\uc774, \uc791\uc131\ud55c DNN \ubaa8\ub378\uacfc nnet \ud328\ud0a4\uc9c0\ub97c \ube44\uad50\ud558\uc600\uc2b5\ub2c8\ub2e4. library(nnet) ird <- data.frame(rbind(iris3[,,1], iris3[,,2], iris3[,,3]), species = factor(c(rep(\"s\",50), rep(\"c\", 50), rep(\"v\", 50)))) ir.nn2 <- nnet(species ~ ., data = ird, subset = samp, size = 6, rang = 0.1, decay = 1e-2, maxit = 2000) labels.nnet <- predict(ir.nn2, ird[-samp,], type=\"class\") table(ird$species[-samp], labels.nnet) # labels.nnet # c s v #c 22 0 3 #s 0 25 0 #v 3 0 22 # accuracy mean(ird$species[-samp] == labels.nnet) # 0.96 \uc5c5\ub370\uc774\ud2b8: 2016/4/28 Google\uc758 TensorFlow\ub294 \uc2e0\uacbd\ub9dd\uc744 \uc2dc\uac01\ud654 \ud560 \uc218 \uc788\ub294 \ub9e4\uc6b0 \ud6cc\ub96d\ud55c \uc6f9\uc0ac\uc774\ud2b8\ub97c \uacf5\uac1c\ud588\uc2b5\ub2c8\ub2e4 ( \uc5ec\uae30 \ub97c \ucc38\uace0). \uc694\uc57d \uc774 \uae00\uc5d0\uc11c, \ubc14\ub2e5\uc5d0\uc11c\ubd80\ud130 R\uc758 \uc2e0\uacbd\ub9dd\uc744 \uad6c\ud604\ud558\ub294 \ubc29\ubc95\uc5d0 \ub300\ud558\uc5ec \uc54c\uc544\ubcf4\uc558\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc608\uc81c \ucf54\ub4dc\ub294 \ub2e8\uc9c0 DNN\uc758 \ud575\uc2ec \uac1c\ub150\uc744 \uad6c\ud604\ud55c \uac83\uc774\uba70, \ub3c5\uc790\ub4e4\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \ubcf4\ub2e4 \uc2ec\ud654\ub41c \uc5f0\uc2b5\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \ub2e4\ub978 Classification \ubb38\uc81c\ub97c \ud574\uacb0\ud574 \ubcf8\ub2e4. \uac00\ub839 \uc5ec\uae30\uc758 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub97c \ud65c\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc740\ub2c9 \ub808\uc774\uc5b4 \uc0ac\uc774\uc988, \ud65c\uc131\ud568\uc218, \uc190\uc2e4\ud568\uc218\ub97c \ub2e4\uc591\ud558\uac8c \uc120\ud0dd\ud574 \ubd05\ub2c8\ub2e4. \ub2e8\uc77c \uc740\ub2c9 \ub808\uc774\uc5b4 \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \ub2e4\uc911 \uc740\ub2c9 \ub808\uc774\uc5b4\ub85c \ud655\uc7a5\ud574 \ubd05\ub2c8\ub2e4. \ud68c\uadc0 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\ub294 \ub124\ud2b8\uc6cc\ud06c\ub97c \uc124\uacc4\ud574 \ubd05\ub2c8\ub2e4. \ub124\ud2b8\uc6cc\ud06c \uc544\ud0a4\ud14d\uccd0, Weights, Bias\ub97c \uc2dc\uac01\ud654 \ud574\ubd05\ub2c8\ub2e4. \uc5ec\uae30\ub97c \ucc38\uace0\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4. Source Codes train.dnn.R # Train: build and train a 2-layers neural network train.dnn <- function(x, y, traindata=data, testdata=NULL, model = NULL, # set hidden layers and neurons # currently, only support 1 hidden layer hidden=c(6), # max iteration steps maxit=2000, # delta loss abstol=1e-2, # learning rate lr = 1e-2, # regularization rate reg = 1e-3, # show results every 'display' step display = 100, random.seed = 1) { # to make the case reproducible. set.seed(random.seed) # total number of training set N <- nrow(traindata) # extract the data and label # don't need atribute X <- unname(data.matrix(traindata[,x])) # correct categories represented by integer Y <- traindata[,y] if(is.factor(Y)) { Y <- as.integer(Y) } # create index for both row and col # create index for both row and col Y.len <- length(unique(Y)) Y.set <- sort(unique(Y)) Y.index <- cbind(1:N, match(Y, Y.set)) # create model or get model from parameter if(is.null(model)) { # number of input features D <- ncol(X) # number of categories for classification K <- length(unique(Y)) H <- hidden # create and init weights and bias W1 <- 0.01*matrix(rnorm(D*H), nrow=D, ncol=H) b1 <- matrix(0, nrow=1, ncol=H) W2 <- 0.01*matrix(rnorm(H*K), nrow=H, ncol=K) b2 <- matrix(0, nrow=1, ncol=K) } else { D <- model$D K <- model$K H <- model$H W1 <- model$W1 b1 <- model$b1 W2 <- model$W2 b2 <- model$b2 } # use all train data to update weights since it's a small dataset batchsize <- N # init loss to a very big value loss <- 100000 # Training the network i <- 0 while(i < maxit && loss > abstol ) { # iteration index i <- i +1 # forward .... # 1 indicate row, 2 indicate col hidden.layer <- sweep(X %*% W1 ,2, b1, '+') # neurons : ReLU hidden.layer <- pmax(hidden.layer, 0) score <- sweep(hidden.layer %*% W2, 2, b2, '+') # softmax score.exp <- exp(score) # debug probs <- score.exp/rowSums(score.exp) # compute the loss corect.logprobs <- -log(probs[Y.index]) data.loss <- sum(corect.logprobs)/batchsize reg.loss <- 0.5*reg* (sum(W1*W1) + sum(W2*W2)) loss <- data.loss + reg.loss # display results and update model #if( i %% display == 0) { if( 1 == 1 ) { if(!is.null(testdata)) { model <- list( D = D, H = H, K = K, # weights and bias W1 = W1, b1 = b1, W2 = W2, b2 = b2) labs <- predict.dnn(model, testdata[,-y]) accuracy <- mean(as.integer(testdata[,y]) == Y.set[labs]) cat(i, loss, accuracy, \"\\n\") } else { cat(i, loss, \"\\n\") } } # backward .... dscores <- probs dscores[Y.index] <- dscores[Y.index] - 1 dscores <- dscores / batchsize dW2 <- t(hidden.layer) %*% dscores db2 <- colSums(dscores) dhidden <- dscores %*% t(W2) dhidden[hidden.layer <= 0] <- 0 dW1 <- t(X) %*% dhidden db1 <- colSums(dhidden) # update .... dW2 <- dW2 + reg*W2 dW1 <- dW1 + reg*W1 W1 <- W1 - lr * dW1 b1 <- b1 - lr * db1 W2 <- W2 - lr * dW2 b2 <- b2 - lr * db2 } # final results # creat list to store learned parameters # you can add more parameters for debug and visualization # such as residuals, fitted.values ... model <- list( D = D, H = H, K = K, # weights and bias W1= W1, b1= b1, W2= W2, b2= b2) return(model) } predict.dnn.R # Prediction predict.dnn <- function(model, data = X.test) { # new data, transfer to matrix new.data <- data.matrix(data) # Feed Forwad hidden.layer <- sweep(new.data %*% model$W1 ,2, model$b1, '+') # neurons : Rectified Linear hidden.layer <- pmax(hidden.layer, 0) score <- sweep(hidden.layer %*% model$W2, 2, model$b2, '+') # Loss Function: softmax score.exp <- exp(score) probs <-sweep(score.exp, 1, rowSums(score.exp), '/') # select max possiblity labels.predicted <- max.col(probs) return(labels.predicted) } main.R # Copyright 2016: www.ParallelR.com # Parallel Blog : R For Deep Learning (I): Build Fully Connected Neural Network From Scratch # Classification by 2-layers DNN and tested by iris dataset # Author: Peng Zhao, patric.zhao@gmail.com base::rm(list = ls()) base::gc() source('./train.dnn.R', echo=FALSE) source('./predict.dnn.R', echo=FALSE) ######################################################################## # testing ####################################################################### set.seed(1) # 0. EDA summary(iris) names(iris) plot(iris) # 1. split data into test/train samp <- c(sample(1:50,25), sample(51:100,25), sample(101:150,25)) length(samp) # 2. train model ir.model <- train.dnn(x=1:4, y=5, traindata=iris[samp,], testdata=iris[-samp,], hidden=10, maxit=2000, display=50) # ir.model <- train.dnn(x=1:4, y=5, traindata=iris[samp,], hidden=6, maxit=2000, display=50) # 3. prediction # NOTE: if the predict is factor, we need to transfer the number into class manually. # To make the code clear, I don't write this change into predict.dnn function. labels.dnn <- predict.dnn(ir.model, iris[-samp, -5]) # 4. verify the results table(iris[-samp,5], labels.dnn) # labels.dnn # 1 2 3 #setosa 25 0 0 #versicolor 0 24 1 #virginica 0 0 25 #accuracy mean(as.integer(iris[-samp, 5]) == labels.dnn) # 0.98 # 5. compare with nnet library(nnet) ird <- data.frame(rbind(iris3[,,1], iris3[,,2], iris3[,,3]), species = factor(c(rep(\"s\",50), rep(\"c\", 50), rep(\"v\", 50)))) ir.nn2 <- nnet(species ~ ., data = ird, subset = samp, size = 6, rang = 0.1, decay = 1e-2, maxit = 2000) labels.nnet <- predict(ir.nn2, ird[-samp,], type=\"class\") table(ird$species[-samp], labels.nnet) # labels.nnet # c s v #c 22 0 3 #s 0 25 0 #v 3 0 22 # accuracy mean(ird$species[-samp] == labels.nnet) # 0.96 # Visualization # the output from screen, copy and paste here. data1 <- (\"i loss accuracy 50 1.098421 0.3333333 100 1.098021 0.3333333 150 1.096843 0.3333333 200 1.093393 0.3333333 250 1.084069 0.3333333 300 1.063278 0.3333333 350 1.027273 0.3333333 400 0.9707605 0.64 450 0.8996356 0.6666667 500 0.8335469 0.6666667 550 0.7662386 0.6666667 600 0.6914156 0.6666667 650 0.6195753 0.68 700 0.5620381 0.68 750 0.5184008 0.7333333 800 0.4844815 0.84 850 0.4568258 0.8933333 900 0.4331083 0.92 950 0.4118948 0.9333333 1000 0.392368 0.96 1050 0.3740457 0.96 1100 0.3566594 0.96 1150 0.3400993 0.9866667 1200 0.3243276 0.9866667 1250 0.3093422 0.9866667 1300 0.2951787 0.9866667 1350 0.2818472 0.9866667 1400 0.2693641 0.9866667 1450 0.2577245 0.9866667 1500 0.2469068 0.9866667 1550 0.2368819 0.9866667 1600 0.2276124 0.9866667 1650 0.2190535 0.9866667 1700 0.2111565 0.9866667 1750 0.2038719 0.9866667 1800 0.1971507 0.9866667 1850 0.1909452 0.9866667 1900 0.1852105 0.9866667 1950 0.1799045 0.9866667 2000 0.1749881 0.9866667 \") data.v <- read.table(text=data1, header=T) par(mar=c(5.1, 4.1, 4.1, 4.1)) plot(x=data.v$i, y=data.v$loss, type=\"o\", col=\"blue\", pch=16, main=\"IRIS loss and accuracy by 2-layers DNN\", ylim=c(0, 1.2), xlab=\"\", ylab=\"\", axe =F) lines(x=data.v$i, y=data.v$accuracy, type=\"o\", col=\"red\", pch=1) box() axis(1, at=seq(0,2000,by=200)) axis(4, at=seq(0,1.0,by=0.1)) axis(2, at=seq(0,1.2,by=0.1)) mtext(\"training step\", 1, line=3) mtext(\"loss of training set\", 2, line=2.5) mtext(\"accuracy of testing set\", 4, line=2) legend(\"bottomleft\", legend = c(\"loss\", \"accuracy\"), pch = c(16,1), col = c(\"blue\",\"red\"), lwd=c(1,1) )","title":"Deep Learning from Scratch Part 1."},{"location":"posts/deep-learning/2017-02-21-Deep-Learning-from-Scratch-Part-01/#_1","text":"\uc2ec\uce35 \uc778\uacf5\uc2e0\uacbd\ub9dd (\uc774\ud558 \uc6d0\uc5b4 \uc0ac\uc6a9: Deep Neural Network; DNN)\ub294 \ucd5c\uadfc \uba87\ub144\uac04 \uc774\ubbf8\uc9c0 \uc778\uc2dd, \uc790\uc5f0\uc5b4 \ucc98\ub9ac \ubc0f \uc790\uc728\uc8fc\ud589\ucc28 \ubd84\uc57c\uc5d0\uc11c \ub9c9\ub300\ud55c \uc131\uacfc\ub97c \uc774\ub8e8\uc5b4 \ub0c8\uc73c\uba70, \uadf8\ub9bc 1.\uc5d0\uc11c \ubcf4\uc774\ub294 \ubc14\uc640 \uac19\uc774 2012\ub144\uc5d0\uc11c 2015\ub144 \uc0ac\uc774 DNN\uc740 IMAGNET \uc758 \uc815\ud655\ub3c4\ub97c 80%\uc5d0\uc11c 95%\uae4c\uc9c0 \ub04c\uc5b4\uc62c\ub838\uc2b5\ub2c8\ub2e4. \uc774\ub294 \uc804\ud1b5\uc801\uc778 \ucef4\ud4e8\ud130 \ube44\uc804(Computer Vision; CV) \ubc29\ubc95\ub860\ub4e4\uc744 \uaebe\uc740 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub9bc 1. CES16\uc758 NVIDIA CEO \uc820\uc2a8 \ud669\uc758 \uc5f0\uc124\uc5d0\uc11c \ubc1c\ucdcc \uc774 \uae00\uc5d0\uc11c\ub294 \ub370\uc774\ud130 \uacfc\ud559 \ubd84\uc57c\uc5d0\uc11c \uacf5\ud1b5\uc801\uc73c\ub85c DNN\uc774\ub77c \ubd80\ub974\ub294 Fully Connected Neural Networks\uc5d0 \ub300\ud574 \uc9d1\uc911\uc801\uc73c\ub85c \ub2e4\ub8e8\uace0\uc790 \ud569\ub2c8\ub2e4. DNN\uc758 \uac00\uc7a5 \ud070 \uc7a5\uc810\uc740, Kaggle \uc758 \uc608\uc81c\ucc98\ub7fc \uc5d4\uc9c0\ub2c8\uc5b4\uac00 \uc27d\uac8c \uc815\uc758\ud560 \uc218 \uc5c6\ub294 \ubcf5\uc7a1\ud558\uace0 \uace0\ucc28\uc6d0\uc801\uc778 \ub370\uc774\ud130\ub97c Deep Layers \uc544\ud0a4\ud14d\uccd0\ub97c \uc774\uc6a9\ud558\uc5ec \uc790\ub3d9\uc73c\ub85c \ud53c\uccd0(Feature)\ub4e4\uc744 \ucd94\ucd9c\ud558\uace0 \ud559\uc2b5\ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. \ub530\ub77c\uc11c, DNN\uc740 \ub370\uc774\ud130 \uacfc\ud559\uc790\ub4e4\uc5d0\uac8c \ub9e4\uc6b0 \ub9e4\ub825\uc801\uc774\uba70, Nick\uc774 \uc4f4 \uae00 \uacfc DNN\uc744 \uc774\uc6a9\ud55c \uc2e0\uc6a9\uc810\uc218 \ub9e4\uae30\uae30 \ucc98\ub7fc \ubd84\ub958(Classification), \uc2dc\uacc4\uc5f4(Time Series), \ucd94\ucc9c \ub4f1\uc758 \ubd84\uc57c\uc5d0\uc11c \uc131\uacf5\uc801\uc778 \ucf00\uc774\uc2a4\uac00 \uc874\uc7ac\ud569\ub2c8\ub2e4. CRAN\uacfc R \ucee4\ubba4\ub2c8\ud2f0\uc5d0 nnet , nerualnet , H2O , DARCH , deepnet \ubc0f mxnet \ub4f1\uacfc \uac19\uc740 \uc778\uae30\uac00 \ub9ce\uace0 \uc131\uc219\ud55c DNN \ud328\ud0a4\uc9c0\ub4e4\uc774 \ub9ce\uc774 \uc874\uc7ac\ud558\uc9c0\ub9cc, H2O DNN \uc54c\uace0\ub9ac\uc998-R \uc778\ud130\ud398\uc774\uc2a4 \ub97c \uac15\ub825\ud558\uac8c \uad8c\uc7a5\ud569\ub2c8\ub2e4. \ud328\ud0a4\uc9c0 \ubc31\uc5d4\ub4dc \ucef4\ud4e8\ud130 \uc790\uc6d0 nnet C/C++ \uc2f1\uae00 \uc2a4\ub808\ub4dc (Single Thread) neuralnet C/C++ \uc2f1\uae00 \uc2a4\ub808\ub4dc (Single Thread) DARCH C/C++ \uc2f1\uae00 \uc2a4\ub808\ub4dc (Single Thread) deepnet R \uc2f1\uae00 \uc2a4\ub808\ub4dc (Single Thread) h2o Java \uba40\ud2f0-\uc2a4\ub808\ub4dc, \uba40\ud2f0-\ub178\ub4dc mxnet C/C++/CUDA \uba40\ud2f0-\uc2a4\ub808\ub4dc, GPU, \uba40\ud2f0-\ub178\ub4dc \uadf8\ub7ec\uba74 \uad73\uc774 DNN\uc744 \ubc14\ub2e5\ubd80\ud130 \uad6c\ud604\ud560 \ud544\uc694\uac00 \uc788\ub294 \uac83\uc77c\uae4c\uc694? \u2013 \uc2e0\uacbd\ub9dd\uc758 \uc791\ub3d9 \uc6d0\ub9ac\ub97c \uc774\ud574\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4 \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 \uae30\uc874\uc758 DNN \ud328\ud0a4\uc9c0\ub97c \uc774\uc6a9\ud558\uc5ec DNN \ubaa8\ub378\uc5d0 \ub300\ud55c \ud55c \uc904\uc758 R \ucf54\ub4dc\ub9cc\uc73c\ub85c \ud574\uacb0\ud560 \uc218 \uc788\ub294\ub370, neuralnet \ud328\ud0a4\uc9c0\uc758 \uc608 \uac00 \uadf8\ub807\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098, \uacbd\ud5d8\uc774 \uc5c6\ub294 \uc720\uc800\ub77c\uba74 \ucc98\ub9ac \uacfc\uc815\uacfc \uacb0\uacfc\ub97c \uc774\ud574\ud558\uae30 \uc5b4\ub824\uc6b8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c, \uba54\ucee4\ub2c8\uc998\uc5d0\uc11c \uc5f0\uc0b0 \uc2dc\uac01\uc5d0 \uc774\ub974\ub294 \ubcf4\ub2e4 \uc0c1\uc138\ud55c \ub0b4\uc6a9\uc744 \uc774\ud574\ud558\ub824\uba74 \uc790\uc2e0\ub9cc\uc758 \ub124\ud2b8\uc6cc\ud06c\ub97c \uad6c\ud604\ud574 \ubcf4\ub294 \uc5f0\uc2b5\uc774 \ub9e4\uc6b0 \uac00\uce58\uc788\ub294 \uc791\uc5c5\uc77c \uac83\uc785\ub2c8\ub2e4. \u2013 \uc790\uc2e0\uc758 \uc0c8\ub85c\uc6b4 \uc544\uc774\ub514\uc5b4\ub97c \ub124\ud2b8\uc6cc\ud06c\uc5d0 \uc811\ubaa9\ud560 \uc218 \uc788\ub2e4 DNN\uc740 \uae09\uc18d\ub3c4\ub85c \ubc1c\uc804\ud558\ub294 \ubd84\uc57c \uc911 \ud558\ub098\uc785\ub2c8\ub2e4. \ub9ce\uc740 \ud6cc\ub96d\ud55c \uc791\uc5c5\uacfc \uc5f0\uad6c \uacb0\uacfc\ub4e4\uc774 \ud1b1\uc800\ub110\uacfc \uc778\ud130\ub137\uc5d0 \ub9e4\uc8fc\ub9c8\ub2e4 \uac8c\uc7ac\ub418\uba70, \uc720\uc800\ub4e4\uc740 \uc790\uc2e0\ub4e4\uc758 \ud2b9\uc815 \ub124\ud2b8\uc6cc\ud06c \uc124\uc815\uc774 \ub2e4\uc591\ud55c \ud65c\uc131 \ud568\uc218(Activation Function), \uc190\uc2e4 \ud568\uc218(Loss Function), \uc815\uaddc\ud654(Regularization), \uc5f0\uacb0 \uadf8\ub798\ud504 \ub4f1\uc758 \ubb38\uc81c\ub97c \ub9cc\uc871\ud558\ub3c4\ub85d \ud558\uace0 \uc788\ub2e4. \ubc18\uba74\uc5d0 \uae30\uc874\uc758 \ud328\ud0a4\uc9c0\ub4e4\uc740 \ubd84\uba85 \ucd5c\uadfc\uc758 \uc5f0\uad6c\ub97c \ubaa8\ub450 \ubc18\uc601\ud558\uc9c0\ub294 \ubabb\ud558\uace0 \uc788\uc73c\uba70, \uae30\uc874\uc758 \uac70\uc758 \ub300\ubd80\ubd84\uc758 \ud328\ud0a4\uc9c0\ub4e4\uc740 C/C++, Java\ub85c \uc791\uc131\ub418\uc5c8\uae30 \ub54c\ubb38\uc5d0 \ucd5c\uadfc\uc758 \ubcc0\ud654\uc640 \ub2f9\uc2e0\uc758 \uc544\uc774\ub514\uc5b4\uc5d0 \uc720\uc5f0\ud558\uac8c \ub300\uc751\ud558\uc9c0 \ubabb\ud569\ub2c8\ub2e4. \u2013 \ub124\ud2b8\uc6cc\ud06c\uc640 \ub370\uc774\ud130\ub97c \ub514\ubc84\uae45\ud558\uace0 \uc2dc\uac01\ud654\ud560 \uc218 \uc788\ub2e4 \uc5b8\uae09\ud55c \ubc14\uc640 \uac19\uc774, \uae30\uc874\uc758 DNN \ud328\ud0a4\uc9c0\ub4e4\uc740 \uace0\ub3c4\ub85c \uc870\ud569\ub418\uc5c8\uc73c\uba70 \uc800\uc218\uc900 \uc5b8\uc5b4\ub85c \uc791\uc131\ub418\uc5c8\uae30 \ub54c\ubb38\uc5d0 \ub808\uc774\uc5b4 \ubcc4\ub85c \ub610\ub294 \ub178\ub4dc \ubcc4\ub85c \ub124\ud2b8\uc6cc\ud06c\ub97c \ub514\ubc84\uae45\ud558\ub294 \uac83\uc740 \uc545\ubabd\uacfc\ub3c4 \uac19\uc740 \uac83\uc785\ub2c8\ub2e4. \uac01 \ub808\uc774\uc5b4\uc758 \uacb0\uacfc\ub97c \uc2dc\uac01\ud654\ud558\ub294 \uac83\uc774 \uc26c\uc6b4 \uc77c\uc740 \uc544\ub2c8\ub354\ub77c\ub3c4, \ud559\uc2b5 \uacfc\uc815 \ub3d9\uc548 \ub370\uc774\ud130 \ub610\ub294 Weight\ub4e4\uc744 \ubaa8\ub2c8\ud130\ub9c1\ud558\uace0 \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \ubc1c\uacac\ub41c \ud328\ud134\ub4e4\uc744 \uc2dc\uac01\ud654\ud558\ub294 \uac83\uc740 \uc911\uc694\ud569\ub2c8\ub2e4.","title":"\uc774\ub860\uc801 \ubc30\uacbd"},{"location":"posts/deep-learning/2017-02-21-Deep-Learning-from-Scratch-Part-01/#_2","text":"\ub370\uc774\ud130 \uacfc\ud559\uc5d0\uc11c DNN\uc774\ub77c\uace0 \ubd80\ub974\ub294, Fully Connected Neural Network \ub294 \uc778\uc811\ud558\ub294 \ub124\ud2b8\uc6cc\ud06c \ub808\uc774\uc5b4 \uac04\uc5d0 \uc644\uc804\ud788 \uc5f0\uacb0\ub418\ub294 \ub124\ud2b8\uc6cc\ud06c\uc774\ub2e4. \ub124\ud2b8\uc6cc\ud06c \ub0b4 \ubaa8\ub4e0 \ub274\ub7f0\uc774 \uc778\uc811\ud558\ub294 \ub808\uc774\uc5b4\uc758 \ubaa8\ub4e0 \ub274\ub7f0\uacfc \uc5f0\uacb0\ub418\ub294 \uac83\uc785\ub2c8\ub2e4. \uc544\ub798\uc758 \uadf8\ub9bc\uc740 1\uac1c\uc758 \uc785\ub825 \ub808\uc774\uc5b4, 2\uac1c\uc758 \uc740\ub2c9 \ub808\uc774\uc5b4, 1\uac1c\uc758 \ucd9c\ub825 \ub808\uc774\uc5b4\ub85c \uad6c\uc131\ub41c \ub9e4\uc6b0 \uac04\ub2e8\ud558\uace0 \uc804\ud615\uc801\uc778 \ub124\ud2b8\uc6cc\ud06c\ub97c \ubcf4\uc5ec\uc90d\ub2c8\ub2e4. \ub300\ubd80\ubd84 \uc5f0\uad6c\uc790\ub4e4\uc774 \ub124\ud2b8\uc6cc\ud06c \uc544\ud0a4\ud14d\uccd0\uc5d0 \ub300\ud574 \uc5b8\uae09\ud560 \ub54c, \uc774\ub294 \ub124\ud2b8\uc6cc\ud06c \ub0b4\uc758 \ub808\uc774\uc5b4 \uac1c\uc218, \uac01 \ub808\uc774\uc5b4 \ub0b4 \ub274\ub7f0\uc758 \uac1c\uc218, \uc0ac\uc6a9\ub41c \ud65c\uc131\ud568\uc218, \uc190\uc2e4\ud568\uc218, \uc815\uaddc\ud654\uc758 \ud615\ud0dc \ub4f1\uacfc \uac19\uc740 DNN\uc758 \uc124\uc815\uc744 \uc77c\uceeb\uc2b5\ub2c8\ub2e4. \uc774\uc81c DNN\uc758 \uae30\ubcf8 \uad6c\uc131\uc694\uc18c\ub97c \ud6d1\uc5b4\ubcf4\uace0 \uc774\uac83\uc774 R\uc5d0\uc11c \uc5b4\ub5bb\uac8c \uad6c\ud604\ub418\ub294\uc9c0 \uc54c\uc544\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","title":"\uae30\ubcf8 \uac1c\ub150\uacfc \uad6c\uc131\uc694\uc18c"},{"location":"posts/deep-learning/2017-02-21-Deep-Learning-from-Scratch-Part-01/#weight-bias","text":"\uc704\uc758 DNN \uc544\ud0a4\ud14d\uccd0\ub97c \uc608\ub97c \ub4e4\uc5b4\ubcf4\uba74, 3\uac1c\uc758 Weight \uadf8\ub8f9\uc774 \uc788\ub294\ub370, \uc785\ub825 \ub808\uc774\uc5b4\uc5d0\uc11c \uccab\ubc88\uc9f8 \uc740\ub2c9 \ub808\uc774\uc5b4\uae4c\uc9c0, \uccab\ubc88\uc9f8 \uc740\ub2c9 \ub808\uc774\uc5b4\uc5d0\uc11c \ub450\ubc88\uc9f8 \uc740\ub2c9 \ub808\uc774\uc5b4\uae4c\uc9c0, \ub450\ubc88\uc9f8 \uc740\ub2c9 \ub808\uc774\uc5b4\uc5d0\uc11c \ucd9c\ub825 \ub808\uc774\uc5b4\uae4c\uc9c0\uc785\ub2c8\ub2e4. Bias \ub2e8\uc704\ub294 \ubaa8\ub4e0 \uc740\ub2c9 \ub178\ub4dc\ub85c \uc5f0\uacb0\ub418\uba70 \uc774\ub294 \ucd9c\ub825 \uc810\uc218\uc5d0 \uc601\ud5a5\uc744 \uc8fc\uc9c0\ub9cc \uc2e4\uc81c \ub370\uc774\ud130\uc640 \uc0c1\ud638\uc791\uc6a9\uc774 \uc5c6\ub294 \uac83\uc744 \uac00\uc815\ud569\ub2c8\ub2e4. R\uc5d0\uc11c\uc758 \uad6c\ud604\uc5d0\uc11c Weight\uc640 Bias\ub294 \ud589\ub82c\ub85c \ud45c\ud604\ud569\ub2c8\ub2e4. Weight\uc758 \ud06c\uae30\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ud569\ub2c8\ub2e4: (\ub808\uc774\uc5b4 M \ub0b4 \ub274\ub7f0\uc758 \uac1c\uc218) X (\ub808\uc774\uc5b4 M+1 \ub0b4 \ub274\ub7f0\uc758 \uac1c\uc218) \uadf8\ub9ac\uace0 Weight\ub4e4\uc740 rnorm\uc73c\ub85c\ubd80\ud130 \uc784\uc758\ub85c \ucd08\uae30\ud654 \ub429\ub2c8\ub2e4. Bias\ub294 \ub2e8\uc9c0 \ub274\ub7f0\uc758 \ud06c\uae30\uc640 \ub3d9\uc77c\ud55c 1\ucc28\uc6d0 \ud589\ub82c\uc774\uba70 0\uc73c\ub85c \uc124\uc815\ub429\ub2c8\ub2e4. 1/sqrt(n) \uc744 \uc774\uc6a9\ud55c \ubd84\uc0b0 \ubcf4\uc815\uacfc Sparse \ucd08\uae30\ud654\uc640 \uac19\uc740 \ub2e4\ub978 \ucd08\uae30\ud654 \ubc29\ubc95\uc740 Stanford CS231n\uc758 Weight Initialization \uc5d0 \uc18c\uac1c\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. R CODE: weight.i <- 0.01*matrix(rnorm(layer.size(i)*layer.size(i+1)), nrow=layer.size(i), ncol=layer.size(i+1)) bias.i <- matrix(0, nrow=1, ncol = layer.size(i)) \ub2e4\ub978 \uc77c\ubc18\uc801\uc778 \uad6c\ud604 \ubc29\ubc95\uc740 Weight\ub4e4\uacfc Bias\ub97c \uacb0\ud569\ud558\uc5ec \uc785\ub825 \ucc28\uc6d0\uc774 N+1\uc774 \ub418\ub3c4\ub85d \ud558\ub294 \uac83\uc778\ub370, N\uc740 \uc544\ub798\uc640 \uac19\uc774 1\uac1c\uc758 Bias\ub97c \uac16\ub294 \uc785\ub825 \ud53c\uccd0\uc758 \uac1c\uc218\uc785\ub2c8\ub2e4. weight <- 0.01*matrix(rnorm((layer.size(i)+1)*layer.size(i+1)), nrow=layer.size(i)+1, ncol=layer.size(i+1))","title":"Weight\uc640 Bias"},{"location":"posts/deep-learning/2017-02-21-Deep-Learning-from-Scratch-Part-01/#neuron","text":"\ub274\ub7f0\uc740 \uc778\uac04\uc758 \uc0dd\ubb3c\ud559\uc801 \ub274\ub7f0 \ubaa8\ub378\uc5d0\uc11c \uc601\uac10\uc744 \uc5bb\uc740 DNN\uc758 \uae30\ubcf8 \ub2e8\uc704\uc785\ub2c8\ub2e4. \ud558\ub098\uc758 \ub274\ub7f0\uc740 \ub370\uc774\ud130 \uacfc\ud559\uc758 \uc120\ud615 \ud68c\uadc0\ubd84\uc11d\uacfc \uac19\uc774 Weight\uacfc \uc785\ub825\uc744 \uacf1\ud558\uace0 \ub354\ud558\ub294 \uc5f0\uc0b0\uc744 \uc218\ud589(FMA)\ud558\ub294\ub370, FMA\uc758 \uacb0\uacfc\ub294 \ud65c\uc131\ud568\uc218\ub85c \uc804\ub2ec\ub429\ub2c8\ub2e4. \uc8fc\ub85c \uc0ac\uc6a9\ub418\ub294 \ud65c\uc131\ud568\uc218\ub4e4\uc5d0\ub294 sigmoid , ReLu , Tanh \ubc0f Maxout \ub4f1\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uae00\uc5d0\uc11c\ub294 Rectified Linear Unit (ReLU), f(x) = max(0, x) \ub97c \ud65c\uc131\ud568\uc218\ub85c \uc0ac\uc6a9\ud560 \uac83\uc785\ub2c8\ub2e4. \ub2e4\ub978 \ud65c\uc131\ud568\uc218\uc5d0 \ub300\ud574 \uc54c\uc544\ubcf4\ub824\uba74 \uc5ec\uae30 \ub97c \ucc38\uace0\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4. R\uc5d0\uc11c sum(xi*wi) \uacfc \uac19\uc774 \ub2e4\uc591\ud55c \ubc29\ubc95\uc73c\ub85c \ub274\ub7f0\uc744 \uad6c\ud604\ud560 \uc218 \uc788\uc9c0\ub9cc, \ubcf4\ub2e4 \ud6a8\uc728\uc801\uc778 \ud45c\ud604\uc740 \ud589\ub82c \uacf1\uc148\uc744 \uc774\uc6a9\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. neuron.ij <- max(0, input %*% weight + bias)","title":"\ub274\ub7f0(Neuron)"},{"location":"posts/deep-learning/2017-02-21-Deep-Learning-from-Scratch-Part-01/#_3","text":"\uc2e4\uc9c8\uc801\uc73c\ub85c, \uc131\ub2a5\uc744 \uace0\ub824\ud558\uc5ec \ud56d\uc0c1 \uc77c\uad04\uc801\uc73c\ub85c \ub808\uc774\uc5b4 \ub0b4 \ubaa8\ub4e0 \ub274\ub7f0\uc744 \uc5c5\ub370\uc774\ud2b8\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c, \uc704\uc758 \ucf54\ub4dc\ub294 \uc81c\ub300\ub85c \ub3d9\uc791\ud558\uc9c0 \uc54a\uc744 \uac83\uc785\ub2c8\ub2e4. 1) \ud589\ub82c \uacf1\uc148\uacfc \ub367\uc148 \uc544\ub798\uc758 \ucf54\ub4dc\uc5d0\uc11c \ubcf4\ub294 \ubc14\uc640 \uac19\uc774, \uc11c\ub85c \ub2e4\ub978 \ucc28\uc6d0\uc744 \uac16\ub294 input %*% weights \uc640 bias \ub97c \uc9c1\uc811 \ub354\ud560 \uc218\ub294 \uc5c6\uc2b5\ub2c8\ub2e4. \uc774\uc5d0 \ub300\ud55c \ub450\uac00\uc9c0 \uc194\ub8e8\uc158\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uccab\ubc88\uc9f8\ub294 Bias\ub97c ncol\ubc88 \ubc18\ubcf5\ud558\ub294 \uac83\uc778\ub370, \ud06c\uae30\uac00 \ud070 \ub370\uc774\ud130 \uc785\ub825\uc5d0 \ub300\ud558\uc5ec \uba54\ubaa8\ub9ac\ub97c \ub0ad\ube44\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 \ub450\ubc88\uc9f8 \ubc29\ubc95\uc774 \ub354 \ub0ab\uc2b5\ub2c8\ub2e4. # dimension: 2X2 input <- matrix(1:4, nrow=2, ncol=2) # dimension: 2x3 weights <- matrix(1:6, nrow=2, ncol=3) # dimension: 1*3 bias <- matrix(1:3, nrow=1, ncol=3) # doesn't work since unmatched dimension input %*% weights + bias Error input %*% weights + bias : non-conformable arrays # solution 1: repeat bias aligned to 2X3 s1 <- input %*% weights + matrix(rep(bias, each=2), ncol=3) # solution 2: sweep addition s2 <- sweep(input %*% weights ,2, bias, '+') all.equal(s1, s2) [1] TRUE 2) \ud589\ub82c\uc5d0 \ub300\ud55c \uc694\uc18c \ucd5c\ub300\uac12 \uc5ec\uae30\uc5d0\uc11c \ub2e4\ub978 \ud2b8\ub9ad\uc740 pmax \ub97c max \ub85c \uad50\uccb4\ud558\uc5ec \ud589\ub82c \uc804\uccb4\uc758 \ucd5c\ub300\uac12 \ub300\uc2e0 \ud589\ub82c\uc758 \uc694\uc18c\uc5d0 \ub300\ud55c \ucd5c\ub300\uac12\uc744 \uc5bb\ub294 \uac83\uc778\ub370, \ud2b9\ud788 pmax \uc758 \uc21c\uc11c\uc5d0 \uc720\uc758\ud574\uc57c \ud569\ub2c8\ub2e4. # the original matrix > s1 [,1] [,2] [,3] [1,] 8 17 26 [2,] 11 24 37 # max returns global maximum > max(0, s1) [1] 37 # s1 is aligned with a scalar, so the matrix structure is lost > pmax(0, s1) [1] 8 11 17 24 26 37 # correct # put matrix in the first, the scalar will be recycled to match matrix structure > pmax(s1, 0) [,1] [,2] [,3] [1,] 8 17 26 [2,] 11 24 37","title":"\uad6c\ud604 \ud301"},{"location":"posts/deep-learning/2017-02-21-Deep-Learning-from-Scratch-Part-01/#layer","text":"\uc785\ub825 \ub808\uc774\uc5b4 \uc785\ub825 \ub808\uc774\uc5b4\ub294 1\uac1c\uc758 \ub808\uc774\uc5b4\ub85c \uc0c1\ub300\uc801\uc73c\ub85c \uace0\uc815\ub418\uc5b4 \uc788\uc73c\uba70 \uae30\ubcf8 \uac1c\uc218\ub294 \uc785\ub825 \ub370\uc774\ud130\uc758 \ud53c\uccd0(Feature) \uac1c\uc218\uc640 \ub3d9\uc77c\ud569\ub2c8\ub2e4. \uc740\ub2c9 \ub808\uc774\uc5b4 \uc740\ub2c9 \ub808\uc774\uc5b4\ub294 \ub9e4\uc6b0 \ub2e4\uc591\ud558\uba70 DNN\uc758 \ud575\uc2ec \uad6c\uc131\uc694\uc18c\uc785\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc77c\ubc18\uc801\uc73c\ub85c \ubb38\uc81c\uac00 \ubcf5\uc7a1\ud560\uc218\ub85d(\ube44\uc120\ud615) \ubc14\ub78c\uc9c1\ud55c \ud328\ud134\uc744 \ucc3e\uae30 \uc704\ud574\uc11c\ub294 \ub354 \ub9ce\uc740 \uc740\ub2c9 \ub808\uc774\uc5b4\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. \ucd9c\ub825 \ub808\uc774\uc5b4 \ucd9c\ub825 \ub808\uc774\uc5b4\uc758 \ub2e8\uc704\ub294 Classification\uc5d0 \uc788\uc5b4\uc11c\ub294 \uac01 \ud074\ub798\uc2a4\uc758 \uc810\uc218\ub97c \ud45c\ud604\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ub418\uace0 \ud68c\uadc0\ubd84\uc11d\uc5d0 \uc788\uc5b4\uc11c\ub294 \uc784\uc758\uc758 \uc2e4\uc218 \uac12\uc744 \ub098\ud0c0\ub0b4\uae30 \ub54c\ubb38\uc5d0 \uc77c\ubc18\uc801\uc73c\ub85c \ud65c\uc131\ud568\uc218\ub97c \uac16\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ud68c\uadc0\ubd84\uc11d\uc5d0 \ub300\ud574\uc11c \ucd9c\ub825 \ub178\ub4dc\ub294 \ub2e8 \ud55c \uac1c\uc774\uc9c0\ub9cc, Classification\uc5d0 \uc788\uc5b4\uc11c\ub294 \ucd9c\ub825 \ub2e8\uc704\uc758 \uac1c\uc218\ub294 \uc608\uce21\uc758 \uce74\ud14c\uace0\ub9ac\uc758 \uac1c\uc218\uc640 \uc77c\uce58\ud569\ub2c8\ub2e4.","title":"\ub808\uc774\uc5b4(Layer)"},{"location":"posts/deep-learning/2017-02-21-Deep-Learning-from-Scratch-Part-01/#_4","text":"\uc9c0\uae08\uae4c\uc9c0, Deep Neural Network\uc758 \uae30\ubcf8 \uac1c\ub150\uc5d0 \ub300\ud574 \uc54c\uc544\ubcf4\uc558\uc73c\uba70, \uc774\uc81c Deep Neural Network\uc744 \uad6c\ucd95\ud574 \ubcf4\ub824\uace0 \ud558\ub294\ub370, \uc774\ub294 \ub124\ud2b8\uc6cc\ud06c \uc544\ud0a4\ud14d\uccd0, \ud559\uc2b5 \ub124\ud2b8\uc6cc\ud06c\ub97c \uacb0\uc815\ud558\ub294 \uac83\uacfc \ud559\uc2b5\ub41c \ub124\ud2b8\uc6cc\ud06c\ub97c \uac00\uc9c0\uace0 \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130\ub97c \uc608\uce21\ud558\ub294 \uc77c\uc744 \ud3ec\ud568\ud569\ub2c8\ub2e4. \uc27d\uac8c \uc774\ud574\ud558\uae30 \uc704\ud574\uc11c, \uc6b0\ub9ac\ub294 \uc791\uc740 \ub370\uc774\ud130\uc138\ud2b8\uc778 Edgar Anderson\uc758 \ub370\uc774\ud130( iris )\ub97c \uc0ac\uc6a9\ud558\uc5ec DNN\uc73c\ub85c Classification\uc744 \uc218\ud589\ud558\uace0\uc790 \ud569\ub2c8\ub2e4.","title":"\uc2e0\uacbd\ub9dd \uad6c\ucd95\ud558\uae30: \uc544\ud0a4\ud14d\uccd0, \uc608\uce21 \uadf8\ub9ac\uace0 \ud559\uc2b5"},{"location":"posts/deep-learning/2017-02-21-Deep-Learning-from-Scratch-Part-01/#_5","text":"IRIS \ub294 \uc798 \uc54c\ub824\uc9c4 \uba38\uc2e0\ub7ec\ub2dd\uc6a9 stock R\uc758 \ube4c\ud2b8\uc778(Built-In) \ub370\uc774\ud130\uc138\ud2b8\uc785\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc544\ub798\uc640 \uac19\uc774 \ucf58\uc194\uc5d0\uc11c \uc9c1\uc811 summary \ub97c \ud1b5\ud574 \ub370\uc774\ud130\uc138\ud2b8\ub97c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. summary(iris) Sepal.Length Sepal.Width Petal.Length Petal.Width Species Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 setosa :50 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 versicolor:50 Median :5.800 Median :3.000 Median :4.350 Median :1.300 virginica :50 Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 Summary\ub85c\ubd80\ud130 4\uac1c\uc758 \ud53c\uccd0\uc640 3\uac1c\uc758 Species \uce74\ud14c\uace0\ub9ac\uac00 \uc788\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc544\ub798\uc640 \uac19\uc774 DNN \uc544\ud0a4\ud14d\uccd0\ub97c \uc124\uacc4\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0\ub098\uc11c list\ub85c DNN \ubaa8\ub378\uc744 \uc800\uc7a5\ud560 \uc218 \uc788\ub294\ub370, \uc774\uac83\uc740 \uc544\ub798\uc640 \uac19\uc774 \uc800\uc7a5 \ub610\ub294 \uc608\uce21\uc744 \uc704\ud574 \uc0ac\uc6a9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc0ac\uc2e4, \uc720\uc5f0\ud558\uac8c \ubaa8\ub378\uc5d0 \ub300\ud55c \ub354\ub9ce\uc740 \uad00\uc2ec \ud30c\ub77c\ubbf8\ud130\ub4e4\uc744 \uc800\uc7a5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. List of 7 $ D : int 4 $ H : num 6 $ K : int 3 $ W1: num [1:4, 1:6] 1.34994 1.11369 -0.57346 -1.12123 -0.00107 ... $ b1: num [1, 1:6] 1.336621 -0.509689 -0.000277 -0.473194 0 ... $ W2: num [1:6, 1:3] 1.31464 -0.92211 -0.00574 -0.82909 0.00312 ... $ b2: num [1, 1:3] 0.581 0.506 -1.088","title":"\ub124\ud2b8\uc6cc\ud06c \uc544\ud0a4\ud14d\uccd0"},{"location":"posts/deep-learning/2017-02-21-Deep-Learning-from-Scratch-Part-01/#_6","text":"\uba38\uc2e0\ub7ec\ub2dd \ubd84\uc57c\uc5d0\uc11c Classification \ub610\ub294 \ucd94\ub860\uc774\ub77c\uace0\ub3c4 \ubd88\ub9ac\uc6b0\ub294 \uc608\uce21\uc740 \ud559\uc2b5\uc640 \ube44\uad50\ud560 \ub54c \ud568\ucd95\uc801\uc778 \uac1c\ub150\uc774\uba70 \ud589\ub82c \uacf1\uc148\uc744 \ud1b5\ud574 \uc785\ub825\uc73c\ub85c\ubd80\ud130 \ucd9c\ub825 \ub808\uc774\uc5b4 \uac04 \ub124\ud2b8\uc6cc\ud06c\ub97c \ud6d1\uace0 \uc9c0\ub098\uac11\ub2c8\ub2e4. \ucd9c\ub825 \ub808\uc774\uc5b4\ub294 \ud65c\uc131\ud568\uc218\ub97c \ud544\uc694\ub85c \ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ud68c\uadc0\ubd84\uc11d\uc5d0\uc11c\ub294 \ucd9c\ub825\uc740 \uc608\uce21\ub41c \uc2e4\uc218 \uac12\uc744 \ub098\ud0c0\ub0b4\ub294 \ubc18\uba74, Classification\uc5d0\uc11c\ub294 softmax \uc5d0 \uc758\ud574 \ud655\ub960\uc774 \uacc4\uc0b0\ub420 \uac83\uc785\ub2c8\ub2e4. \uc774 \uacfc\uc815\uc740 Feed Forward \ub610\ub294 Feed Propagation\uc774\ub77c\uace0 \ubd88\ub9ac\uc6c1\ub2c8\ub2e4. # Prediction predict.dnn <- function(model, data = X.test) { # new data, transfer to matrix new.data <- data.matrix(data) # Feed Forwad hidden.layer <- sweep(new.data %*% model$W1 ,2, model$b1, '+') # neurons : Rectified Linear hidden.layer <- pmax(hidden.layer, 0) score <- sweep(hidden.layer %*% model$W2, 2, model$b2, '+') # Loss Function: softmax score.exp <- exp(score) probs <-sweep(score.exp, 1, rowSums(score.exp), '/') # select max possiblity labels.predicted <- max.col(probs) return(labels.predicted) }","title":"\uc608\uce21"},{"location":"posts/deep-learning/2017-02-21-Deep-Learning-from-Scratch-Part-01/#_7","text":"\ud559\uc2b5\uc740 \uc8fc\uc5b4\uc9c4 \ub124\ud2b8\uc6cc\ud06c \uc544\ud0a4\ud14d\uccd0\uc5d0\uc11c \ucd5c\uc801\ud654 \ud30c\ub77c\ubbf8\ud130(Weight\ub4e4\uacfc Bias)\ub97c \ucc3e\uace0 Classification \uc624\ucc28 \ub610\ub294 \uc794\ub958\uc624\ucc28\ub97c \ucd5c\uc18c\ud654\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uc774 \uacfc\uc815\uc740 Feed Forward\uc640 Back Propagation\uc758 \ub450 \uac1c\uc758 \ud30c\ud2b8\ub85c \ub098\ub20c \uc218 \uc788\uc2b5\ub2c8\ub2e4. Feed Forward\ub294 \uc785\ub825 \ub370\uc774\ud130 (\uc608\uce21 \ubd80\ubd84)\ub97c \uac16\ub294 \ub124\ud2b8\uc6cc\ud06c\ub97c \ud6d1\uace0 \uc9c0\ub098\uac00\uace0 Loss Function (Cost Function)\uc73c\ub85c \ucd9c\ub825 \ub808\uc774\ud130\uc758 \ub370\uc774\ud130 \uc190\uc2e4\uc744 \uacc4\uc0b0\ud569\ub2c8\ub2e4. \"\ub370\uc774\ud130 \uc190\uc2e4\uc740 \uc608\uce21(\uac00\ub839, Classification\uc5d0\uc11c Class \uc810\uc218 \uc2e4\uc9c0 \uac80\uc99d \ub77c\ubca8) \uac04\uc758 \ud638\ud658\uc131\uc744 \uce21\uc815\ud569\ub2c8\ub2e4.\" \ubcf8 \uc608\uc81c \ucf54\ub4dc\uc5d0\uc11c \ub370\uc774\ud130 \uc190\uc2e4\uc744 \ud3c9\uac00\ud558\uae30 \uc704\ud574 Cross-Entropy \ud568\uc218\ub97c \uc120\ud0dd\ud558\uc600\uc73c\uba70 \uc774\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \uc5ec\uae30 \ub97c \ucc38\uace0\ud558\uae30 \ubc14\ub78d\ub2c8\ub2e4. \ub370\uc774\ud130 \uc190\uc2e4\uac12\uc744 \uc5bb\uc740 \ud6c4, Weights\uc640 Bias\ub97c \ubcc0\uacbd\ud558\uc5ec \ub370\uc774\ud130 \uc190\uc2e4\uc744 \ucd5c\uc18c\ud654\ud574\uc57c \ud569\ub2c8\ub2e4. \uac00\uc7a5 \ub9ce\uc774 \uc0ac\uc6a9\ub418\ub294 \ubc29\ubc95\uc740 \uac01 \ud30c\ub77c\ubbf8\ud130( W1 , W2 , b1 , b2 )\uc5d0 \ub300\ud558\uc5ec \ub370\uc774\ud130 \uc190\uc2e4\uc758 \ubbf8\ubd84\uc744 \uacc4\uc0b0\ud574\uc57c \ud558\ub294 \uae09\uac15\ud558\ubc95( Gradient Descent )\uc774\ub098 \ud655\ub960\uc801 \uae09\uac15\ud558\ubc95( Stochastic Gradient Descent )\uc73c\ub85c \ubaa8\ub4e0 \ub808\uc774\uc5b4\uc640 \ub274\ub7f0\uc73c\ub85c \uc190\uc2e4\uc744 \uc5ed\uc804\ud30c(Back Propagation)\uc2dc\ud0a4\ub294 \uac83\uc785\ub2c8\ub2e4. \uc5ed\uc804\ud30c\ub294 \ub2e4\uc591\ud55c \ud65c\uc131\ud568\uc218\uc5d0 \ub2e4\ub77c \ub2ec\ub77c\uc9c8 \uac83\uc774\uba70 \uc5ed\uc804\ud30c\uc2dd\uacfc \ubc29\ubc95\uc740 \uc5ec\uae30 \uc640 \uc5ec\uae30 \ub97c \ucc38\uace0\ud558\uae30 \ubc14\ub78d\ub2c8\ub2e4. Stanford CS231n \uc5d0\uc11c \ub354 \uc790\uc138\ud55c \ud301\uc744 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubcf8 \uc608\uc81c\uc5d0\uc11c ReLU\uc5d0 \ub300\ud55c \uac01 \ud3ec\uc778\ud2b8\uc5d0 \ub300\ud55c \ubbf8\ubd84\uc740: # Train: build and train a 2-layers neural network train.dnn <- function(x, y, traindata=data, testdata=NULL, # set hidden layers and neurons # currently, only support 1 hidden layer hidden=c(6), # max iteration steps maxit=2000, # delta loss abstol=1e-2, # learning rate lr = 1e-2, # regularization rate reg = 1e-3, # show results every 'display' step display = 100, random.seed = 1) { # to make the case reproducible. set.seed(random.seed) # total number of training set N <- nrow(traindata) # extract the data and label # don't need atribute X <- unname(data.matrix(traindata[,x])) Y <- traindata[,y] if(is.factor(Y)) { Y <- as.integer(Y) } # updated: 10.March.2016: create index for both row and col Y.len <- length(unique(Y)) Y.set <- sort(unique(Y)) Y.index <- cbind(1:N, match(Y, Y.set)) # number of input features D <- ncol(X) # number of categories for classification K <- length(unique(Y)) H <- hidden # create and init weights and bias W1 <- 0.01*matrix(rnorm(D*H), nrow=D, ncol=H) b1 <- matrix(0, nrow=1, ncol=H) W2 <- 0.01*matrix(rnorm(H*K), nrow=H, ncol=K) b2 <- matrix(0, nrow=1, ncol=K) # use all train data to update weights since it's a small dataset batchsize <- N # updated: March 17. 2016 # init loss to a very big value loss <- 100000 # Training the network i <- 0 while(i < maxit && loss > abstol ) { # iteration index i <- i +1 # forward .... # 1 indicate row, 2 indicate col hidden.layer <- sweep(X %*% W1 ,2, b1, '+') # neurons : ReLU hidden.layer <- pmax(hidden.layer, 0) score <- sweep(hidden.layer %*% W2, 2, b2, '+') # softmax score.exp <- exp(score) probs <-sweep(score.exp, 1, rowSums(score.exp), '/') # compute the loss corect.logprobs <- -log(probs[Y.index]) data.loss <- sum(corect.logprobs)/batchsize reg.loss <- 0.5*reg* (sum(W1*W1) + sum(W2*W2)) loss <- data.loss + reg.loss # display results and update model if( i %% display == 0) { if(!is.null(testdata)) { model <- list( D = D, H = H, K = K, # weights and bias W1 = W1, b1 = b1, W2 = W2, b2 = b2) labs <- predict.dnn(model, testdata[,-y]) # updated: 10.March.2016 accuracy <- mean(as.integer(testdata[,y]) == Y.set[labs]) cat(i, loss, accuracy, \"\\n\") } else { cat(i, loss, \"\\n\") } } # backward .... dscores <- probs dscores[Y.index] <- dscores[Y.index] -1 dscores <- dscores / batchsize dW2 <- t(hidden.layer) %*% dscores db2 <- colSums(dscores) dhidden <- dscores %*% t(W2) dhidden[hidden.layer <= 0] <- 0 dW1 <- t(X) %*% dhidden db1 <- colSums(dhidden) # update .... dW2 <- dW2 + reg*W2 dW1 <- dW1 + reg*W1 W1 <- W1 - lr * dW1 b1 <- b1 - lr * db1 W2 <- W2 - lr * dW2 b2 <- b2 - lr * db2 } # final results # creat list to store learned parameters # you can add more parameters for debug and visualization # such as residuals, fitted.values ... model <- list( D = D, H = H, K = K, # weights and bias W1= W1, b1= b1, W2= W2, b2= b2) return(model) }","title":"\ud559\uc2b5"},{"location":"posts/deep-learning/2017-02-21-Deep-Learning-from-Scratch-Part-01/#_8","text":"2\uac1c\uc758 \ub808\uc774\uc5b4\ub97c \uac16\ub294 \uac04\ub2e8\ud55c DNN \ubaa8\ub378\uc744 \uad6c\uc131\ud558\uc600\uc73c\ub2c8 \uc774\uc81c \uc6b0\ub9ac\uc758 \ubaa8\ub378\uc744 \ud14c\uc2a4\ud2b8\ud560 \uc218 \uc788\uac8c \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uba3c\uc800, \ub370\uc774\ud130\uc138\ud2b8\ub97c \ud559\uc2b5\uc6a9\uacfc \ud14c\uc2a4\ud2b8\uc6a9 \uadf8\ub8f9\uc73c\ub85c \ubd84\ub9ac\ud558\uace0 \ud559\uc2b5 \ub370\uc774\ud130\uc138\ud2b8\ub97c \uc774\uc6a9\ud558\uc5ec \ud559\uc2b5 \ubaa8\ub378\uc744 \uc138\uc6b0\ub294 \ud55c\ud3b8 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc138\ud2b8\ub97c \uc774\uc6a9\ud558\uc5ec \uc6b0\ub9ac\uc758 \ubaa8\ub378\uc758 \uc77c\ubc18\ud654 \uac00\ub2a5\uc131\uc744 \uce21\uc815\ud558\uace0\uc790 \ud569\ub2c8\ub2e4. ######################################################################## # testing ####################################################################### set.seed(1) # 0. EDA summary(iris) plot(iris) # 1. split data into test/train samp <- c(sample(1:50,25), sample(51:100,25), sample(101:150,25)) # 2. train model ir.model <- train.dnn(x=1:4, y=5, traindata=iris[samp,], testdata=iris[-samp,], hidden=6, maxit=2000, display=50) # 3. prediction labels.dnn <- predict.dnn(ir.model, iris[-samp, -5]) # 4. verify the results table(iris[-samp,5], labels.dnn) # labels.dnn # 1 2 3 #setosa 25 0 0 #versicolor 0 24 1 #virginica 0 0 25 #accuracy mean(as.integer(iris[-samp, 5]) == labels.dnn) # 0.98 \ud559\uc2b5 \ub370\uc774\ud130\uc138\ud2b8\uc758 \ub370\uc774\ud130 \uc190\uc2e4\uacfc \uc815\ud655\ub3c4\ub294 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4: \uc544\ub798\uc758 \ucf54\ub4dc\uc640 \uac19\uc774, \uc791\uc131\ud55c DNN \ubaa8\ub378\uacfc nnet \ud328\ud0a4\uc9c0\ub97c \ube44\uad50\ud558\uc600\uc2b5\ub2c8\ub2e4. library(nnet) ird <- data.frame(rbind(iris3[,,1], iris3[,,2], iris3[,,3]), species = factor(c(rep(\"s\",50), rep(\"c\", 50), rep(\"v\", 50)))) ir.nn2 <- nnet(species ~ ., data = ird, subset = samp, size = 6, rang = 0.1, decay = 1e-2, maxit = 2000) labels.nnet <- predict(ir.nn2, ird[-samp,], type=\"class\") table(ird$species[-samp], labels.nnet) # labels.nnet # c s v #c 22 0 3 #s 0 25 0 #v 3 0 22 # accuracy mean(ird$species[-samp] == labels.nnet) # 0.96","title":"\ud14c\uc2a4\ud2b8 \ubc0f \uc2dc\uac01\ud654"},{"location":"posts/deep-learning/2017-02-21-Deep-Learning-from-Scratch-Part-01/#2016428","text":"Google\uc758 TensorFlow\ub294 \uc2e0\uacbd\ub9dd\uc744 \uc2dc\uac01\ud654 \ud560 \uc218 \uc788\ub294 \ub9e4\uc6b0 \ud6cc\ub96d\ud55c \uc6f9\uc0ac\uc774\ud2b8\ub97c \uacf5\uac1c\ud588\uc2b5\ub2c8\ub2e4 ( \uc5ec\uae30 \ub97c \ucc38\uace0).","title":"\uc5c5\ub370\uc774\ud2b8: 2016/4/28"},{"location":"posts/deep-learning/2017-02-21-Deep-Learning-from-Scratch-Part-01/#_9","text":"\uc774 \uae00\uc5d0\uc11c, \ubc14\ub2e5\uc5d0\uc11c\ubd80\ud130 R\uc758 \uc2e0\uacbd\ub9dd\uc744 \uad6c\ud604\ud558\ub294 \ubc29\ubc95\uc5d0 \ub300\ud558\uc5ec \uc54c\uc544\ubcf4\uc558\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc608\uc81c \ucf54\ub4dc\ub294 \ub2e8\uc9c0 DNN\uc758 \ud575\uc2ec \uac1c\ub150\uc744 \uad6c\ud604\ud55c \uac83\uc774\uba70, \ub3c5\uc790\ub4e4\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \ubcf4\ub2e4 \uc2ec\ud654\ub41c \uc5f0\uc2b5\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \ub2e4\ub978 Classification \ubb38\uc81c\ub97c \ud574\uacb0\ud574 \ubcf8\ub2e4. \uac00\ub839 \uc5ec\uae30\uc758 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub97c \ud65c\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc740\ub2c9 \ub808\uc774\uc5b4 \uc0ac\uc774\uc988, \ud65c\uc131\ud568\uc218, \uc190\uc2e4\ud568\uc218\ub97c \ub2e4\uc591\ud558\uac8c \uc120\ud0dd\ud574 \ubd05\ub2c8\ub2e4. \ub2e8\uc77c \uc740\ub2c9 \ub808\uc774\uc5b4 \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \ub2e4\uc911 \uc740\ub2c9 \ub808\uc774\uc5b4\ub85c \ud655\uc7a5\ud574 \ubd05\ub2c8\ub2e4. \ud68c\uadc0 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\ub294 \ub124\ud2b8\uc6cc\ud06c\ub97c \uc124\uacc4\ud574 \ubd05\ub2c8\ub2e4. \ub124\ud2b8\uc6cc\ud06c \uc544\ud0a4\ud14d\uccd0, Weights, Bias\ub97c \uc2dc\uac01\ud654 \ud574\ubd05\ub2c8\ub2e4. \uc5ec\uae30\ub97c \ucc38\uace0\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4.","title":"\uc694\uc57d"},{"location":"posts/deep-learning/2017-02-21-Deep-Learning-from-Scratch-Part-01/#source-codes","text":"train.dnn.R # Train: build and train a 2-layers neural network train.dnn <- function(x, y, traindata=data, testdata=NULL, model = NULL, # set hidden layers and neurons # currently, only support 1 hidden layer hidden=c(6), # max iteration steps maxit=2000, # delta loss abstol=1e-2, # learning rate lr = 1e-2, # regularization rate reg = 1e-3, # show results every 'display' step display = 100, random.seed = 1) { # to make the case reproducible. set.seed(random.seed) # total number of training set N <- nrow(traindata) # extract the data and label # don't need atribute X <- unname(data.matrix(traindata[,x])) # correct categories represented by integer Y <- traindata[,y] if(is.factor(Y)) { Y <- as.integer(Y) } # create index for both row and col # create index for both row and col Y.len <- length(unique(Y)) Y.set <- sort(unique(Y)) Y.index <- cbind(1:N, match(Y, Y.set)) # create model or get model from parameter if(is.null(model)) { # number of input features D <- ncol(X) # number of categories for classification K <- length(unique(Y)) H <- hidden # create and init weights and bias W1 <- 0.01*matrix(rnorm(D*H), nrow=D, ncol=H) b1 <- matrix(0, nrow=1, ncol=H) W2 <- 0.01*matrix(rnorm(H*K), nrow=H, ncol=K) b2 <- matrix(0, nrow=1, ncol=K) } else { D <- model$D K <- model$K H <- model$H W1 <- model$W1 b1 <- model$b1 W2 <- model$W2 b2 <- model$b2 } # use all train data to update weights since it's a small dataset batchsize <- N # init loss to a very big value loss <- 100000 # Training the network i <- 0 while(i < maxit && loss > abstol ) { # iteration index i <- i +1 # forward .... # 1 indicate row, 2 indicate col hidden.layer <- sweep(X %*% W1 ,2, b1, '+') # neurons : ReLU hidden.layer <- pmax(hidden.layer, 0) score <- sweep(hidden.layer %*% W2, 2, b2, '+') # softmax score.exp <- exp(score) # debug probs <- score.exp/rowSums(score.exp) # compute the loss corect.logprobs <- -log(probs[Y.index]) data.loss <- sum(corect.logprobs)/batchsize reg.loss <- 0.5*reg* (sum(W1*W1) + sum(W2*W2)) loss <- data.loss + reg.loss # display results and update model #if( i %% display == 0) { if( 1 == 1 ) { if(!is.null(testdata)) { model <- list( D = D, H = H, K = K, # weights and bias W1 = W1, b1 = b1, W2 = W2, b2 = b2) labs <- predict.dnn(model, testdata[,-y]) accuracy <- mean(as.integer(testdata[,y]) == Y.set[labs]) cat(i, loss, accuracy, \"\\n\") } else { cat(i, loss, \"\\n\") } } # backward .... dscores <- probs dscores[Y.index] <- dscores[Y.index] - 1 dscores <- dscores / batchsize dW2 <- t(hidden.layer) %*% dscores db2 <- colSums(dscores) dhidden <- dscores %*% t(W2) dhidden[hidden.layer <= 0] <- 0 dW1 <- t(X) %*% dhidden db1 <- colSums(dhidden) # update .... dW2 <- dW2 + reg*W2 dW1 <- dW1 + reg*W1 W1 <- W1 - lr * dW1 b1 <- b1 - lr * db1 W2 <- W2 - lr * dW2 b2 <- b2 - lr * db2 } # final results # creat list to store learned parameters # you can add more parameters for debug and visualization # such as residuals, fitted.values ... model <- list( D = D, H = H, K = K, # weights and bias W1= W1, b1= b1, W2= W2, b2= b2) return(model) } predict.dnn.R # Prediction predict.dnn <- function(model, data = X.test) { # new data, transfer to matrix new.data <- data.matrix(data) # Feed Forwad hidden.layer <- sweep(new.data %*% model$W1 ,2, model$b1, '+') # neurons : Rectified Linear hidden.layer <- pmax(hidden.layer, 0) score <- sweep(hidden.layer %*% model$W2, 2, model$b2, '+') # Loss Function: softmax score.exp <- exp(score) probs <-sweep(score.exp, 1, rowSums(score.exp), '/') # select max possiblity labels.predicted <- max.col(probs) return(labels.predicted) } main.R # Copyright 2016: www.ParallelR.com # Parallel Blog : R For Deep Learning (I): Build Fully Connected Neural Network From Scratch # Classification by 2-layers DNN and tested by iris dataset # Author: Peng Zhao, patric.zhao@gmail.com base::rm(list = ls()) base::gc() source('./train.dnn.R', echo=FALSE) source('./predict.dnn.R', echo=FALSE) ######################################################################## # testing ####################################################################### set.seed(1) # 0. EDA summary(iris) names(iris) plot(iris) # 1. split data into test/train samp <- c(sample(1:50,25), sample(51:100,25), sample(101:150,25)) length(samp) # 2. train model ir.model <- train.dnn(x=1:4, y=5, traindata=iris[samp,], testdata=iris[-samp,], hidden=10, maxit=2000, display=50) # ir.model <- train.dnn(x=1:4, y=5, traindata=iris[samp,], hidden=6, maxit=2000, display=50) # 3. prediction # NOTE: if the predict is factor, we need to transfer the number into class manually. # To make the code clear, I don't write this change into predict.dnn function. labels.dnn <- predict.dnn(ir.model, iris[-samp, -5]) # 4. verify the results table(iris[-samp,5], labels.dnn) # labels.dnn # 1 2 3 #setosa 25 0 0 #versicolor 0 24 1 #virginica 0 0 25 #accuracy mean(as.integer(iris[-samp, 5]) == labels.dnn) # 0.98 # 5. compare with nnet library(nnet) ird <- data.frame(rbind(iris3[,,1], iris3[,,2], iris3[,,3]), species = factor(c(rep(\"s\",50), rep(\"c\", 50), rep(\"v\", 50)))) ir.nn2 <- nnet(species ~ ., data = ird, subset = samp, size = 6, rang = 0.1, decay = 1e-2, maxit = 2000) labels.nnet <- predict(ir.nn2, ird[-samp,], type=\"class\") table(ird$species[-samp], labels.nnet) # labels.nnet # c s v #c 22 0 3 #s 0 25 0 #v 3 0 22 # accuracy mean(ird$species[-samp] == labels.nnet) # 0.96 # Visualization # the output from screen, copy and paste here. data1 <- (\"i loss accuracy 50 1.098421 0.3333333 100 1.098021 0.3333333 150 1.096843 0.3333333 200 1.093393 0.3333333 250 1.084069 0.3333333 300 1.063278 0.3333333 350 1.027273 0.3333333 400 0.9707605 0.64 450 0.8996356 0.6666667 500 0.8335469 0.6666667 550 0.7662386 0.6666667 600 0.6914156 0.6666667 650 0.6195753 0.68 700 0.5620381 0.68 750 0.5184008 0.7333333 800 0.4844815 0.84 850 0.4568258 0.8933333 900 0.4331083 0.92 950 0.4118948 0.9333333 1000 0.392368 0.96 1050 0.3740457 0.96 1100 0.3566594 0.96 1150 0.3400993 0.9866667 1200 0.3243276 0.9866667 1250 0.3093422 0.9866667 1300 0.2951787 0.9866667 1350 0.2818472 0.9866667 1400 0.2693641 0.9866667 1450 0.2577245 0.9866667 1500 0.2469068 0.9866667 1550 0.2368819 0.9866667 1600 0.2276124 0.9866667 1650 0.2190535 0.9866667 1700 0.2111565 0.9866667 1750 0.2038719 0.9866667 1800 0.1971507 0.9866667 1850 0.1909452 0.9866667 1900 0.1852105 0.9866667 1950 0.1799045 0.9866667 2000 0.1749881 0.9866667 \") data.v <- read.table(text=data1, header=T) par(mar=c(5.1, 4.1, 4.1, 4.1)) plot(x=data.v$i, y=data.v$loss, type=\"o\", col=\"blue\", pch=16, main=\"IRIS loss and accuracy by 2-layers DNN\", ylim=c(0, 1.2), xlab=\"\", ylab=\"\", axe =F) lines(x=data.v$i, y=data.v$accuracy, type=\"o\", col=\"red\", pch=1) box() axis(1, at=seq(0,2000,by=200)) axis(4, at=seq(0,1.0,by=0.1)) axis(2, at=seq(0,1.2,by=0.1)) mtext(\"training step\", 1, line=3) mtext(\"loss of training set\", 2, line=2.5) mtext(\"accuracy of testing set\", 4, line=2) legend(\"bottomleft\", legend = c(\"loss\", \"accuracy\"), pch = c(16,1), col = c(\"blue\",\"red\"), lwd=c(1,1) )","title":"Source Codes"},{"location":"posts/deep-learning/2017-08-04-Deep-Learning-from-Scratch-Part-02/","text":"Written by Alex Choi, Aug. 04, 2017. \ubd80\uc81c\ubaa9: \uc778\uacf5\uc2e0\uacbd\ub9dd \ucc98\uc808\ud558\uac8c \uc81c\ub300\ub85c \uc774\ud574\ud558\uae30 \uc9c0\ub09c \ud3ec\uc2a4\ud305 \uc5d0\uc11c R\uc5d0\uc11c \ub525\ub7ec\ub2dd\uc744 \ubc14\ub2e5\ubd80\ud130(from scratch) \uad6c\ud604\ud558\ub294 \ubc29\ubc95\uc5d0 \ub300\ud574 \uac1c\uad04\uc801\uc73c\ub85c \uc0b4\ud3b4\ubcf8 \uc801\uc774 \uc788\ub294\ub370, \uc774\ubc88 \ud3ec\uc2a4\ud305\uc5d0\uc11c\ub294 \ucf54\ub4dc\ub97c \uc790\uc138\ud558\uac8c \ubd84\uc11d\ud558\uba74\uc11c \uc218\ud559\uc801\uc73c\ub85c \uacfc\uc815\uc744 \ud480\uc5b4\ubcf4\uace0\uc790 \ud569\ub2c8\ub2e4. 1. \ub370\uc774\ud130 \uc900\ube44 \ub525\ub7ec\ub2dd \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uae30 \uc704\ud574 \ud14c\uc2a4\ud2b8 \uc6a9\ub3c4\uc758 \ub370\uc774\ud130\ub85c iris \ub370\uc774\ud130\uc14b \uc744 \uc0ac\uc6a9\ud560 \uac83\uc785\ub2c8\ub2e4. iris\ub294 \uc77c\uc885\uc758 \uaf43\uc744 \uaf43\ubc1b\uce68 \ubc0f \uaf43\uc78e\uc758 \ud3ed\uacfc \uae38\uc774 \ub4f1\uc73c\ub85c \ubd84\ub958\ud55c \ub370\uc774\ud130\uc785\uc774\uba70, R\uc758 \uae30\ubcf8 \ud328\ud0a4\uc9c0\uc5d0 \ud3ec\ud568\uc774 \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \ub300\ub7b5\uc801\uc778 \ub370\uc774\ud130\uc758 \ud615\ud0dc\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: > head ( iris ) Sepal.Length Sepal.Width Petal.Length Petal.Width Species 1 5.1 3.5 1.4 0.2 setosa 2 4.9 3.0 1.4 0.2 setosa 3 4.7 3.2 1.3 0.2 setosa 4 4.6 3.1 1.5 0.2 setosa 5 5.0 3.6 1.4 0.2 setosa 6 5.4 3.9 1.7 0.4 setosa \ucd1d 4\uac1c\uc758 Features( Sepal.Length , Sepal.Width , Petal.Length , Petal.Width )\ub97c \uac00\uc9c0\uba70, Species\ub294 \uaf43\uc744 \ubd84\ub958\ud55c \ud074\ub798\uc2a4( setosa , versicolor , virginica \ub85c \ucd1d 3\uac1c\uc758 \ud074\ub798\uc2a4)\uc785\ub2c8\ub2e4. \ub370\uc774\ud130\uc758 \uac1c\uc218\ub294 \ucd1d 150\uac1c\uc785\ub2c8\ub2e4. \uc8fc\uc5b4\uc9c4 \ub370\uc774\ud130\ub97c \uc774\uc6a9\ud558\uc5ec \ud559\uc2b5 \ubc0f \ud14c\uc2a4\ud2b8\ub97c \uc704\ud574 test dataset \uacfc train dataset \uc73c\ub85c \ub098\ub215\ub2c8\ub2e4: # 1. split data into test/train samp <- base :: c ( base :: sample ( 1 : 50 , 25 ), base :: sample ( 51 : 100 , 25 ), base :: sample ( 101 : 150 , 25 )) samp \ub294 test dataset\uc73c\ub85c \ub370\uc774\ud130\uc758 \uc778\ub371\uc2a4\ub97c 1~50 \ubc94\uc704\uc5d0\uc11c 25\uac1c, 51~100 \ubc94\uc704\uc5d0\uc11c 25\uac1c, 101~150 \ubc94\uc704\uc5d0\uc11c 25\uac1c\uc529 \ucd1d 75\uac1c\ub97c \uac00\uae09\uc801 \uace0\ub974\uac8c \uc120\ud0dd\ud55c \uac83\uc785\ub2c8\ub2e4. \uc120\ud0dd\ub41c \uc778\ub371\uc2a4\uc5d0 \ud574\ub2f9\ud558\ub294 \ub370\uc774\ud130\uc14b(Dataset)\uc744 traindata\ub85c, \uc774\ub4e4\uc744 \uc81c\uc678\ud55c \ub098\uba38\uc9c0\ub97c test data\ub85c \uc9c0\uc815\ud569\ub2c8\ub2e4: traindata = iris[samp,] testdata = iris[-samp,] 2. Neural Network \uad6c\uc131 \uad6c\uc131\ud55c Neural Network\ub294 Multilayer Perceptron(MLP) \ud615\ud0dc\ub85c, 4\uac1c\uc758 Input Feature\ub97c \uac16\ub294 \uc785\ub825 \ub808\uc774\uc5b4(Layer)\uc640 6\uac1c\uc758 \ub178\ub4dc(Node)\ub97c \ud3ec\ud568\ud558\ub294 1\uac1c\uc758 Hidden Layer, 3\uac1c\uc758 \ucd9c\ub825 \ub178\ub4dc\ub97c \uac16\ub294 \ucd9c\ub825 \ub808\uc774\uc5b4\ub85c \uad6c\uc131\ud558\uc600\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \uc774\ubbf8\uc9c0\ub97c \ucc38\uace0\ud558\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4. D(=4) \ub294 Input Feature\uc758 \uac1c\uc218\ub97c, H(=6) \ub294 Hidden Layer \ub0b4 \ub178\ub4dc \uac1c\uc218\ub97c, K(=3) \ub294 \ud074\ub798\uc2a4 \uac1c\uc218\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc55e\uc73c\ub85c\uc758 \uc124\uba85\uc740 \uad6c\uccb4\uc801\uc778 \uc22b\uc790\ub97c \uc5b8\uae09\ud558\uae30 \ubcf4\ub2e4\ub294 \uac00\uae09\uc801 \uc77c\ubc18\ud654\ub97c \uc704\ud574 \uc774\ub4e4 \ubcc0\uc218 \uc774\ub984\uc744 \uc774\uc6a9\ud558\uc5ec \uc124\uba85\uc744 \uc0ac\uc6a9\ud560 \uac83\uc774\ub2c8 \uac01 \ubcc0\uc218\uc758 \uac12\uc744 \uae30\uc5b5\ud574 \ub450\uc2dc\uba74 \uc124\uba85\uc744 \uc880 \ub354 \uc774\ud574\ud558\ub294\ub370 \ub3c4\uc6c0\uc774 \ub420 \uac83\uc785\ub2c8\ub2e4. 3. Feed-forward Operations \uc804\uccb4\uc801\uc778 \ub124\ud2b8\uc6cc\ud06c \uad6c\uc131\uc740 \uc704\uc758 \uc774\ubbf8\uc9c0\uc640 \uac19\uc9c0\ub9cc, \uc0ac\uc2e4 \ud65c\uc131\ud654 \ud568\uc218(Activation Function), Softmax Classifier \ub4f1 \ub354 \ub9ce\uc740 \ubcf5\uc7a1\ud55c \uacc4\uc0b0\uc774 \ud3ec\ud568\ub429\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc880 \ub354 \uad6c\uccb4\uc801\uc73c\ub85c \ud45c\ud604\ud55c \uac83\uc774 \ub2e4\uc74c \uc774\ubbf8\uc9c0\uc785\ub2c8\ub2e4. \uc870\uae08 \ubcf5\uc7a1\ud574 \ubcf4\uc774\uc9c0\ub9cc \uc218\ud559\uc801 \uc124\uba85\uc744 \uacc1\ub4e4\uc5ec \ud558\ub098\uc529 \ud480\uc5b4 \ub098\uac00\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \\(\\mathbf{X}\\) \ub294 Input Feature \ubca1\ud130\uc785\ub2c8\ub2e4. 75\uac1c\uc758 \ub370\uc774\ud130\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc9c0\ub9cc \uc124\uba85\uc744 \uac04\ub2e8\ud558\uac8c \ud558\uae30 \uc704\ud574 1\uac1c\uc758 \ub370\uc774\ud130\ub97c \uac16\ub294\ub2e4\uace0 \uac00\uc815\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c, \\(\\mathbf{X}\\) \uc758 \ucc28\uc6d0\uc740 [75\u00d74] (\ub610\ub294 [N\u00d7D])\uac00 \uc544\ub2cc [1\u00d74] (\ub610\ub294 [1\u00d7D])\uc785\ub2c8\ub2e4. \uccab\ubc88\uc9f8 Weight \\(\\mathbf{W}^{(1)}\\) \ub294 \ucc28\uc6d0 [D\u00d7H]\ub97c \uac16\ub294 \ud589\ub82c\uc774\uba70, \uccab\ubc88\uc9f8 Bias \\(\\mathbf{b}^{(1)}\\) \ub294 \ucc28\uc6d0 [1\u00d7D]\ub97c \uac16\ub294 \ubca1\ud130\uc785\ub2c8\ub2e4(\uc0ac\uc2e4 1\ucc28\uc6d0 \ud589\ub82c\uc774\ub77c\uace0\ud574\ub3c4 \ubb34\ubc29\ud569\ub2c8\ub2e4). \\(\\mathbf{\\Sigma}^{(1)}\\) \uc740 \\(\\mathbf{W}^{(1)}\\) \uacfc \\(\\mathbf{X}\\) \ub97c \ud589\ub82c\uacf1\ud558\uace0 \\(\\mathbf{b}^{(1)}\\) \uc744 \ub354\ud55c \uac83\uc785\ub2c8\ub2e4. \uc774\ub97c \uc218\ud559\uc801\uc73c\ub85c \ud45c\ud604\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4(\ud3b8\uc758 \uc0c1 Tensor \ud615\uc2dd\uc73c\ub85c \uc218\uc2dd\uc744 \ud45c\ud604\ud558\uace0\uc790 \ud558\uba70 \uc911\ubcf5\ucca8\uc790\ub294 Summation\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4): Op.[1] : \\(\\displaystyle{ \\sigma_{i}^{(1)} = x_k w_{ki}^{(1)} + b_{i}^{(1)} }, i = 1, ..., H, k=1,...,D\\) \ud65c\uc131\ud654 \ud568\uc218\ub294 ReLU(Rectified Linear Unit)\uc744 \uc0ac\uc6a9\ud558\uc600\uc73c\uba70, \uc774\ub294 0\ubcf4\ub2e4 \uc791\uc740 \uacbd\uc6b0\uc5d0\ub294 0\uc744, 0\ubcf4\ub2e4 \ud070 \uacbd\uc6b0\uc5d0\ub294 \uc790\uae30 \uc790\uc2e0\uc744 \ucd9c\ub825\ud558\ub294 \ud568\uc218\uc785\ub2c8\ub2e4. \uc774\uc5d0 \ub300\ud55c \uc218\uc2dd\uc744 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: Op.[2] : \\(h_i = \\mathrm{max}(0, \\sigma_{i}^{(1)}), i = 1,...,H\\) Hidden Layer \\(\\mathbf{H}\\) \ub294 \ub450\ubc88\uc9f8 Weight \ud589\ub82c\uc778 \\(\\mathbf{W}^{(2)}\\) (\ucc28\uc6d0 [H\u00d7K])\uc640 \ud589\ub82c\uacf1\uc744 \ud55c \ud6c4 \ub450\ubc88\uc9f8 Bias \ubca1\ud130\uc778 \\(\\mathbf{b}^{(2)}\\) (\ucc28\uc6d0 [1\u00d7K])\uc640 \ub354\ud574\uc9d1\ub2c8\ub2e4: Op.[3] : \\(\\sigma_{i}^{(2)} = h_k w_{ki}^{(2)} + b_{i}^{(2)}, i = 1,...,K, k = 1,...,H\\) \ubc29\uae08 Op.[3]\uc744 \ud1b5\ud574 \uacc4\uc0b0\ub41c \\(\\mathbf{\\Sigma^{(2)}}\\) (\ud589\ub82c \ud615\ud0dc) \ub610\ub294 \\(\\sigma_{i}^{(2)}\\) (\ud589\ub82c\uc758 \uc5d8\ub9ac\uba3c\ud2b8 \ud615\ud0dc)\ub97c \ud2b9\ubcc4\ud788 score\ub77c\uace0 \uce6d\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4(\ub098\uc911\uc5d0 \ucf54\ub4dc\uc758 \ubcc0\uc218\uc640 \ub300\uc751\ud560 \uac83\uc785\ub2c8\ub2e4). Information Theory\uc5d0 \uadfc\uac70\ud558\uc5ec Data Loss\ub97c \uacc4\uc0b0\ud558\uae30 \uc704\ud574 \\(\\sigma_{i}^{(2)}\\) \uc5d0 Exponential \ud568\uc218\ub97c \uc801\uc6a9\ud569\ub2c8\ub2e4. Op.[4] : \\(e_i = \\mathrm{exp}(\\sigma_{i}^{(2)}), i=1,...,K\\) Op.[4]\uc5d0 \uc758\ud574 \uacc4\uc0b0\ub41c \uacb0\uacfc, \ud589\ub82c \\(\\mathbf{E}\\) \ub294 \ucc28\uc6d0 [1\u00d73]\uc758 \uacbd\uc6b0 \ub2e4\uc74c\uacfc \ud615\ud0dc\ub97c \uac16\uc2b5\ub2c8\ub2e4. \\( \\mathbf{E} = \\begin{bmatrix} \\mathrm{exp}(\\sigma_{1}^{(2)}) & \\mathrm{exp}(\\sigma_{2}^{(2)}) & \\mathrm{exp}(\\sigma_{3}^{(2)}) \\end{bmatrix} \\) \uc774\uc81c \ud589\ub82c \\(\\mathbf{E}\\) \uc758 \uac01 \uc5d8\ub9ac\uba3c\ud2b8\ub97c \uc5d8\ub9ac\uba3c\ud2b8\ub97c \ubaa8\ub450 \ub354\ud55c \uac12\uc73c\ub85c \ub098\ub215\ub2c8\ub2e4. Op.[5] : \\(\\displaystyle{ q_i = \\frac{e_i}{\\sum_{k=1}^{K}{e_k}} = \\frac{e_i}{S} } \\), \\(i = 1,...,K\\) \uc5ec\uae30\uc11c, \\(S = \\displaystyle{\\sum_{k=1}^{K}{e_k}} \\) \ud559\uc2b5\ud558\ub294 \uacfc\uc815\uc5d0\uc11c \uc2e4\uc81c \ub370\uc774\ud130 \ub77c\ubca8(\ub610\ub294 \ud074\ub798\uc2a4) - \uc774\ub97c Ground Truth Label\uc774\ub77c\uace0 \ud569\ub2c8\ub2e4 - \uacfc \uc608\uce21\ub41c \ub77c\ubca8\uc744 \ube44\uad50\ud558\uc5ec \ucc28\uc774\uac00 \ub098\ub294 \uacbd\uc6b0 Information Theory\uc5d0 \uc785\uac01\ud558\uc5ec \uc774\ub97c \ub370\uc774\ud130 \uc190\uc2e4(Data Loss)\ub77c\uace0 \ud558\uba70, True Distribution \\(p\\) \uc640 Estimated Distribution \\(q\\) \uc0ac\uc774\uc758 Cross-entropy \\(H(p,q)\\) \ub85c \ud45c\ud604\ud569\ub2c8\ub2e4: \\(H(p,q) = {p \\mathrm{log}\\begin{pmatrix}\\displaystyle{\\frac{1}{q}}\\end{pmatrix}} = -p \\mathrm{log}(q) \\) \\(K\\) \uac1c\uc758 Class\uc5d0 \ub300\ud558\uc5ec \ud45c\ud604\ud558\uba74, \\( H(p,q) = \\displaystyle{- \\sum_{k=1}^{K}{p_k \\mathrm{log}(q_k)}} \\) \uacfc \uac19\uc2b5\ub2c8\ub2e4. True Distribution \\(p\\) \ub294, \\( \\mathbf{p} = \\begin{bmatrix} p_1 & p_2 & ... & p_K \\end{bmatrix} \\) , \\( \\displaystyle{\\sum_{k=1}^{K}{p_K} = 1} \\) \uc778\ub370, Ground Truth Label\uc774 \\(y\\) \ubc88\uc9f8 Index, \uc989, \\(k=y\\) \uc774\uba74 \uacb0\uad6d, \\(p_{k=y} = 1\\) \uc774\uba70, \\(p_{k \\ne y} = 0\\) \uc73c\ub85c, \\(y\\) \ubc88\uc9f8 Index\ub9cc\uc774 1\uc774\uba70, \uadf8 \uc678\uc5d0\ub294 \ubaa8\ub450 0\uac00 \ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c, Kronecker Delta Property \ub97c \uc774\uc6a9\ud558\uc5ec \ub2e4\uc74c\uacfc \uac19\uc774 \uac04\ub2e8\ud558\uac8c \ud45c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \\( H(p,q) = -\\mathrm{log}(q_k) \\cdot \\delta_{ky}\\) , \\(k=1,...,K\\) , \\(y \\in [1,...K]\\) Cross-entropy\ub294 Data Loss\ub97c \uc758\ubbf8\ud558\ubbc0\ub85c, Ground Truth Label y\uc5d0 \ub300\ud55c Data Loss \\(L_D\\) \ub294, Op.[6] : \\(L_D = -\\mathrm{log}(q_k) \\cdot \\delta_{ky}, \\ k=1,...,K\\) \\(y \\in [1,...K] : \\mathrm{Ground \\ Truth \\ Label}\\) \uc704\uc758 \uc2dd\uc5d0\uc11c \ucca8\uc790(Subscript) \\(k\\) \uac00 \ub450 \ubc88 \uc911\ubcf5\ub418\uc5b4 \uc788\uc74c\uc744 \ubcfc \uc218 \uc788\ub294\ub370 Tensor \ud45c\ud604\uc5d0 \uc758\ud558\uba74 \uc77c\ubc18\uc801\uc73c\ub85c \uc911\ubcf5 \ucca8\uc790\ub294 \uc774 \ucca8\uc790\uc5d0 \ub300\ud558\uc5ec \ud569 \uc5f0\uc0b0(Summation)\uc744 \uc218\ud589\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c, \ub2e4\uc74c\uacfc \uac19\uc774 Data Loss \uc2dd\uc744 \ub354\uc6b1 \uac04\ub2e8\ud788 \ud45c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: Op.[7] : \\(L_D = -\\mathrm{log}(q_y)\\) Op.[7]\uc5d0 \uc758\ud574 \uacc4\uc0b0\ub41c \\(q\\) \ub97c correct.logprobs \ub77c \uce6d\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. 1\uac1c\uc758 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \uc608\ub97c \ub4e4\uc5b4 \uc124\uba85\ud558\uace0 \uc788\uc9c0\ub9cc, \ub9cc\uc57d \uc5ec\ub7ec \uac1c\uc758 \ub370\uc774\ud130\uc778 \uacbd\uc6b0, \uc774\ub4e4\uc744 \ud3c9\uade0\uc744 \uacc4\uc0b0\ud558\uc5ec Data Loss\ub85c \uacc4\uc0b0\ud569\ub2c8\ub2e4. \uac00\ub839, \\(N\\) \uac1c\uc758 \ub370\uc774\ud130\uc5d0 \ub300\ud558\uc5ec Data Loss\ub294, Op.[8] : \\(\\displaystyle{ L_D = - \\frac{1}{N}\\sum_{i=1}^{N}{\\mathrm{log}(q_i)} }\\) \ub85c \ud655\uc7a5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc11c, \\(L_D\\) \ub294 \uc804\uccb4 \ub370\uc774\ud130\uc14b\uc5d0 \ub300\ud55c \ud3c9\uade0 Data Loss\ub97c \uc758\ubbf8\ud558\uba70, \\(q_k\\) \ub294 k\ubc88\uc9f8 \ub370\uc774\ud130\uc758 Data Loss\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. Loss\ub294 \uc55e\uc11c \uc5b8\uae09\ud55c Data Loss \uc678\uc5d0 Regularization Loss\ub77c\ub294 \uac83\uc774 \uc788\uc2b5\ub2c8\ub2e4. Stanford CS231n \uac15\uc758 \uc0ac\uc774\ud2b8\uc5d0 \ub9e4\uc6b0 \uc798 \uc124\uba85\ub418\uc5b4 \uc788\ub294\ub370, \uac04\ub7b5\ud788 \uc694\uc57d\ud558\uc790\uba74, \ud2b9\uc815 \ub370\uc774\ud130\uc5d0 \ub300\ud558\uc5ec \uacfc\ub3c4\ud558\uac8c \uac00\uc911\uce58\uac00 \ubd80\uc5ec\ub418\ub294 \uacfc\ub3c4\uc801\ud569(Overfitting)\uc774\ub77c\uace0 \ud558\uba70 \uc774\ub97c \ubc29\uc9c0\ud558\uae30 \uc704\ud574 Regularization Loss(L-2 Regularization)\ub97c \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ud569\ub2c8\ub2e4: Op.[9] : \\(L_R = \\displaystyle{\\frac{1}{2}} \\lambda \\displaystyle{\\sum_{k}{\\sum_{l}{w_{kl}^2}}}\\) \uc5ec\uae30\uc11c, \\(\\lambda\\) \ub294 Hyperparameter\uc758 \uc77c\uc885\uc73c\ub85c Regularization Factor\ub77c\uace0 \ud558\uba70 1/2\uc744 \uacf1\ud55c \uc774\uc720\ub294 Weights\uc5d0 \ub300\ud55c L-2 Regularization(\ubaa8\ub4e0 Weights\ub97c \uc81c\uacf1\uc744 \ud558\uc5ec \ub354\ud55c \uac83)\uc5d0 \ub300\ud558\uc5ec \ubbf8\ubd84\uc744 \ud560 \uacbd\uc6b0 1/2\uc744 \uc81c\uac70\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4 (\uc0c1\uc218 \uacc4\uc218 \uc5b4\ub5a4 \uac12\uc774 \uacf1\ud574\uc9c0\ub354\ub77c\ub3c4 \ucd5c\uc801\ud654\uc758 \uacb0\uacfc\ub294 \ub3d9\uc77c\ud569\ub2c8\ub2e4). Data Loss \\(L_D\\) \uc640 Regularization Loss \\(L_R\\) \ub97c \ub354\ud55c \uc804\uccb4 Loss \\(L\\) \ub97c \ubcc0\uc218 \\(\\mathbf{W}\\) \uc640 \\(\\mathbf{b}\\) \uc5d0 \ub300\ud558\uc5ec \ucd5c\uc18c\ud654\ud569\ub2c8\ub2e4: Op.[10] : \\(\\displaystyle{ \\min_{\\mathbf{W, b}}{L = L_D + L_R} }\\) \uc9c0\uae08\uae4c\uc9c0\uc758 \uacfc\uc815\uc744 \uac04\ub2e8\ud558\uac8c \uc218\uc2dd\uc73c\ub85c \uc815\ub9ac\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4(\ucca8\uc790 \ud45c\ud604\uc740 \uc55e\uc758 \uacfc\uc815\uacfc \uc77c\uce58\ud558\uc9c0 \uc54a\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4): Op.[ForwardPass] : \\(N\\) \uac1c\uc758 Dataset, \\(D\\) \uac1c\uc758 Input Dimensionality, \\(H\\) \uac1c\uc758 \ub274\ub7f0\uc744 \uac16\ub294 1\uac1c\uc758 Hidden Layer, \\(K\\) \uac1c\uc758 Output Class\ub97c \uac16\ub294 Multi-layer Perceptron\uc5d0 \ub300\ud558\uc5ec, \\( \\sigma_{i,j}^{(1)} = x_{i,k} w_{kj}^{(1)} + b_{i,j}^{(1)} \\) , \\(i=1,...,N\\) , \\(j=1,...,H\\) , \\(k=1,...,D\\) \\( h_{i,j} = \\mathrm{max}(0, \\sigma_{i,j}^{(1)}) \\) , \\(i=1,...,N\\) , \\(j=1,...,H\\) \u25cf hidden.layer[N\u00d7H] = \\(h_{i,j}\\) \\( \\sigma_{i,j}^{(2)} = h_{i,k} w_{kj}^{(2)} + b_{i,j}^{(2)} \\) , \\(i=1,...,K\\) , \\(j=1,...,H\\) , \\(k=1,...,H\\) \u25cf score[N\u00d7K] = \\(\\sigma_{i,j}^{(2)}\\) \\( e_{i,j} = \\mathrm{exp}(\\sigma_{i,j}^{(2)}) \\) , \\(i=1,...,N\\) , \\(j=1,...,K\\) \u25cf score.exp[N\u00d7K] = \\(e_{i,j}\\) \\( \\displaystyle{ q_{i,j} = \\frac{e_{i,j}}{\\sum_{k=1}^{K}{e_{i,k}}}} \\) , \\(i=1,...,N\\) , \\(j=1,...,K\\) \u25cf probs[N\u00d7K] = \\(q_{i,j}\\) \\( L_{D_{i}} = - \\mathrm{log}(q_{y_{i}}) \\) \u25cf correct.logprobs[N\u00d71] = \\(L_{D_{i}}\\) \\( L_D = \\displaystyle{ L_D = \\frac{1}{N}\\sum_{i=1}^{N}{L_{D_{i}}} = - \\frac{1}{N} \\sum_{i=1}^{N}{q_{y_{i}}} } \\) \u25cf data.loss = \\(L_D\\) \\( \\displaystyle{ L_R = \\frac{1}{2} \\lambda \\begin{bmatrix} \\displaystyle{\\sum_{k=1}^{D}{\\sum_{l=1}^{H}{w_{kl}^{(1)}}}^2} + \\displaystyle{\\sum_{k=1}^{H}{\\sum_{l=1}^{K}{w_{kl}^{(2)}}}^2} \\end{bmatrix} } \\) \u25cf reg.loss = \\(L_R\\) \\( L = L_D + L_R \\) \u25cf loss = \\(L\\) 4. Backward Pass Backward Pass \ub610\ub294 Backpropagation \uc740 \ud559\uc2b5\uc744 \ud558\ub294 \uacfc\uc815 \ub3d9\uc548 \ucd5c\uc801\ud654 \ud30c\ub77c\ubbf8\ud130\ub4e4(Optimization Parameters)\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\uae30 \uc704\ud574 \uc774 \ud30c\ub77c\ubbf8\ud130\ub4e4\uc5d0 \ub300\ud55c \uc804\uccb4 Loss\uc758 \ubbfc\uac10\ub3c4(Sensitivity)\ub97c \uacc4\uc0b0\ud558\ub294 \uacfc\uc815\uc778\ub370, Loss\ub85c\ubd80\ud130 \ub124\ud2b8\uc6cc\ud06c\ub97c Feed-forward \ubc29\ud5a5\uc758 \uc5ed\uc73c\ub85c \uac70\uc2ac\ub7ec \uc62c\ub77c\uac00\uba74\uc11c \uacc4\uc0b0\ud558\uae30 \ub54c\ubb38\uc5d0 Backward Pass\ub77c\uace0 \ubd88\ub9ac\uc6cc\uc9d1\ub2c8\ub2e4. \ub2e4\uc2dc \ub370\uc774\ud130\uc14b\ud2b8\uc758 1\uac1c\uc758 \ub370\uc774\ud130\uc5d0 \ub300\ud558\uc5ec \uc124\uba85\uc744 \uc9c4\ud589\ud558\uaca0\uc73c\ub098, N\uac1c\uc758 \ub370\uc774\ud130\uc5d0\uc11c\ub3c4 \uc27d\uac8c \ud655\uc7a5\ud560 \uc218 \uc788\uc73c\ub2c8, 1\uac1c\uc758 \ub370\uc774\ud130\uc5d0 \ub300\ud574 \ud655\uc2e4\ud788 \uc774\ud574\ub97c \ud558\ub294 \uac83\uc774 \uc911\uc694\ud569\ub2c8\ub2e4. \uc880 \ub354 \uba85\ud655\ud55c \uc124\uba85\uc744 \uc704\ud574 Hidden Layer ~ Classification \ubd80\ubd84\uc744 \ub2e4\uc74c\uacfc \uac19\uc774 \ub530\ub85c \ub5bc\uc5b4 \ub193\uaca0\uc2b5\ub2c8\ub2e4. \uac04\ub2e8\ud558\uac8c \uadf8\ub9bc\uc744 \uc124\uba85 \ub4dc\ub9ac\uba74, \uc6b0\uc120 Hidden Layer \\(\\mathbf{h}\\) \ub85c\ubd80\ud130, \\( \\sigma_{i}^{(2)} = w_{ki}^{(2)}h_k + b_{i}^{(2)} \\) , \\(i=1,...,K\\) \\(k=1,...,H\\) \uc774\uba70, \\(K\\) \uc640 \\(H\\) \ub294 \uac01\uac01 Class\uc758 \uac1c\uc218\uc640 Hidden Layer \ub0b4 Neuron\uc758 \uac1c\uc218\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. \ubcc4\ub2e4\ub978 \uc124\uba85\uc774 \uc5c6\ub294 \ud55c, Tensor Notation\uc5d0 \uc758\ud574 \uc911\ubcf5\ucca8\uc790\uc5d0 \ub300\ud574\uc11c\ub294 \ud569 \uc5f0\uc0b0(Summation)\uc744 \ud558\ub294 \uac83\uc73c\ub85c \uac04\uc8fc\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0, \\(\\sigma_{i}^{(2)}\\) \uc5d0 Exponential \ud568\uc218\ub97c \ucde8\ud558\uc5ec, \\( e_{i} = \\mathrm{exp}(\\sigma_{i}^{(2)}) \\) , \\(i=1,...,K\\) \uc640 \uac19\uc774 \ud45c\ud604\ud558\uc600\uc2b5\ub2c8\ub2e4. \ub610\ud55c \uac01 Class\uc758 Score \ud655\ub960 \\(q_i\\) \ub294, \\( q_i = \\displaystyle{\\frac{e_i}{\\displaystyle{\\sum_{j=1}^{K}{e_j}}}} = \\displaystyle{\\frac{e_i}{S}} \\) \uc774\uba70, Ground Truth Label\uc758 Index \\(y\\) \uc5d0 \ub300\ud558\uc5ec Data Loss \\(L_D\\) \ub294, \\( L_D = - \\displaystyle{ \\sum_{i=1}^{N}{\\mathrm{log}(q_{y_i})} } \\) \uc785\ub2c8\ub2e4. \uc77c\ub2e8 1\ucc28 \ubaa9\ud45c\ub294, score\uc5d0 \ub300\ud55c Data Loss\uc758 \ubbfc\uac10\ub3c4 \uc2dd \\(\\displaystyle{ \\frac{\\partial L_D}{\\partial \\sigma_{i}^{(2)}} }\\) \ub97c \uad6c\ud558\ub294 \uac83\uc774 \ub418\uaca0\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc740 \ub2e4\uc74c\uacfc \uac19\uc740 Chain Rule\uc5d0 \uc758\ud574 \uc2dd\uc744 \uc720\ub3c4\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \\( \\displaystyle{ \\frac{\\partial L_D}{\\partial \\sigma_{i}^{(2)}} = \\frac{\\partial L_D}{\\partial q_y} \\frac{\\partial q_y}{\\partial e_k} \\frac{\\partial e_k}{\\partial \\sigma_{i}^{(2)}}} \\) \uc774\uc5d0 \ub300\ud55c \uccab\ubc88\uc9f8 \ub2e8\uacc4\ub294 correct.logprobs \uc5d0 \ub300\ud55c Data Loss\uc758 \ubbfc\uac10\ub3c4 \uc2dd, \uc989, \ud3b8\ubbf8\ubd84(Partial Derivatives) \uc2dd\uc744 \uad6c\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \\(N = 1\\) \uc774\ubbc0\ub85c \\(q_{y_i} \\rightarrow q_y\\) \ub85c \uac04\ub2e8\ud788 \ud45c\ud604\ud558\uc5ec, Op.[11] : \\(\\displaystyle{ \\frac{\\partial L_D}{\\partial q_y} } = \\displaystyle{ \\frac{\\partial}{\\partial q_y} \\begin{pmatrix} -\\mathrm{log}(q_y) \\end{pmatrix} } = \\displaystyle{-\\frac{1}{q_y}}\\) \uc640 \uac19\uc774 \uc2dd\uc744 \uc5bb\uc2b5\ub2c8\ub2e4. \uadf8 \ub2e4\uc74c, \\(q_y\\) \uc5d0 \ub300\ud55c \\(e_k\\) \uc758 \ud3b8\ubbf8\ubd84 \uc2dd\uc744 \uad6c\ud569\ub2c8\ub2e4. Op.[12] : \\(\\displaystyle{ \\frac{\\partial q_y}{\\partial e_k} = \\displaystyle{ \\frac{\\partial}{\\partial e_k} \\begin{pmatrix} \\displaystyle{\\frac{e_y}{S}} \\end{pmatrix} } } = \\displaystyle{ \\frac{\\delta_{ky} - e_y}{S^2} }\\) \uc774\ub7f0 \uc2dd\uc73c\ub85c Forward Pass\ub97c \ucc28\ub840\ucc28\ub840\ub85c \uc5ed\uc73c\ub85c \ud3b8\ubbf8\ubd84 \uc2dd\uc744 \uc720\ub3c4\ud558\uba74 \ub429\ub2c8\ub2e4. \ub2e4\uc74c\uc740 \\(\\sigma_{i}^{(2)}\\) \uc5d0 \ub300\ud55c \\(e_k\\) \uc758 \ud3b8\ubbf8\ubd84\uc744 \uad6c\ud558\ub294 \uc2dd\uc785\ub2c8\ub2e4: Op.[13] : \\(\\displaystyle{ \\frac{\\partial e_k}{\\partial \\sigma_{i}^{(2)}} } = \\displaystyle{ \\frac{\\partial}{\\partial \\sigma_{i}^{(2)}}[\\mathrm{exp}(\\sigma_{k}^{(2)})] } = \\mathrm{exp}(\\sigma_{k}^{(2)}) = e_k \\delta_{ik} \\), no sum on \\(k\\) Op.[13]\uc758 \uacbd\uc6b0, \\(k\\) \uac00 \uc911\ubcf5\ucca8\uc790\uc774\uc9c0\ub9cc \ud569 \uc5f0\uc0b0\uc744 \ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774\uc81c Op.[11]~[13]\uc758 Chain Rule\uc744 \uc774\uc6a9\ud558\uc5ec \\(\\sigma_{i}^{(2)}\\) \uc5d0 \ub300\ud55c Data Loss\uc758 \ud3b8\ubbf8\ubd84 \uac12\uc744 \uad6c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: Op.[14] : \\( \\displaystyle{\\frac{\\partial L_D}{\\partial \\sigma_{i}^{(2)}}} = \\displaystyle{ \\frac{\\partial L_D}{\\partial q_y} \\frac{\\partial q_y}{\\partial e_k} \\frac{\\partial e_k}{\\partial \\sigma_{i}^{(2)}} } = \\displaystyle{ -\\frac{S}{e_y} \\frac{\\delta_{ky}S - e_y}{S^2} e_k \\delta_{ik} = \\frac{e_y e_k \\delta_{ik}}{e_y S} - \\frac{\\delta_{ky} S e_k \\delta_{ik}}{e_y S} = \\frac{e_i}{S} - \\frac{\\delta_{ky} e_k \\delta_{ik}}{e_y} } \\) = \\(q_i - \\delta_{ky} \\delta_{ky} \\delta_{ik} = q_i - \\delta_{iy}\\) \uc9c0\uae08\uae4c\uc9c0 \ubcf5\uc7a1\ud55c \uc218\uc2dd\uc744 \uc798 \ub530\ub77c\uc624\uc168\uc2b5\ub2c8\ub2e4. 1\ucc28 \ubaa9\ud45c\ub294 \\(\\mathbf{W}^{(2)}\\) \uc640 \\(\\mathbf{b}^{(2)}\\) \uc758 Data Loss \\(L_D\\) \uc5d0 \ub300\ud55c \ud3b8\ubbf8\ubd84\uc744 \uac01\uac01 \uad6c\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uc774 \ud3b8\ubbf8\ubd84\uc740 \\(\\mathbf{W}^{(2)}\\) \uc640 \\(\\mathbf{b}^{(2)}\\) \uc758 \ubcc0\ud654\uac00 Data Loss\uc5d0 \ub300\ud55c \ubcc0\ud654\uc758 \uc601\ud5a5\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc5ed\uc2dc \ub9c8\ucc2c\uac00\uc9c0\ub85c Chain Rule\uc5d0 \uc758\ud574 \ub2e4\uc74c \uc2dd\uc744 \uc5bb\uc744 \uc218 \uc788\uc73c\uba70: Op.[15] : \\( \\displaystyle{ \\frac{\\partial L_D}{\\partial b_{j}^{(2)}} = \\frac{\\partial L_D}{\\partial q_y} \\frac{\\partial q_y}{\\partial e_k} \\frac{\\partial e_k}{\\partial \\sigma_{i}^{(2)}} \\frac{\\partial \\sigma_{i}^{(2)}}{\\partial b_{j}^{(2)}} } \\) \ub2e4\uc74c \uc2dd\uc774 \uc131\ub9bd\ud558\ubbc0\ub85c, Op.[16] : \\( \\displaystyle{ \\frac{\\partial \\sigma_{i}^{(2)}}{\\partial b_{j}^{(2)}} = \\frac{\\partial}{\\partial b_{j}^{(2)}} \\begin{bmatrix} \\displaystyle{ h_m w_{mj}^{(2)} + b_{i}^{(2)} } \\end{bmatrix} = \\delta_{ij} } \\) , \\(i=1,...,K\\) , \\(j=1,...,K\\) \uc744 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ucc38\uace0\ub85c, \uc704\uc758 \uc2dd\uc5d0\uc11c Index \\(m\\) \uc740 Dummy Variable\uc785\ub2c8\ub2e4. Op.[14]~[16]\uc744 \ud1b5\ud574 \ub2e4\uc74c \uc2dd\uc744 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4: Op.[17] : \\( \\displaystyle{ \\frac{\\partial L_D}{\\partial b_{j}^{(2)}} = (q_i - \\delta_{yi}) \\delta_{ij} = q_j - \\delta_{ij} } \\) \uc774\uc640 \uc720\uc0ac\ud558\uac8c, Op.[18] : \\( \\displaystyle{ \\frac{\\partial \\sigma_{i}^{(2)}}{\\partial w_{jl}^{(2)}} = \\frac{\\partial}{\\partial w_{jl}^{(2)}} \\begin{bmatrix} h_m w_{mi}^{(2)} + b_{i}^{(2)} \\end{bmatrix} = h_m \\frac{\\partial w_{mi}^{(2)}}{\\partial w_{jl}^{(2)}} = h_m \\delta_{mj} \\delta_{il} = h_j \\delta_{il} } \\) , \\(m=1,...,H\\) , \\(i=1,...,K\\) , \\(j=1,...,H\\) , \\(k=1,...,K\\) \ub97c \uc5bb\uc744 \uc218 \uc788\uc73c\ubbc0\ub85c, Op.[19] : \\( \\displaystyle{ \\frac{\\partial L_D}{\\partial w_{jl}^{(2)}} = \\frac{\\partial L_D}{\\partial q_y} \\frac{\\partial q_y}{\\partial e_k} \\frac{\\partial e_k}{\\partial \\sigma_{i}^{(2)}} \\frac{\\partial \\sigma_{i}^{(2)}}{\\partial w_{jl}^{(2)}} = h_j (q_l - \\delta_{yl}) } \\) \uc640 \uac19\uc774 \\(\\mathbf{W}^{(2)}\\) \uc5d0 \ub300\ud55c Data Loss \\(L_D\\) \uc758 \ud3b8\ubbf8\ubd84 \uac12\uc744 \uad6c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc9c0\uae08\uae4c\uc9c0 \uc21c\uc218\ud558\uac8c Tensor Notation\uc744 \uc774\uc6a9\ud558\uc5ec \uc218\uc2dd\uc744 \uc720\ub3c4\ud558\uc600\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098, \ubb54\uac00 \uc640\ub2ff\uc9c0 \uc54a\uace0 \uba38\ub9ac\ub9cc \ubcf5\uc7a1\ud574\uc9c0\uace0 \uc788\ub294 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c 1\uac1c\uc758 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \uc608\ub97c \ub4e4\uc5b4 \ud589\ub82c \ud615\ud0dc\ub85c \uc27d\uac8c \uc124\uba85\ud558\uace0\uc790 \ud569\ub2c8\ub2e4. Hidden Layer\uc758 Neuron \uac1c\uc218\ub97c 4\uac1c, \uc989 \\(D=4\\) \uc774\uace0, Class\uc758 \uac1c\uc218\ub97c 3\uac1c, \uc989 \\(K=3\\) \uc73c\ub85c \uac00\uc815\ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc55e\uc11c \uadf8\ub9bc\uc5d0\uc11c \ud45c\ud604\ud588\ub4ef \\(\\mathbf{\\sigma}^{(2)}\\) \uc640 \\(\\mathbf{h}\\) \ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uad00\uacc4\uac00 \uc131\ub9bd\ub429\ub2c8\ub2e4: Op.[20] : \\( \\mathbf{\\sigma}^{(2)} = \\mathbf{W}^{(2)T} \\mathbf{h} + \\mathbf{b}^{(2)} \\) \uc5ec\uae30\uc11c, \uac00\uc911\uce58 \ud589\ub82c \\(\\mathbf{W}^{(2)}\\) \ub294 \ub2e4\uc74c\uacfc \uac19\uc73c\uba70: \\( \\mathbf{W}^{(2)} = \\begin{bmatrix} w_{11} & w_{12} & w_{13} \\\\ w_{21} & w_{22} & w_{23} \\\\ w_{31} & w_{32} & w_{33} \\\\ w_{41} & w_{42} & w_{43} \\\\ w_{51} & w_{52} & w_{53} \\\\ w_{61} & w_{62} & w_{63} \\end{bmatrix} \\) \\(\\mathbf{\\sigma}^{(2)}\\) , \\(\\mathbf{h}\\) , \\(\\mathbf{b}^{(2)}\\) \ub294 \uac01\uac01, \\(\\mathbf{\\sigma}^{(2)} = \\begin{bmatrix} \\sigma_{1}^{(2)} \\\\ \\sigma_{2}^{(2)} \\\\ \\sigma_{3}^{(2)} \\end{bmatrix}\\) \\( \\mathbf{h} = \\begin{bmatrix} h_1 \\\\ h_2 \\\\ h_3 \\\\ h_4 \\\\ h_5 \\\\ h_6 \\end{bmatrix} \\) \\( \\mathbf{b}^{(2)} = \\begin{bmatrix} b_{1}^{(2)} \\\\ b_{2}^{(2)} \\\\ b_{3}^{(2)} \\end{bmatrix} \\) \uc785\ub2c8\ub2e4. \uc704\uc758 \uc2dd\uc744 \uc774\uc6a9\ud558\uc5ec Op.[20]\uc744 \ud480\uc5b4\uc4f0\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: Op.[21] : \\( \\sigma_{1}^{(2)} = w_{11}^{(1)} h_1 + w_{21}^{(1)} h_2 + w_{31}^{(1)} h_3 + w_{41}^{(1)} h_4 + w_{51}^{(1)} h_5 + w_{61}^{(1)} h_6 + b_{1}^{(2)} \\) \\( \\sigma_{2}^{(2)} = w_{12}^{(1)} h_1 + w_{22}^{(1)} h_2 + w_{32}^{(1)} h_3 + w_{42}^{(1)} h_4 + w_{52}^{(1)} h_5 + w_{62}^{(1)} h_6 + b_{2}^{(2)} \\) \\( \\sigma_{3}^{(2)} = w_{13}^{(1)} h_1 + w_{23}^{(1)} h_2 + w_{33}^{(1)} h_3 + w_{43}^{(1)} h_4 + w_{53}^{(1)} h_5 + w_{63}^{(1)} h_6 + b_{3}^{(2)}\\) \ud45c\ud604\uc744 \uac04\ub2e8\ud788 \ud558\uae30\uc704\ud574 \\(\\displaystyle{ \\frac{\\partial L_D}{\\partial \\sigma_{i}^{(2)}} } = \\Delta_i\\) \ub85c \ud558\uba74, \\( \\displaystyle{ \\frac{\\partial L_D}{\\partial w_{11}^{(2)}} = \\frac{\\partial L_D}{\\partial \\sigma_{i}^{(2)}} \\frac{\\partial \\sigma_{i}^{(2)}}{\\partial w_{11}^{(2)}} } = \\frac{\\partial L_D}{\\partial \\sigma_{1}^{(2)}} \\frac{\\partial \\sigma_{1}^{(2)}}{\\partial w_{11}^{(2)}} + \\frac{\\partial L_D}{\\partial \\sigma_{2}^{(2)}} \\frac{\\partial \\sigma_{2}^{(2)}}{\\partial w_{11}^{(2)}} + \\frac{\\partial L_D}{\\partial \\sigma_{3}^{(2)}} \\frac{\\partial \\sigma_{3}^{(2)}}{\\partial w_{11}^{(2)}} = \\Delta_1 h_2 \\) \uacfc \uac19\uc774 \ud45c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7f0 \uc2dd\uc73c\ub85c, \\( \\displaystyle{ \\frac{\\partial L_D}{\\partial w_{21}^{(2)}} = \\Delta_1 h_2 } \\) \u00b7 \u00b7 \u00b7 \\( \\displaystyle{ \\frac{\\partial L_D}{\\partial w_{61}^{(2)}} = \\Delta_1 h_6 } \\) \uc774\uba70, \uc77c\ubc18\uc801\uc73c\ub85c\ub294, Op.[22] \\( \\displaystyle{ \\frac{\\partial L_D}{\\partial w_{jl}^{(2)}} } = \\Delta_l h_j \\) \uc640 \uac19\uc774 \ud45c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c, Op.[23] \\( \\mathbf{dW}^{(2)} = \\displaystyle{ \\frac{\\partial L_D}{\\partial \\mathbf{W}^{(2)}} } = \\displaystyle{\\begin{bmatrix} \\frac{\\partial L_D}{\\partial w_{11}^{(2)}} & \\frac{\\partial L_D}{\\partial w_{12}^{(2)}} & \\frac{\\partial L_D}{\\partial w_{13}^{(2)}} \\\\ \\frac{\\partial L_D}{\\partial w_{21}^{(2)}} & \\frac{\\partial L_D}{\\partial w_{22}^{(2)}} & \\frac{\\partial L_D}{\\partial w_{23}^{(2)}} \\\\ \\vdots \\\\ \\frac{\\partial L_D}{\\partial w_{61}^{(2)}} & \\frac{\\partial L_D}{\\partial w_{62}^{(2)}} & \\frac{\\partial L_D}{\\partial w_{63}^{(2)}} \\end{bmatrix} = \\begin{bmatrix} \\Delta_1 h_1 & \\Delta_2 h_1 & \\Delta_3 h_1 \\\\ \\Delta_1 h_2 & \\Delta_2 h_2 & \\Delta_3 h_2 \\\\ \\vdots \\\\ \\Delta_1 h_6 & \\Delta_2 h_6 & \\Delta_3 h_6 \\end{bmatrix} = \\begin{bmatrix} h_1 \\\\ h_2 \\\\ \\vdots \\\\ h_6 \\end{bmatrix} \\begin{bmatrix} \\Delta_1 & \\Delta_2 & \\Delta_3 \\end{bmatrix} } \\) \uc73c\ub85c \ud45c\ud604\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4. \uc704\uc758 \ud589\ub82c \uc911, \\( \\displaystyle{ \\begin{bmatrix} \\Delta_1 & \\Delta_2 & \\Delta_3 \\end{bmatrix} } = \\) dscores \\( \\displaystyle{ \\begin{bmatrix} h_1 & h_2 & h_3 & h_4 & h_5 & h_6 \\end{bmatrix} } = \\) hidden.layer \ub77c\uace0 \uc9c0\uce6d\ud558\uaca0\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c, Op.[22]\ub294, hidden.layer \\(^{T}\\) dscores \uc758 \ud589\ub82c \uacf1\uc73c\ub85c \ud45c\ud604\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4. \ud55c\ud3b8, \\(\\displaystyle{ \\frac{d L_D}{d \\mathbf{b}^{(2)}} }\\) \uc5ed\uc2dc \ub2e4\uc74c\uacfc \uac19\uc774 \ud45c\ud604\ub429\ub2c8\ub2e4: \\( \\displaystyle{ \\frac{d L_D}{d b_{1}^{(2)}} = \\frac{\\partial L_D}{\\partial \\sigma_{1}^{(2)}} \\frac{\\partial \\sigma_{1}^{(2)}}{\\partial b_{1}^{(2)}} + \\frac{\\partial L_D}{\\partial \\sigma_{2}^{(2)}} \\frac{\\partial \\sigma_{2}^{(2)}}{\\partial b_{1}^{(2)}} + \\frac{\\partial L_D}{\\partial \\sigma_{3}^{(2)}} \\frac{\\partial \\sigma_{3}^{(2)}}{\\partial b_{1}^{(2)}} = \\Delta_1 } \\) \\( \\displaystyle{ \\frac{d L_D}{d b_{2}^{(2)}} = \\frac{\\partial L_D}{\\partial \\sigma_{1}^{(2)}} \\frac{\\partial \\sigma_{1}^{(2)}}{\\partial b_{2}^{(2)}} + \\frac{\\partial L_D}{\\partial \\sigma_{2}^{(2)}} \\frac{\\partial \\sigma_{2}^{(2)}}{\\partial b_{2}^{(2)}} + \\frac{\\partial L_D}{\\partial \\sigma_{3}^{(2)}} \\frac{\\partial \\sigma_{3}^{(2)}}{\\partial b_{2}^{(2)}} = \\Delta_2 } \\) \\( \\displaystyle{ \\frac{d L_D}{d b_{3}^{(2)}} = \\frac{\\partial L_D}{\\partial \\sigma_{1}^{(2)}} \\frac{\\partial \\sigma_{1}^{(2)}}{\\partial b_{3}^{(2)}} + \\frac{\\partial L_D}{\\partial \\sigma_{2}^{(2)}} \\frac{\\partial \\sigma_{2}^{(2)}}{\\partial b_{3}^{(2)}} + \\frac{\\partial L_D}{\\partial \\sigma_{3}^{(2)}} \\frac{\\partial \\sigma_{3}^{(2)}}{\\partial b_{3}^{(2)}} = \\Delta_3 } \\) \uc774 \uc5ed\uc2dc \uac04\ub2e8\ud558\uac8c \ud45c\ud604\ud558\uba74, \\( \\displaystyle{ \\frac{\\partial L_D}{\\partial b_{j}^{(2)}} = \\Delta_j } \\) \uc785\ub2c8\ub2e4. \uc774\uc81c \uc880 \ub354 \uc77c\ubc18\uc801\uc778 \uc2dd\uc73c\ub85c \uc774\ud574\ud558\uae30 \uc704\ud574 2\uac1c\uc758 \ub370\uc774\ud130\uac00 \uc785\ub825\uc73c\ub85c \uacf5\uae09\ub418\ub294 \uacbd\uc6b0, \uc989, \\(N = 2\\) \uc778 \uacbd\uc6b0\ub97c \uac00\uc815\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc6b0\uc120, Notation\uc744 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub418\uba70, Op.[24] : \\( \\sigma_{i,j}^{(2)} \\) , for \\(i\\) -th Input and \\(j\\) -th Class, \\(i=1,2\\) & \\(j=1,2,3\\) Weights \\(\\mathbf{W}^{(2)}\\) \uc640 Biases \\(\\mathbf{b}^{(2)}\\) \ub294 \ub450 \ub370\uc774\ud130\uc5d0 \ub300\ud558\uc5ec \ub3d9\uc77c\ud569\ub2c8\ub2e4. 1\ubc88\uc9f8 \uc785\ub825 \ub370\uc774\ud130\uc5d0 \ub300\ud558\uc5ec: Op.[25] : \\( \\sigma_{1,1}^{(2)} = w_{11}^{(2)} h_{1,1} + w_{21}^{(2)} h_{1,2} + w_{31}^{(2)} h_{1,3} + \\cdots + w_{61}^{(2)} h_{1,6} + b_{1}^{(2)} \\) \\( \\sigma_{1,2}^{(2)} = w_{12}^{(2)} h_{1,1} + w_{22}^{(2)} h_{1,2} + w_{32}^{(2)} h_{1,3} + \\cdots + w_{62}^{(2)} h_{1,6} + b_{2}^{(2)} \\) \\( \\sigma_{1,3}^{(2)} = w_{13}^{(2)} h_{1,1} + w_{23}^{(2)} h_{1,2} + w_{33}^{(2)} h_{1,3} + \\cdots + w_{63}^{(2)} h_{1,6} + b_{3}^{(2)} \\) 2\ubc88\uc9f8 \uc785\ub825 \ub370\uc774\ud130\uc5d0 \ub300\ud558\uc5ec: Op.[26] : \\( \\sigma_{2,1}^{(2)} = w_{11}^{(2)} h_{2,1} + w_{21}^{(2)} h_{2,2} + w_{31}^{(2)} h_{2,3} + \\cdots + w_{61}^{(2)} h_{2,6} + b_{1}^{(2)} \\) \\( \\sigma_{2,2}^{(2)} = w_{12}^{(2)} h_{2,1} + w_{22}^{(2)} h_{2,2} + w_{32}^{(2)} h_{2,3} + \\cdots + w_{62}^{(2)} h_{2,6} + b_{2}^{(2)} \\) \\( \\sigma_{2,3}^{(2)} = w_{13}^{(2)} h_{2,1} + w_{23}^{(2)} h_{2,2} + w_{33}^{(2)} h_{2,3} + \\cdots + w_{63}^{(2)} h_{2,6} + b_{3}^{(2)} \\) \ub610\ub294 \uac04\ub2e8\ud55c \ud589\ub82c\uc2dd\uc73c\ub85c, \\( \\mathbf{\\sigma}^{(2)} = \\mathbf{h}^{T} \\mathbf{W}^{(2)} + \\mathbf{b}^{(2)} \\) \uacfc \uac19\uc774 \ud45c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc11c, \\( \\mathbf{h} = \\displaystyle{ \\begin{bmatrix} h_{1,1} & h_{2,1} \\\\ h_{1,2} & h_{2,2} \\\\ h_{1,3} & h_{2,3} \\\\ h_{1,4} & h_{2,4} \\\\ h_{1,5} & h_{2,5} \\\\ h_{1,6} & h_{2,6} \\end{bmatrix} } \\) \\( \\mathbf{W}^{(2)} = \\displaystyle{ \\begin{bmatrix} w_{11}^{(2)} & w_{12}^{(2)} && w_{13}^{(2)} \\\\ w_{21}^{(2)} & w_{22}^{(2)} && w_{23}^{(2)} \\\\ w_{31}^{(2)} & w_{32}^{(2)} && w_{33}^{(2)} \\\\ w_{41}^{(2)} & w_{42}^{(2)} && w_{43}^{(2)} \\\\ w_{51}^{(2)} & w_{52}^{(2)} && w_{53}^{(2)} \\\\ w_{61}^{(2)} & w_{62}^{(2)} && w_{63}^{(2)} \\end{bmatrix} } \\) \\( \\mathbf{\\sigma}^{(2)} = \\displaystyle{ \\begin{bmatrix} \\sigma_{11}^{(2)} & \\sigma_{12}^{(2)} & \\sigma_{13}^{(2)} \\\\ \\sigma_{21}^{(2)} & \\sigma_{22}^{(2)} & \\sigma_{23}^{(2)} \\end{bmatrix} } \\) \uc785\ub2c8\ub2e4. \uc704\uc758 \uc2dd\uc744 \uc774\uc6a9\ud558\uc5ec 2\uac1c\uc758 \uc785\ub825 \ub370\uc774\ud130\uac00 \uc788\ub294 \uacbd\uc6b0, Op.[23]\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \ud45c\ud604\ub429\ub2c8\ub2e4: dW \\(^{(2)}\\) = hidden.layer \\(^{T}\\) \\(\\cdot\\) dscores \uc5ec\uae30\uc11c, hidden.layer = \\( \\displaystyle{ \\begin{bmatrix} h_{11} & h_{12} & h_{13} & h_{14} & h_{15} & h_{16} \\\\ h_{21} & h_{22} & h_{23} & h_{24} & h_{25} & h_{26} \\end{bmatrix} } \\) dscores = \\( \\displaystyle{ \\begin{bmatrix} \\Delta_{1,1} & \\Delta_{1,2} & \\Delta_{1,3} \\\\ \\Delta_{2,1} & \\Delta_{2,2} & \\Delta_{2,3} \\end{bmatrix} } \\) \uc785\ub2c8\ub2e4. \ud604\ud3b8, Op.[25], [26]\uc73c\ub85c\ubd80\ud130, \\( \\displaystyle{ \\frac{d L_D}{d b_{1}^{(2)}} = \\frac{\\partial L_D}{\\partial \\sigma_{1,1}^{(2)}} \\frac{\\partial \\sigma_{1,1}^{(2)}}{\\partial b_{1}^{(2)}} + \\frac{\\partial L_D}{\\partial \\sigma_{1,2}^{(2)}} \\frac{\\partial \\sigma_{1,2}^{(2)}}{\\partial b_{1}^{(2)}} + \\frac{\\partial L_D}{\\partial \\sigma_{1,3}^{(2)}} \\frac{\\partial \\sigma_{1,3}^{(2)}}{\\partial b_{1}^{(2)}} + \\frac{\\partial L_D}{\\partial \\sigma_{2,1}^{(2)}} \\frac{\\partial \\sigma_{2,1}^{(2)}}{\\partial b_{1}^{(2)}} + \\frac{\\partial L_D}{\\partial \\sigma_{2,2}^{(2)}} \\frac{\\partial \\sigma_{2,2}^{(2)}}{\\partial b_{1}^{(2)}} + \\frac{\\partial L_D}{\\partial \\sigma_{2,3}^{(2)}} \\frac{\\partial \\sigma_{21,3}^{(2)}}{\\partial b_{1}^{(2)}} } \\) \\( \\displaystyle{ = \\frac{\\partial L_D}{\\partial \\sigma_{1,1}^{(2)}} (1) + \\frac{\\partial L_D}{\\partial \\sigma_{1,2}^{(2)}} (0) + \\frac{\\partial L_D}{\\partial \\sigma_{1,3}^{(2)}} (0) + \\frac{\\partial L_D}{\\partial \\sigma_{2,1}^{(2)}} (1) + \\frac{\\partial L_D}{\\partial \\sigma_{2,2}^{(2)}} (0) + \\frac{\\partial L_D}{\\partial \\sigma_{2,3}^{(2)}} (0) } \\) \\( \\displaystyle{ = \\frac{\\partial L_D}{\\partial \\sigma_{1,1}^{(2)}} + \\frac{\\partial L_D}{\\partial \\sigma_{2,1}^{(2)}} } \\) \\( = \\Delta_{1,1} + \\Delta_{2,1} \\) \ub97c \uad6c\ud560 \uc218 \uc788\uc73c\uba70, \ub3d9\uc77c\ud55c \ubc29\uc2dd\uc73c\ub85c, \\( \\displaystyle{ \\frac{d L_D}{d b_{2}^{(2)}} = \\Delta_{1,2} + \\Delta_{2,2}} \\) \ubc0f \\( \\displaystyle{ \\frac{d L_D}{d b_{3}^{(2)}} = \\Delta_{1,3} + \\Delta_{2,3}} \\) \ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc989, Data Loss \\(L_D\\) \uc758 \\(\\mathbf{b}^{(2)}\\) \uc5d0 \ub300\ud55c \ubbf8\ubd84\uc740 \ud589\ub82c dscores\uc758 \uc5f4(Column)\uc744 \uac01\uac01 \ub354\ud55c \uac83\uc784\uc744 \uc54c \uc218 \uc788\uc73c\uba70, Op.[27] : \\( \\displaystyle{ \\frac{d L_D}{d b_{i}^{(2)}} } = \\sum_{j=1}^{N}{\\Delta_{j,i}} \\) \uacfc \uac19\uc774 \uc77c\ubc18\uc801\uc778 \uc2dd\uc73c\ub85c \ud45c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubb3c\ub860 \\(N\\) \uc740 \uc785\ub825 \ub370\uc774\ud130\uc758 \uac1c\uc218\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc774\uc81c \uc77c\ubc18\uc801\uc778 \uc2dd\uc744 \uc5bb\uae30 \uc704\ud574 \uc785\ub825 \ub370\uc774\ud130\uc758 \uac1c\uc218\uac00 \\(N\\) \uac1c\ub85c \ud655\uc7a5\ud558\uba74, Op.[28] : dW \\(^{(2)}\\) = hidden.layer \\(^{T}\\) \\(\\cdot\\) dscores db \\(^{(2)}\\) = ColumnSums(dscores) where hidden.layer = \\(h_{i,k}\\) , \\(i=1,...,N\\) , \\(k=1,...,H\\) dscores = \\(\\Delta_{k,j}\\) , \\(k=1,...,N\\) , \\(j=1,...,K\\) \\( \\Delta_{k,j} = \\displaystyle{ \\frac{d L_D}{d \\sigma_{k,j}^{(2)}} } \\) \ub85c \uc815\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uc73c\ub85c \uad6c\ud560 \uc2dd\uc740 Hidden Layer \\(\\mathbf{h}\\) \uc5d0 \ub300\ud55c Data Loss \\(L_D\\) \uc758 \ubbf8\ubd84\uc2dd, \uc989, \uc774\uba70, \uc774 \uc2dd \uc5ed\uc2dc Chain Rule\uc5d0 \uc758\ud574, \\( \\displaystyle{ \\frac{\\partial L_D}{\\partial q_y} \\frac{\\partial q_y}{\\partial e_k} \\frac{\\partial e_k}{\\partial \\sigma_{i}^{(2)}} \\frac{\\partial \\sigma_{i}^{(2)}}{\\partial h_j} } \\) \uc778\ub370, \\( \\displaystyle{ \\frac{\\partial L_D}{\\partial q_y} \\frac{\\partial q_y}{\\partial e_k} \\frac{\\partial e_k}{\\partial \\sigma_{i}^{(2)}} } \\) = dscores \uc774\uba70, Op.[21]\uc758 \uc2dd\uc744 \ucc38\uace0\ud558\uc5ec \uc720\ub3c4\ud574 \ubcf4\uba74, \\( \\displaystyle{ \\frac{\\partial \\sigma_{i}^{(2)}}{\\partial h_j} = w_{ji}^{(2)} = \\mathbf{W}^{(2)T} } \\) \uc784\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc989, \\(N\\) \uac1c\uc758 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \uc77c\ubc18\uc801\uc778 \uc2dd\uc73c\ub85c \ud45c\ud604\ud558\uba74, Op.[29] : dhidden = dscores \\(\\cdot\\) \\(\\mathbf{W}^{(2)T}\\) = \\( \\displaystyle{ \\begin{bmatrix} d_{1,1} & d_{1,2} & \\cdots & d_{1,K} \\\\ d_{2,1} & d_{2,2} & \\cdots & d_{2,K} \\\\ \\vdots & \\vdots & \\vdots & \\vdots \\\\ d_{N,1} & d_{N,2} & \\cdots & d_{N,K} \\end{bmatrix} \\begin{bmatrix} w_{1,1}^{(2)} & w_{2,1}^{(2)} & \\cdots & w_{K,1}^{(2)} \\\\ w_{1,2}^{(2)} & w_{2,2}^{(2)} & \\cdots & w_{K,2}^{(2)} \\\\ \\vdots & \\vdots & \\vdots & \\vdots \\\\ w_{1,H}^{(2)} & w_{2,H}^{(2)} & \\cdots & w_{K,H}^{(2)} \\end{bmatrix} } \\) \uacfc \uac19\uc2b5\ub2c8\ub2e4. \uc774\uc81c Input\uc5d0\uc11c Hidden Layer\uae4c\uc9c0 \uc774\ub974\ub294 \uc804\ubc18\ubd80\ub97c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc544\uc2dc\ub294 \ubc14\uc640 \uac19\uc774, \\(\\mathrm{ReLU}(x) = \\mathrm{max}(0,x)\\) \ub294 \\(x \\le 0\\) \uc5d0 \ub300\ud574\uc11c\ub294 0\uc744, \\(x > 0\\) \uc5d0 \ub300\ud574\uc11c\ub294 \uc785\ub825\uac12\uc744 \uadf8\ub300\ub85c \ucd9c\ub825\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c, ReLU\uc758 \ubbf8\ubd84\uac12\uc740, \\( \\displaystyle{ \\frac{d ReLU(x)}{dx} = \\begin{cases} 1, & x > 0 \\\\ 0, & x \\le 0 \\end{cases} } \\) \uacfc \uac19\uc2b5\ub2c8\ub2e4. \\( h_i = \\mathrm{ReLU}(\\sigma_{i}^{(1)}) \\) \uc774\ubbc0\ub85c, \uc774\ub97c \\(\\sigma_{i}^{(1)}\\) \uc5d0 \ub300\ud558\uc5ec \ud3b8\ubbf8\ubd84\ud558\uba74, Op.[30] : \\( \\displaystyle{\\frac{\\partial h_i}{\\partial \\sigma_{l}^{(1)}}} = \\begin{cases} 1, & h_i > 0 \\\\ 0, & h_i \\le 0 \\end{cases} \\) \uacfc \uac19\uc2b5\ub2c8\ub2e4. Op.[29]\uacfc [30]\uc73c\ub85c\ubd80\ud130 Chain Rule\uc744 \uc801\uc6a9\ud558\uc5ec, Op.[31] : \\( \\displaystyle{ \\frac{dL_D}{d \\sigma_{l}^{(1)}} = \\underbrace{ \\frac{\\partial L_D}{\\partial q_y} \\frac{\\partial q_y}{\\partial e_k} \\frac{\\partial e_k}{\\partial \\sigma_{i}^{(2)}} \\frac{\\partial \\sigma_{i}^{(2)}}{\\partial h_j} }_{\\mathrm{= dhidden}} \\underbrace{ \\frac{\\partial h_j}{\\partial \\sigma_{l}^{(1)}} }_{ = \\begin{cases} 1 & \\mathrm{if} \\; h_j > 0 \\\\ 0 & \\mathrm{otherwise} \\end{cases} } } = \\begin{cases} \\mathrm{dhidden} & \\mathrm{if} \\; h_j > 0 \\\\ 0 & \\mathrm{if} \\; h_j \\le 0 \\end{cases} \\) \ub97c \uc5bb\uc744 \uc218 \uc788\ub294\ub370, 5. Implementation \uc5d0\uc11c \ub2e4\uc2dc \uc124\uba85\ub4dc\ub9ac\uaca0\uc9c0\ub9cc Op.[29]~[31]\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uac04\ub7b5\ud558\uac8c \ucf54\ub4dc\ub85c \ud45c\ud604\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4: dhidden <- dscores %*% base :: t ( W2 ) dhidden [ hidden.layer <= 0 ] <- 0 \uc704\uc758 \ucf54\ub4dc\uc758 Line 2\ub294 hidden.layer \uc758 Element\uac00 0\uacfc \uac19\uac70\ub098 0 \ubcf4\ub2e4 \uc791\uc744 \ub54c \ub3d9\uc77c\ud55c \ud589\uacfc \uc5f4\uc5d0 \ud574\ub2f9\ud558\ub294 dhidden \uc758 Element\ub97c 0\uc73c\ub85c \ubcc0\uacbd\ud55c\ub2e4\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4. Op.[28]\uc744 \uc5bb\ub294 \ubc29\uc2dd\uacfc \ub3d9\uc77c\ud55c \ubc29\uc2dd\uc73c\ub85c, Op.[32] : dW \\(^{(1)}\\) = X \\(^{T}\\) \\(\\cdot\\) dhidden , db \\(^{(1)}\\) = ColumnSums(dhidden) \uc744 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uc81c \\(\\mathbf{W}^{(1)}\\) , \\(\\mathbf{b}^{(1)}\\) , \\(\\mathbf{W}^{(2)}\\) , \\(\\mathbf{b}^{(2)}\\) \uc5d0 \ub300\ud55c \\(L_D\\) \uc758 \ubbf8\ubd84\uc2dd\uc744 \ubaa8\ub450 \uc5bb\uc5c8\uc73c\ub2c8, \uc774\ub4e4\uc5d0 \ub300\ud55c \uc5c5\ub370\uc774\ud2b8 \uc2dd \\(\\theta \\leftarrow \\theta - \\alpha \\nabla_{\\theta}{L}\\) (\uc5ec\uae30\uc11c, \\(\\theta\\) \ub294 \ubaa8\ub378 \ud30c\ub77c\ubbf8\ud130\uc774\uba70 \\(\\alpha\\) \ub294 \ud559\uc2b5\ub960(Learning Rate)\ub97c \uc758\ubbf8\ud568)\uc744 \uc774\uc6a9\ud558\uc5ec \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7f0\ub370, \ud55c \uac00\uc9c0\ub97c \ube60\ub728\ub838\uc2b5\ub2c8\ub2e4. \uadf8\uac83\uc740 Op.[9]\uc5d0\uc11c \uc5b8\uae09\ud558\uc600\ub358 Regularization Loss( \\(L_R\\) )\uc5d0 \ub300\ud55c \uac01 \ubaa8\ub378 \ud30c\ub77c\ubbf8\ud130\uc758 \ubbf8\ubd84\uac12\ub4e4\uc785\ub2c8\ub2e4. \\(L_D\\) \uc740 Weights \uac12\ub4e4\uc758 \uc81c\uacf1\uc758 \ud569\uc73c\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc73c\ubbc0\ub85c \ub450\ub9d0\ud560 \uac83\ub3c4 \uc5c6\uc774 Bias\uc5d0 \ub300\ud55c \ubbf8\ubd84\uac12\uc740 \ubaa8\ub450 0\uc77c \uac83\uc785\ub2c8\ub2e4. \uac00\ub839, \\(\\displaystyle{ \\frac{\\partial L_R}{\\partial w_{i,j}} }\\) \uc744 \uad6c\ud55c\ub2e4\uace0 \ud558\uba74, \\(L_R\\) \uc740 \uac01 Weight\uc758 \uc81c\uacf1\uc744 \ud569\ud55c \uac83\uc774\ubbc0\ub85c(\ubb3c\ub860 \\(\\frac{1}{2}\\lambda\\) \uac00 \uacf1\ud574\uc84c\uc2b5\ub2c8\ub2e4) \ubbf8\ubd84\ud558\uace0\uc790 \ud558\ub294 \ub300\uc0c1 \uc678\uc5d0\ub294 \ubaa8\ub450 0\uc774 \ub420 \uac83\uc785\ub2c8\ub2e4. \uc989, \\(\\displaystyle{ \\frac{\\partial L_R}{\\partial w_{i,j}} } = w_{i,j}\\) \uc785\ub2c8\ub2e4. \ub530\ub77c\uc11c, \uc55e\uc11c \uad6c\ud588\ub358 \\(\\mathbf{dW}^{(1)}\\) \uacfc \\(\\mathbf{dW}^{(2)}\\) \uc5d0 Regularization Loss\uc758 \ubbf8\ubd84\uac12\uc744 \ubc18\uc601\ud558\uba74, Op.[33] : dW \\(^{(1)}\\) \\(\\leftarrow\\) dW \\(^{(1)}\\) + \\(\\lambda\\) * W \\(^{(1)}\\) dW \\(^{(2)}\\) \\(\\leftarrow\\) dW \\(^{(2)}\\) + \\(\\lambda\\) * W \\(^{(2)}\\) \uc640 \uac19\uc774 \uc5bb\uc744 \uc218 \uc788\uc73c\uba70, \ucd5c\uc885\uc801\uc73c\ub85c \ubaa8\ub378 \ud30c\ub77c\ubbf8\ud130\ub4e4\uc758 \uc5c5\ub370\uc774\ud2b8 \uc2dd\uc740, Op.[34] W \\(^{(1)}\\) \\(\\leftarrow\\) W \\(^{(1)}\\) - \\(\\alpha\\) * dW \\(^{(1)}\\) , b \\(^{(1)}\\) \\(\\leftarrow\\) b \\(^{(1)}\\) - \\(\\alpha\\) * db \\(^{(1)}\\) W \\(^{(2)}\\) \\(\\leftarrow\\) W \\(^{(2)}\\) - \\(\\alpha\\) * dW \\(^{(2)}\\) , b \\(^{(2)}\\) \\(\\leftarrow\\) b \\(^{(2)}\\) - \\(\\alpha\\) * db \\(^{(2)}\\) \uacfc \uac19\uc2b5\ub2c8\ub2e4. \uc774\ub85c\uc368 Backprogation\uc5d0 \ub300\ud55c \uc2dd\uc744 \ubaa8\ub450 \uad6c\ud558\uc600\uace0, \uc774\ub4e4\uc744 \uc774\uc6a9\ud558\uc5ec \uc77c\uc815 \uc870\uac74\uc774 \ub9cc\uc871\ub420 \ub54c\uae4c\uc9c0 \ubc18\ubcf5\ud558\uc5ec \ubaa8\ub378 \ud30c\ub77c\ubbf8\ud130\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud569\ub2c8\ub2e4. \uc9c0\uae08\uae4c\uc9c0\uc758 \uacfc\uc815\uc744 \uac04\ub2e8\ud558\uac8c \uc218\uc2dd\uc73c\ub85c \uc815\ub9ac\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4(\ucca8\uc790 \ud45c\ud604\uc740 \uc55e\uc758 \uacfc\uc815\uacfc \uc77c\uce58\ud558\uc9c0 \uc54a\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4): Op.[BackwardPass] : \\(N\\) \uac1c\uc758 Dataset, \\(D\\) \uac1c\uc758 Input Dimensionality, \\(H\\) \uac1c\uc758 \ub274\ub7f0\uc744 \uac16\ub294 1\uac1c\uc758 Hidden Layer, \\(K\\) \uac1c\uc758 Output Class\ub97c \uac16\ub294 Multi-layer Perceptron\uc5d0 \ub300\ud558\uc5ec, \\( \\displaystyle{ \\frac{\\partial L_D}{\\partial w_{kj}^{(i)}} = w_{kj}^{(i)} } \\) , \\( i \\in \\begin{Bmatrix} 1,2 \\end{Bmatrix} \\) , \\( \\begin{cases} \\mathrm{for} \\; i=1, \\; k=1,...,D, \\; j=1,...,H \\\\ \\mathrm{for} \\; i=2, \\; k=1,...,H, \\; j=1,...,K \\end{cases} \\) \\( \\displaystyle{ \\frac{\\partial L_R}{\\partial w_{kj}^{(i)}} = w_{kj}^{(i)} } \\) , \\( \\begin{cases} \\mathrm{for} \\; i=1, \\; k=1,...,D, \\; j=1,...,H \\\\ \\mathrm{for} \\; i=2, \\; k=1,...,H, \\; j=1,...,K \\end{cases} \\) dscores[N\u00d7K] = \\( q_{i,j} - \\delta_{jy_{i}} \\) , \\( i=1,...,N, \\; j=1,...,K \\) hidden.layer[N\u00d7H] = \\(h_{i,j}\\) , \\(i=1,...,N, \\; j=1,...,H\\) dW \\(^{(2)}\\) = \\( \\displaystyle{ h_{j,i} \\frac{\\partial L_D}{\\partial \\sigma_{i,k}^{(2)}} } \\) + \\(\\lambda\\) \\(w_{jk}^{(2)}\\) = hidden.layer \\(^{T}\\) \\(\\cdot\\) dscores + \\(\\lambda\\) \\(\\cdot\\) W \\(^{(2)}\\) , ( \\( i=1,...,N, \\; j=1,...,H, \\; k=1,...,K \\) ) db \\(^{(2)}\\) = \\( \\displaystyle{ \\sum_{i=1}^{N}{(q_{i,j} - \\delta_{jy_{i}} )} } \\) = ColumnSums(dscores) dhidden[N\u00d7H] = \\( \\displaystyle{ \\frac{\\partial L_D}{\\partial \\sigma_{i,j}^{(2)} } \\frac{\\partial \\sigma_{i,j}^{(2)} }{\\partial h_{i,k} } \\frac{\\partial h_{i,k} }{\\partial \\sigma_{i,l}^{(1)} } } \\) = \\( \\displaystyle{ \\begin{cases} \\frac{\\partial L_D}{\\partial \\sigma_{i,j}^{(2)} } \\frac{\\partial \\sigma_{i,j}^{(2)} }{\\partial h_{i,k} } & \\mathrm{if} \\; h_{i,k} > 0 \\\\ 0 & \\mathrm{if} \\; h_{i,k} \\le 0 \\end{cases} } \\) dW \\(^{(1)}\\) = X \\(^{T}\\) \\(\\cdot\\) dhidden + \\(\\lambda\\) \\(\\cdot\\) W \\(^{(1)}\\) db \\(^{(1)}\\) = ColumnSums(dhidden) [UPDATE of MODEL PARAMETERS] W \\(^{(2)}\\) \\(\\leftarrow\\) W \\(^{(2)}\\) - \\(\\alpha\\) \\(\\cdot\\) dW \\(^{(2)}\\) b \\(^{(2)}\\) \\(\\leftarrow\\) b \\(^{(2)}\\) - \\(\\alpha\\) \\(\\cdot\\) db \\(^{(2)}\\) W \\(^{(1)}\\) \\(\\leftarrow\\) W \\(^{(1)}\\) - \\(\\alpha\\) \\(\\cdot\\) dW \\(^{(1)}\\) b \\(^{(1)}\\) \\(\\leftarrow\\) b \\(^{(1)}\\) - \\(\\alpha\\) \\(\\cdot\\) db \\(^{(1)}\\) 5. Implementation \uc774\uc81c \uad6c\ud604\ub41c \ucf54\ub4dc\ub97c \ubd84\uc11d\ud558\uba74\uc154 \uc55e\uc11c \uc720\ub3c4\ud55c \uc2dd\uc774 \ucf54\ub4dc \uc0c1\uc5d0\uc11c \uc5b4\ub5bb\uac8c \uad6c\ud604\ub418\uc5b4 \uc788\ub294\uc9c0 \uc0b4\ud3b4\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc6b0\uc120, \uc804\uccb4 \ucf54\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 3\uac1c\uc758 \uc18c\uc2a4\ud30c\uc77c\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4 (\uc18c\uc2a4\ud30c\uc77c\uc758 Author\ub294 Peng Zhao( patric.zhao@gmail.com )\uc774\uba70, \uc6d0\ub798 1\uac1c\uc758 \uc18c\uc2a4\uc600\uc73c\ub098, \uae30\ub2a5\uc744 \ubd84\ub9ac\ud558\uc5ec \uc81c\uac00 3\uac1c\ub85c \ub098\ub208 \uac83\uc785\ub2c8\ub2e4): main.R train.dnn.R predict.dnn.R 5.1. train.dnn() \ud504\ub85c\ud1a0\ud0c0\uc785 \uc18c\uc2a4 \ud30c\uc77c\ub4e4 \uc911 \uac00\uc7a5 \ud575\uc2ec\uc774 \ub418\ub294 train.dnn.R \uc744 \uc0b4\ud3b4\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. train.dnn.R \uc740 \ub2e8 \ud558\ub098\uc758 \ud568\uc218 train.dnn() \uc744 \uac16\ub294 \uc18c\uc2a4\ud30c\uc77c\uc785\ub2c8\ub2e4. \ud30c\uc77c\uc758 \ud504\ub85c\ud1a0\ud0c0\uc785\uc744 \ubcf4\uba74, train.dnn <- function ( x , y , traindata = data , testdata = NULL , model = NULL , # set hidden layers and neurons # currently, only support 1 hidden layer hidden = base :: c ( 6 ), # max iteration steps maxit = 2000 , # delta loss abstol = 1e-2 , # learning rate lr = 1e-2 , # regularization rate reg = 1e-3 , # show results every 'display' step display = 100 , random.seed = 1 ) \uc778\ub370, \uac01\uac01\uc758 \ud30c\ub77c\ubbf8\ud130\uc5d0 \ub300\ud55c \uc124\uba85\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: x : \uc785\ub825 \ub370\uc774\ud130(Input Features)\uc758 Column Index\uc785\ub2c8\ub2e4. main.R \uc744 \ubcf4\uba74 x = 1:4 \ub97c \ud30c\ub77c\ubbf8\ud130\ub85c \uc804\ub2ec\ud558\ub294\ub370, \uc774\ub294 \uccab\ubc88\uc9f8\ubd80\ud130 \ub124\ubc88\uc9f8\uae4c\uc9c0\uc758 Column(Sepal.Length ~ Petal.Width)\uc744 Input Features\ub85c \uc815\ud55c\ub2e4\ub294 \ub73b\uc785\ub2c8\ub2e4. y : \ucd9c\ub825 \ub370\uc774\ud130(Output Classes)\uc758 Column Index\uc785\ub2c8\ub2e4. main.R \uc744 \ubcf4\uba74 y = 5 \ub97c \ud30c\ub77c\ubbf8\ud130\ub85c \uc804\ub2ec\ud558\ub294\ub370, \uc774\ub294 \ub2e4\uc12f\ubc88\uc9f8 Column(Species)\uc744 Output Class\ub85c \uc815\ud55c\ub2e4\ub294 \ub73b\uc785\ub2c8\ub2e4. traindata : \ud559\uc2b5\uc744 \uc2dc\ud0ac \ub370\uc774\ud130\uc14b\uc785\ub2c8\ub2e4. testdata : \ud559\uc2b5\uc744 \ud1b5\ud574 \uc0dd\uc131\ud55c \uc608\uce21 \ubaa8\ub378\uc744 \ud14c\uc2a4\ud2b8\ud558\uae30 \uc704\ud55c \ub370\uc774\ud130\uc14b\uc785\ub2c8\ub2e4. model : \ud559\uc2b5\uc744 \ud1b5\ud574 \uc0dd\uc131\ud55c \uc608\uce21 \ubaa8\ub378\uc774\uba70, \ud559\uc2b5 \uc2dc\uc5d0\ub294 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc73c\uba70, \uc608\uce21 \uc2dc\uc5d0 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uc989, predict.dnn() \ud568\uc218\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \ud30c\ub77c\ubbf8\ud130\uc785\ub2c8\ub2e4. hidden : Hidden Layer \ub0b4 \ub178\ub4dc\uc758 \uac1c\uc218\uc774\uba70, 6\uac1c\ub85c \uc124\uc815\ud558\uc600\uc2b5\ub2c8\ub2e4. maxit : \ud559\uc2b5\uc744 \uc2dc\ud0a4\ub294 \ucd5c\ub300 \ubc18\ubcf5 \uacc4\uc0b0 \ud69f\uc218\uc774\uba70, \uae30\ubcf8\uac12\uc740 2000\uc73c\ub85c, main.R \uc5d0\uc11c \uc804\ub2ec\ud558\ub294 \uac12\uc740 3000\uc785\ub2c8\ub2e4. abstol : maxit \uc678\uc5d0 \ud559\uc2b5\uc744 \uc885\ub8cc\uc2dc\ud0a4\ub294 \uc870\uac74\uc73c\ub85c, \uacc4\uc0b0\ub41c Loss\uac00 \uc774 \uac12\ubcf4\ub2e4 \uac19\uac70\ub098 \uc791\uc73c\uba74 \ud559\uc2b5\uc744 \uc885\ub8cc\uc2dc\ud0b5\ub2c8\ub2e4. \uae30\ubcf8\uac12\uc740 \\(10^{-2}\\) \uc785\ub2c8\ub2e4. lr : \ud559\uc2b5\ub960(Learning Rate)\uc785\ub2c8\ub2e4. \uae30\ubcf8\uac12\uc740 \\(10^{-2}\\) \uc785\ub2c8\ub2e4. reg : Regularization\uc758 Hyperparameter( \\(\\lambda\\) )\uc774\uba70, \uae30\ubcf8\uac12\uc740 \\(10^{-3}\\) \uc785\ub2c8\ub2e4. display : \ud559\uc2b5\ud558\ub294 \uacfc\uc815 \uc911 \uc911\uac04 \uacb0\uacfc\ub97c \ucd9c\ub825\ud558\ub294 Step\uc785\ub2c8\ub2e4. random.seed : Weights\uc640 Biases \ucd08\uae30\ud654 \uc2dc \ub09c\uc218\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c Random Seed\uc785\ub2c8\ub2e4. 5.2. \ubd80\uac00 \ubcc0\uc218 \uc124\uc815 \ub09c\uc218\ub97c \uc774\uc6a9\ud55c Weights \ubc0f Biases \ucd08\uae30\ud654\ub97c \uc704\ud574 \ud30c\ub77c\ubbf8\ud130\ub85c \uc804\ub2ec\ubc1b\uc740 random.seed \ub85c Random Seed\ub97c \uc124\uc815\ud569\ub2c8\ub2e4. # to make the case reproducible. base :: set.seed ( random.seed ) \ud559\uc2b5\uc2dc\ud0ac \ub370\uc774\ud130(traindata)\uc758 \uc804\uccb4 \uac1c\uc218\ub97c \ubcc0\uc218 N \uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4(\ub370\uc774\ud130 \uac1c\uc218\ub294 75\uac1c\uc785\ub2c8\ub2e4). # total number of training set N <- base :: nrow ( traindata ) Data Frame \ud615\uc2dd\uc73c\ub85c \uc785\ub825\ubc1b\uc740 \ud30c\ub77c\ubbf8\ud130 traindata \uc5d0\uc11c Input Features\uc5d0 \ud574\ub2f9\ud558\ub294 Columns(1~4)\ub97c \ucde8\ud558\ub418 Features\uc758 \uc774\ub984\uc740 \ud544\uc694\uc5c6\uc73c\ubbc0\ub85c \uc774\ub97c \uc81c\uac70\ud569\ub2c8\ub2e4: # extract the data and label # don't need atribute X <- base :: unname ( base :: data.matrix ( traindata [, x ])) Output Class\uc5d0 \ud574\ub2f9\ud558\ub294 Column(5)\uc744 \ucde8\ud558\uc5ec \ubcc0\uc218 Y\uc5d0 \uc800 # correct categories represented by integer Y <- traindata [, y ] Y \uc5d0 \uc800\uc7a5\ub41c \ud615\ud0dc\ub294 nominal value\uc778 \uacbd\uc6b0, \uc774\ub97c \uc815\uc218 \ud615\ud0dc\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4. \uc989, Y\uc5d0\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc138 \uac1c\uc758 \ud074\ub798\uc2a4 \uc774\ub984\uc774 \uc800\uc7a5\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. > Y [ 1 ] setosa setosa setosa setosa setosa setosa setosa setosa setosa setosa setosa setosa setosa [ 14 ] setosa setosa setosa setosa setosa setosa setosa setosa setosa setosa setosa setosa versicolor [ 27 ] versicolor versicolor versicolor versicolor versicolor versicolor versicolor versicolor versicolor versicolor versicolor versicolor versicolor [ 40 ] versicolor versicolor versicolor versicolor versicolor versicolor versicolor versicolor versicolor versicolor versicolor virginica virginica [ 53 ] virginica virginica virginica virginica virginica virginica virginica virginica virginica virginica virginica virginica virginica [ 66 ] virginica virginica virginica virginica virginica virginica virginica virginica virginica virginica Levels : setosa versicolor virginica if ( base :: is.factor ( Y )) { Y <- base :: as.integer ( Y ) } \ub2e4\uc74c \ucf54\ub4dc\ub97c \uc0b4\ud3b4\ubcf4\uc2dc\uba74, # create index for both row and col Y.len <- base :: length ( base :: unique ( Y )) Y.set <- base :: sort ( base :: unique ( Y )) Y.index <- base :: cbind ( 1 : N , base :: match ( Y , Y.set )) Line 2 \uc5d0\uc11c base::unique() \ud568\uc218\ub97c \uc774\uc6a9\ud558\uc5ec \uc911\ubcf5\ub418\uc9c0 \uc54a\uc740 \uc5d8\ub9ac\uba3c\ud2b8\ub4e4(Elements)\uc744 \ubf51\uc544\ub0b4\uace0 \uc774\ub4e4\uc758 \uac1c\uc218\ub97c \uad6c\ud558\uc5ec Y.len \uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4. Line 3 \uc5d0\uc11c\ub294 \uc774 \uc5d8\ub9ac\uba3c\ud2b8\ub4e4\uc744 \uc624\ub984\ucc28\uc21c(Ascending Order)\uc73c\ub85c \uc815\ub82c\ud55c \uacb0\uacfc\ub97c Y.set \uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4. Line 4 \uc5d0\uc11c base::match() \ud568\uc218\ub97c \uc774\uc6a9\ud558\uc5ec Y\uc758 \uac01 \uc5d8\ub9ac\uba3c\ud2b8\uac00 Y.set \uc758 \uc5d8\ub9ac\uba3c\ud2b8\uc640 \uc77c\uce58\ud558\ub294 \uc704\uce58\ub97c \ucc3e\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \uc608\ub97c \ud1b5\ud574 base::match() \ud568\uc218\ub97c \uc124\uba85\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. > base :: match ( base :: c ( 4 , 3 , 4 , 3 , 2 , 3 , 2 , 3 , 1 , 1 , 3 , 4 , 4 ), base :: c ( 1 , 3 , 2 )) [ 1 ] NA 2 NA 2 3 2 3 2 1 1 2 NA NA \uc704\uc758 \ucf54\ub4dc\uc5d0\uc11c base::match() \ud568\uc218\uc758 \uccab\ubc88\uc9f8 \ud30c\ub77c\ubbf8\ud130\uc758 \uccab\ubc88\uc9f8 \uc5d8\ub9ac\uba3c\ud2b8 4\ub294 \ub450\ubc88\uc9f8 \ud30c\ub77c\ubbf8\ud130\uc758 \uc77c\uce58\ud558\ub294 \uc5d8\ub9ac\uba3c\ud2b8\uac00 \uc5c6\uc73c\ubbc0\ub85c \uacb0\uacfc\ub294 NA \uc785\ub2c8\ub2e4. \uccab\ubc88\uc9f8 \ud30c\ub77c\ubbf8\ud130\uc758 \ub450\ubc88\uc9f8 \uc5d8\ub9ac\uba3c\ud2b8 3\uc740 \ub450\ubc88\uc9f8 \ud30c\ub77c\ubbf8\ud130\uc5d0 \uc77c\uce58\ud558\ub294 \uc5d8\ub9ac\uba3c\ud2b8\uac00 \uc874\uc7ac\ud558\uba70 \uc778\ub371\uc2a4\ub294 2\uc785\ub2c8\ub2e4. \uccab\ubc88\uc9f8 \ud30c\ub77c\ubbf8\ud130\uc758 \uc544\ud649\ubc88\uc9f8 \uc5d8\ub9ac\uba3c\ud2b8 1\uc740 \ub450\ubc88\uc9f8 \ud30c\ub77c\ubbf8\ud130\uc5d0 \uc77c\uce58\ud558\ub294 \uc5d8\ub9ac\uba3c\ud2b8\uac00 \uc874\uc7ac\ud558\uba74 \uc778\ub371\uc2a4\ub294 1\uc785\ub2c8\ub2e4. \uc774\uc640 \uac19\uc774 \uccab\ubc88\uc9f8 \ud30c\ub77c\ubbf8\ud130\uc758 \uac01 \uc5d8\ub9ac\uba3c\ud2b8\uac00 \ub450\ubc88\uc9f8 \ud30c\ub77c\ubbf8\ud130\uc758 \uc77c\uce58\ud558\ub294 \uc5d8\ub9ac\uba3c\ud2b8\uc758 \uc778\ub371\uc2a4\ub97c \ub118\uaca8\uc8fc\ub294 \ud568\uc218\uac00 base::match() \uc785\ub2c8\ub2e4. 1:N \ubca1\ud130\uc640 base::match(Y, Y.set) \ubca1\ud130\ub97c base::cbind() \ud568\uc218\ub97c \uc774\uc6a9\ud558\uc5ec Column Binding\ud55c \uacb0\uacfc\ub97c Y.index \uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4. 5.3. Training \uc774\uc81c \ub2e4\uc74c \ucf54\ub4dc\ub97c \uc0b4\ud3b4\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. # number of input features D <- base :: ncol ( X ) # number of categories for classification K <- base :: length ( base :: unique ( Y )) H <- hidden # create and initialize weights and bias W1 <- 0.01 * base :: matrix ( stats :: rnorm ( D * H ), nrow = D , ncol = H ) b1 <- base :: matrix ( 0 , nrow = 1 , ncol = H ) W2 <- 0.01 * base :: matrix ( stats :: rnorm ( H * K ), nrow = H , ncol = K ) b2 <- base :: matrix ( 0 , nrow = 1 , ncol = K ) cs Line 1~6\uc740 Input Dimensionality(D), Hidden Layer \ub0b4 Neuron\uac1c\uc218(H), Class \uac1c\uc218(H)\ub97c \uc800\uc7a5\ud569\ub2c8\ub2e4. Line 8~13\uc740 Model Parameters\ub97c \uc8fc\uc5b4\uc9c4 Dimension \ud06c\uae30\uc758 \ud589\ub82c\ub85c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4. # use all train data to update weights since it's a small dataset batchsize <- N # initialize loss to a very big value loss <- 100000 \uc704\uc758 \ucf54\ub4dc\uc5d0\uc11c\ub294 Batch Size\uc640 Loss\ub97c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4. Batch Size\ub97c \uc804\uccb4 \ub370\uc774\ud130\uc758 \uac1c\uc218 N\uc73c\ub85c \uc124\uc815\ud55c \uac83\uc740 Full Batch\ub97c \uc758\ubbf8\ud558\uba70 N\uc774 \ub9e4\uc6b0 \ud074 \uacbd\uc6b0 Full Batch\uac00 \ube44\ud6a8\uc728\uc801\uc77c \uc218 \uc788\uc73c\ubbc0\ub85c Mini Batch( \\(\\mathrm{batchsize} < N\\) )\ub85c \uc218\ud589\ud558\uba70, Loss\ub294 \ucd5c\uc18c\ud654\uc758 \ub300\uc0c1\uc774\ubbc0\ub85c \ucda9\ubd84\ud788 \ud070 \uac12\uc73c\ub85c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4. \uc790, \uc774\uc81c \ubcf8\uaca9\uc801\uc73c\ub85c \ud559\uc2b5\uc744 \uc9c4\ud589\ud569\ub2c8\ub2e4. # Training the network i <- 0 while ( i < maxit && loss > abstol ) { # iteration index i <- i +1 # forward .... # 1 indicate row, 2 indicate col hidden.layer <- base :: sweep ( X %*% W1 , 2 , b1 , '+' ) # neurons : ReLU hidden.layer <- base :: pmax ( hidden.layer , 0 ) score <- base :: sweep ( hidden.layer %*% W2 , 2 , b2 , '+' ) # softmax score.exp <- base :: exp ( score ) # debug probs <- score.exp / base :: rowSums ( score.exp ) # compute the loss correct.logprobs <- - log ( probs [ Y.index ]) data.loss <- base :: sum ( correct.logprobs ) / batchsize reg.loss <- 0.5 * reg * ( base :: sum ( W1 * W1 ) + base :: sum ( W2 * W2 )) loss <- data.loss + reg.loss # backward .... dscores <- probs dscores [ Y.index ] <- dscores [ Y.index ] - 1 dscores <- dscores / batchsize dW2 <- base :: t ( hidden.layer ) %*% dscores db2 <- base :: colSums ( dscores ) dhidden <- dscores %*% base :: t ( W2 ) dhidden [ hidden.layer <= 0 ] <- 0 dW1 <- base :: t ( X ) %*% dhidden db1 <- base :: colSums ( dhidden ) # update .... dW2 <- dW2 + reg * W2 dW1 <- dW1 + reg * W1 W1 <- W1 - lr * dW1 b1 <- b1 - lr * db1 W2 <- W2 - lr * dW2 b2 <- b2 - lr * db2 } \uc55e\uc11c \uc774\ub860 \ubd80\ubd84\uc5d0\uc11c \ucda9\ubd84\ud788 \uc124\uba85\ub4dc\ub838\ub2e4\uace0 \uc0dd\uac01\ub418\ub294\ub370, Op.[ForwardPass]\uc640 Op.[BackwardPass]\ub97c \ub300\uc751\uc2dc\ucf1c \ubcf4\uc2dc\uba74 \ucf54\ub4dc\uac00 \uc644\ubcbd\ud558\uac8c \uc774\ud574\ub418\ub9ac\ub77c \ubbff\uc2b5\ub2c8\ub2e4. \ud559\uc2b5\uc774 \uc644\ub8cc\ub418\uba74 \uc544\ub798\uc758 \ucf54\ub4dc\uc640 \uac19\uc774 model \uc774\ub77c\ub294 list \ubcc0\uc218\uc5d0 \ubaa8\ub378 \ud30c\ub77c\ubbf8\ud130\ub4e4\uc744 \uc800\uc7a5\ud558\uace0 \uacb0\uacfc\ub85c \ub9ac\ud134\ud574 \uc90d\ub2c8\ub2e4. # final results # creat list to store learned parameters # you can add more parameters for debug and visualization # such as residuals, fitted.values ... model <- list ( D = D , H = H , K = K , # weights and bias W1 = W1 , b1 = b1 , W2 = W2 , b2 = b2 ) # plotting with Plotly learning_val <- learning_val [ -1 ,] p <- plotly :: plot_ly ( data = learning_val , x = ~ Epoch , y = ~ Loss , name = \"Loss\" , type = 'scatter' , mode = 'lines+markers' , line = list ( color = 'rgb(205, 12, 24)' , width = 3 )) %>% add_trace ( y = ~ Accuracy , name = \"Accuracy\" , line = list ( color = 'rgb(22, 96, 167)' , width = 4 )) %>% layout ( title = \"Loss & Accuracy as Steps Proceed\" , xaxis = list ( title = \"steps\" ), yaxis = list ( title = \"Loss & Acc.\" )) print ( p ) return ( model ) 5.4. predict.dnn( ) \ud504\ub85c\ud1a0\ud0c0\uc785 predict.dnn() \ud568\uc218\ub294 predict.dnn.R \uc18c\uc2a4 \ud30c\uc77c\uc5d0 \uc788\uc2b5\ub2c8\ub2e4. \ud568\uc218 \uc120\uc5b8\uc740 \ub2e4\uc74c\uacfc \uac19\uc740\ub370, predict.dnn <- function ( model , data = X.test ) \uc785\ub825 \ubcc0\uc218\uc5d0 \ub300\ud55c \uc124\uba85\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: model : train.dnn() \uc5d0\uc11c \ud559\uc2b5\uc2dc\ud0a8 \ubaa8\ub378 \ud30c\ub77c\ubbf8\ud130\ub4e4. data : \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130. Predict \uacfc\uc815\uc740 \ub2e8\uc21c\ud788 \ud14c\uc2a4\ud2b8 \uc785\ub825 \ub370\uc774\ud130\ub97c \uc55e\uc11c \uc5bb\uc740 model\uc744 \uc774\uc6a9\ud558\uc5ec Forward Pass\ub97c \uac70\uccd0 Score\uac00 \uac00\uc7a5 \ub192\uc740 Class\ub97c \uc5bb\ub294 \uacfc\uc815\uc774\ub77c\uace0 \ubcf4\uc2dc\uba74 \ub418\uaca0\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \ucf54\ub4dc\ub97c \ucc38\uace0\ud558\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4. # Prediction predict.dnn <- function ( model , data = X.test ) { # new data, transfer to matrix new.data <- base :: data.matrix ( data ) # Feed Forwad hidden.layer <- base :: sweep ( new.data %*% model $ W1 , 2 , model $ b1 , '+' ) # neurons : Rectified Linear hidden.layer <- base :: pmax ( hidden.layer , 0 ) score <- base :: sweep ( hidden.layer %*% model $ W2 , 2 , model $ b2 , '+' ) # Loss Function: softmax score.exp <- base :: exp ( score ) probs <- base :: sweep ( score.exp , 1 , base :: rowSums ( score.exp ), '/' ) # select max possiblity labels.predicted <- base :: max.col ( probs ) return ( labels.predicted ) } 5.5. main.R main.R \uc5d0\uc11c \ud558\ub294 \uc791\uc5c5\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: \uc8fc\uc5b4\uc9c4 \ub370\uc774\ud130( iris )\ub97c train data\uc640 test data\ub85c \ubd84\ub958\ud55c\ub2e4. train data\ub97c train.dnn() \ud568\uc218\uc5d0 \uacf5\uae09\ud558\uc5ec \ud559\uc2b5 \ubaa8\ub378\uc744 \uc5bb\ub294\ub2e4. test data\ub97c predict.dnn() \ud568\uc218\uc5d0 \uacf5\uae09\ud558\uc5ec \uc608\uce21 \uacb0\uacfc\ub97c \uc5bb\ub294\ub2e4. \uc5bb\uc5b4\uc9c4 \uc608\uce21 \uacb0\uacfc\uc640 \uc2e4\uc81c \ub370\uc774\ud130(Ground Truth Labels)\uc640 \uc77c\uce58\ub3c4\ub97c \ud3c9\uac00\ud558\uc5ec Accuracy\ub97c \uc5bb\ub294\ub2e4. \ub2e4\uc74c\uc740 main.R \ucf54\ub4dc\uc785\ub2c8\ub2e4: # Copyright 2016: www.ParallelR.com # Parallel Blog : R For Deep Learning (I): Build Fully Connected Neural Network From Scratch # Classification by 2-layers DNN and tested by iris dataset # Author: Peng Zhao, patric.zhao@gmail.com base :: rm ( list = ls ()) base :: gc () base :: source ( './train.dnn.R' , echo = FALSE ) base :: source ( './predict.dnn.R' , echo = FALSE ) ######################################################################## # testing ####################################################################### set.seed ( 1 ) # 0. EDA base :: summary ( iris ) base :: names ( iris ) graphics :: plot ( iris ) # 1. split data into test/train samp <- base :: c ( base :: sample ( 1 : 50 , 25 ), base :: sample ( 51 : 100 , 25 ), base :: sample ( 101 : 150 , 25 )) # 2. train model ir.model <- train.dnn ( x = 1 : 4 , y = 5 , traindata = iris [ samp ,], testdata = iris [ - samp ,], hidden = 6 , maxit = 3000 , display = 50 ) # ir.model <- train.dnn(x=1:4, y=5, traindata=iris[samp,], hidden=6, maxit=2000, display=50) # 3. prediction # NOTE: if the predict is factor, we need to transfer the number into class manually. # To make the code clear, I don't write this change into predict.dnn function. labels.dnn <- predict.dnn ( ir.model , iris [ - samp , -5 ]) # 4. verify the results base :: table ( model = iris [ - samp , 5 ], data = labels.dnn ) # labels.dnn # 1 2 3 #setosa 25 0 0 #versicolor 0 24 1 #virginica 0 0 25 #accuracy print ( sprintf ( \"Accuracy: %f\" , base :: mean ( as.integer ( iris [ - samp , 5 ]) == labels.dnn )) ) # 0.98 5.6. \uc2e4\ud589\uacb0\uacfc main.R \ucf54\ub4dc\ub97c \uc2e4\ud589\ud55c \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. 50 1.09785 0.3333333 100 1.096281 0.3333333 150 1.091853 0.3333333 200 1.080326 0.3333333 250 1.056044 0.3333333 300 1.015552 0.3466667 350 0.952453 0.6666667 400 0.8789816 0.6666667 450 0.8070193 0.6666667 500 0.7290098 0.6666667 550 0.649967 0.6666667 600 0.5840677 0.68 650 0.5341543 0.7066667 700 0.4962127 0.8 750 0.4660278 0.88 800 0.4406975 0.92 850 0.4184247 0.9333333 900 0.3981292 0.96 950 0.379204 0.96 1000 0.361337 0.96 1050 0.344356 0.96 1100 0.3281951 0.9866667 1150 0.3128612 0.9866667 1200 0.2983606 0.9866667 1250 0.284711 0.9866667 1300 0.2719326 0.9866667 1350 0.2600172 0.9866667 1400 0.2489488 0.9866667 1450 0.2387016 0.9866667 1500 0.2292342 0.9866667 1550 0.2204989 0.9866667 1600 0.2124452 0.9866667 1650 0.205022 0.9866667 1700 0.1981784 0.9866667 1750 0.1918652 0.9866667 1800 0.1860356 0.9866667 1850 0.180646 0.9866667 1900 0.1756561 0.9866667 1950 0.171029 0.9866667 2000 0.1667312 0.9866667 2050 0.1627323 0.9866667 2100 0.1590047 0.9866667 2150 0.1555238 0.9866667 2200 0.1522674 0.9866667 2250 0.1492155 0.9866667 2300 0.1463502 0.9866667 2350 0.1436553 0.9866667 2400 0.1411165 0.9866667 2450 0.1387206 0.9866667 2500 0.136456 0.9866667 2550 0.1343122 0.9866667 2600 0.1322797 0.9866667 2650 0.1303498 0.9866667 2700 0.1285149 0.9866667 2750 0.1267679 0.9866667 2800 0.1251025 0.9866667 2850 0.1235127 0.9866667 2900 0.1219935 0.9866667 2950 0.1205399 0.9866667 3000 0.1191476 0.9866667 [ 1 ] \"Accuracy: 0.986667\"","title":"Deep Learning from Scratch Part 2."},{"location":"posts/deep-learning/2017-08-04-Deep-Learning-from-Scratch-Part-02/#_1","text":"\uc9c0\ub09c \ud3ec\uc2a4\ud305 \uc5d0\uc11c R\uc5d0\uc11c \ub525\ub7ec\ub2dd\uc744 \ubc14\ub2e5\ubd80\ud130(from scratch) \uad6c\ud604\ud558\ub294 \ubc29\ubc95\uc5d0 \ub300\ud574 \uac1c\uad04\uc801\uc73c\ub85c \uc0b4\ud3b4\ubcf8 \uc801\uc774 \uc788\ub294\ub370, \uc774\ubc88 \ud3ec\uc2a4\ud305\uc5d0\uc11c\ub294 \ucf54\ub4dc\ub97c \uc790\uc138\ud558\uac8c \ubd84\uc11d\ud558\uba74\uc11c \uc218\ud559\uc801\uc73c\ub85c \uacfc\uc815\uc744 \ud480\uc5b4\ubcf4\uace0\uc790 \ud569\ub2c8\ub2e4.","title":"\ubd80\uc81c\ubaa9: \uc778\uacf5\uc2e0\uacbd\ub9dd \ucc98\uc808\ud558\uac8c \uc81c\ub300\ub85c \uc774\ud574\ud558\uae30"},{"location":"posts/deep-learning/2017-08-04-Deep-Learning-from-Scratch-Part-02/#1","text":"\ub525\ub7ec\ub2dd \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uae30 \uc704\ud574 \ud14c\uc2a4\ud2b8 \uc6a9\ub3c4\uc758 \ub370\uc774\ud130\ub85c iris \ub370\uc774\ud130\uc14b \uc744 \uc0ac\uc6a9\ud560 \uac83\uc785\ub2c8\ub2e4. iris\ub294 \uc77c\uc885\uc758 \uaf43\uc744 \uaf43\ubc1b\uce68 \ubc0f \uaf43\uc78e\uc758 \ud3ed\uacfc \uae38\uc774 \ub4f1\uc73c\ub85c \ubd84\ub958\ud55c \ub370\uc774\ud130\uc785\uc774\uba70, R\uc758 \uae30\ubcf8 \ud328\ud0a4\uc9c0\uc5d0 \ud3ec\ud568\uc774 \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \ub300\ub7b5\uc801\uc778 \ub370\uc774\ud130\uc758 \ud615\ud0dc\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: > head ( iris ) Sepal.Length Sepal.Width Petal.Length Petal.Width Species 1 5.1 3.5 1.4 0.2 setosa 2 4.9 3.0 1.4 0.2 setosa 3 4.7 3.2 1.3 0.2 setosa 4 4.6 3.1 1.5 0.2 setosa 5 5.0 3.6 1.4 0.2 setosa 6 5.4 3.9 1.7 0.4 setosa \ucd1d 4\uac1c\uc758 Features( Sepal.Length , Sepal.Width , Petal.Length , Petal.Width )\ub97c \uac00\uc9c0\uba70, Species\ub294 \uaf43\uc744 \ubd84\ub958\ud55c \ud074\ub798\uc2a4( setosa , versicolor , virginica \ub85c \ucd1d 3\uac1c\uc758 \ud074\ub798\uc2a4)\uc785\ub2c8\ub2e4. \ub370\uc774\ud130\uc758 \uac1c\uc218\ub294 \ucd1d 150\uac1c\uc785\ub2c8\ub2e4. \uc8fc\uc5b4\uc9c4 \ub370\uc774\ud130\ub97c \uc774\uc6a9\ud558\uc5ec \ud559\uc2b5 \ubc0f \ud14c\uc2a4\ud2b8\ub97c \uc704\ud574 test dataset \uacfc train dataset \uc73c\ub85c \ub098\ub215\ub2c8\ub2e4: # 1. split data into test/train samp <- base :: c ( base :: sample ( 1 : 50 , 25 ), base :: sample ( 51 : 100 , 25 ), base :: sample ( 101 : 150 , 25 )) samp \ub294 test dataset\uc73c\ub85c \ub370\uc774\ud130\uc758 \uc778\ub371\uc2a4\ub97c 1~50 \ubc94\uc704\uc5d0\uc11c 25\uac1c, 51~100 \ubc94\uc704\uc5d0\uc11c 25\uac1c, 101~150 \ubc94\uc704\uc5d0\uc11c 25\uac1c\uc529 \ucd1d 75\uac1c\ub97c \uac00\uae09\uc801 \uace0\ub974\uac8c \uc120\ud0dd\ud55c \uac83\uc785\ub2c8\ub2e4. \uc120\ud0dd\ub41c \uc778\ub371\uc2a4\uc5d0 \ud574\ub2f9\ud558\ub294 \ub370\uc774\ud130\uc14b(Dataset)\uc744 traindata\ub85c, \uc774\ub4e4\uc744 \uc81c\uc678\ud55c \ub098\uba38\uc9c0\ub97c test data\ub85c \uc9c0\uc815\ud569\ub2c8\ub2e4: traindata = iris[samp,] testdata = iris[-samp,]","title":"1. \ub370\uc774\ud130 \uc900\ube44"},{"location":"posts/deep-learning/2017-08-04-Deep-Learning-from-Scratch-Part-02/#2-neural-network","text":"\uad6c\uc131\ud55c Neural Network\ub294 Multilayer Perceptron(MLP) \ud615\ud0dc\ub85c, 4\uac1c\uc758 Input Feature\ub97c \uac16\ub294 \uc785\ub825 \ub808\uc774\uc5b4(Layer)\uc640 6\uac1c\uc758 \ub178\ub4dc(Node)\ub97c \ud3ec\ud568\ud558\ub294 1\uac1c\uc758 Hidden Layer, 3\uac1c\uc758 \ucd9c\ub825 \ub178\ub4dc\ub97c \uac16\ub294 \ucd9c\ub825 \ub808\uc774\uc5b4\ub85c \uad6c\uc131\ud558\uc600\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \uc774\ubbf8\uc9c0\ub97c \ucc38\uace0\ud558\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4. D(=4) \ub294 Input Feature\uc758 \uac1c\uc218\ub97c, H(=6) \ub294 Hidden Layer \ub0b4 \ub178\ub4dc \uac1c\uc218\ub97c, K(=3) \ub294 \ud074\ub798\uc2a4 \uac1c\uc218\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc55e\uc73c\ub85c\uc758 \uc124\uba85\uc740 \uad6c\uccb4\uc801\uc778 \uc22b\uc790\ub97c \uc5b8\uae09\ud558\uae30 \ubcf4\ub2e4\ub294 \uac00\uae09\uc801 \uc77c\ubc18\ud654\ub97c \uc704\ud574 \uc774\ub4e4 \ubcc0\uc218 \uc774\ub984\uc744 \uc774\uc6a9\ud558\uc5ec \uc124\uba85\uc744 \uc0ac\uc6a9\ud560 \uac83\uc774\ub2c8 \uac01 \ubcc0\uc218\uc758 \uac12\uc744 \uae30\uc5b5\ud574 \ub450\uc2dc\uba74 \uc124\uba85\uc744 \uc880 \ub354 \uc774\ud574\ud558\ub294\ub370 \ub3c4\uc6c0\uc774 \ub420 \uac83\uc785\ub2c8\ub2e4.","title":"2. Neural Network \uad6c\uc131"},{"location":"posts/deep-learning/2017-08-04-Deep-Learning-from-Scratch-Part-02/#3-feed-forward-operations","text":"\uc804\uccb4\uc801\uc778 \ub124\ud2b8\uc6cc\ud06c \uad6c\uc131\uc740 \uc704\uc758 \uc774\ubbf8\uc9c0\uc640 \uac19\uc9c0\ub9cc, \uc0ac\uc2e4 \ud65c\uc131\ud654 \ud568\uc218(Activation Function), Softmax Classifier \ub4f1 \ub354 \ub9ce\uc740 \ubcf5\uc7a1\ud55c \uacc4\uc0b0\uc774 \ud3ec\ud568\ub429\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc880 \ub354 \uad6c\uccb4\uc801\uc73c\ub85c \ud45c\ud604\ud55c \uac83\uc774 \ub2e4\uc74c \uc774\ubbf8\uc9c0\uc785\ub2c8\ub2e4. \uc870\uae08 \ubcf5\uc7a1\ud574 \ubcf4\uc774\uc9c0\ub9cc \uc218\ud559\uc801 \uc124\uba85\uc744 \uacc1\ub4e4\uc5ec \ud558\ub098\uc529 \ud480\uc5b4 \ub098\uac00\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \\(\\mathbf{X}\\) \ub294 Input Feature \ubca1\ud130\uc785\ub2c8\ub2e4. 75\uac1c\uc758 \ub370\uc774\ud130\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc9c0\ub9cc \uc124\uba85\uc744 \uac04\ub2e8\ud558\uac8c \ud558\uae30 \uc704\ud574 1\uac1c\uc758 \ub370\uc774\ud130\ub97c \uac16\ub294\ub2e4\uace0 \uac00\uc815\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c, \\(\\mathbf{X}\\) \uc758 \ucc28\uc6d0\uc740 [75\u00d74] (\ub610\ub294 [N\u00d7D])\uac00 \uc544\ub2cc [1\u00d74] (\ub610\ub294 [1\u00d7D])\uc785\ub2c8\ub2e4. \uccab\ubc88\uc9f8 Weight \\(\\mathbf{W}^{(1)}\\) \ub294 \ucc28\uc6d0 [D\u00d7H]\ub97c \uac16\ub294 \ud589\ub82c\uc774\uba70, \uccab\ubc88\uc9f8 Bias \\(\\mathbf{b}^{(1)}\\) \ub294 \ucc28\uc6d0 [1\u00d7D]\ub97c \uac16\ub294 \ubca1\ud130\uc785\ub2c8\ub2e4(\uc0ac\uc2e4 1\ucc28\uc6d0 \ud589\ub82c\uc774\ub77c\uace0\ud574\ub3c4 \ubb34\ubc29\ud569\ub2c8\ub2e4). \\(\\mathbf{\\Sigma}^{(1)}\\) \uc740 \\(\\mathbf{W}^{(1)}\\) \uacfc \\(\\mathbf{X}\\) \ub97c \ud589\ub82c\uacf1\ud558\uace0 \\(\\mathbf{b}^{(1)}\\) \uc744 \ub354\ud55c \uac83\uc785\ub2c8\ub2e4. \uc774\ub97c \uc218\ud559\uc801\uc73c\ub85c \ud45c\ud604\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4(\ud3b8\uc758 \uc0c1 Tensor \ud615\uc2dd\uc73c\ub85c \uc218\uc2dd\uc744 \ud45c\ud604\ud558\uace0\uc790 \ud558\uba70 \uc911\ubcf5\ucca8\uc790\ub294 Summation\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4): Op.[1] : \\(\\displaystyle{ \\sigma_{i}^{(1)} = x_k w_{ki}^{(1)} + b_{i}^{(1)} }, i = 1, ..., H, k=1,...,D\\) \ud65c\uc131\ud654 \ud568\uc218\ub294 ReLU(Rectified Linear Unit)\uc744 \uc0ac\uc6a9\ud558\uc600\uc73c\uba70, \uc774\ub294 0\ubcf4\ub2e4 \uc791\uc740 \uacbd\uc6b0\uc5d0\ub294 0\uc744, 0\ubcf4\ub2e4 \ud070 \uacbd\uc6b0\uc5d0\ub294 \uc790\uae30 \uc790\uc2e0\uc744 \ucd9c\ub825\ud558\ub294 \ud568\uc218\uc785\ub2c8\ub2e4. \uc774\uc5d0 \ub300\ud55c \uc218\uc2dd\uc744 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: Op.[2] : \\(h_i = \\mathrm{max}(0, \\sigma_{i}^{(1)}), i = 1,...,H\\) Hidden Layer \\(\\mathbf{H}\\) \ub294 \ub450\ubc88\uc9f8 Weight \ud589\ub82c\uc778 \\(\\mathbf{W}^{(2)}\\) (\ucc28\uc6d0 [H\u00d7K])\uc640 \ud589\ub82c\uacf1\uc744 \ud55c \ud6c4 \ub450\ubc88\uc9f8 Bias \ubca1\ud130\uc778 \\(\\mathbf{b}^{(2)}\\) (\ucc28\uc6d0 [1\u00d7K])\uc640 \ub354\ud574\uc9d1\ub2c8\ub2e4: Op.[3] : \\(\\sigma_{i}^{(2)} = h_k w_{ki}^{(2)} + b_{i}^{(2)}, i = 1,...,K, k = 1,...,H\\) \ubc29\uae08 Op.[3]\uc744 \ud1b5\ud574 \uacc4\uc0b0\ub41c \\(\\mathbf{\\Sigma^{(2)}}\\) (\ud589\ub82c \ud615\ud0dc) \ub610\ub294 \\(\\sigma_{i}^{(2)}\\) (\ud589\ub82c\uc758 \uc5d8\ub9ac\uba3c\ud2b8 \ud615\ud0dc)\ub97c \ud2b9\ubcc4\ud788 score\ub77c\uace0 \uce6d\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4(\ub098\uc911\uc5d0 \ucf54\ub4dc\uc758 \ubcc0\uc218\uc640 \ub300\uc751\ud560 \uac83\uc785\ub2c8\ub2e4). Information Theory\uc5d0 \uadfc\uac70\ud558\uc5ec Data Loss\ub97c \uacc4\uc0b0\ud558\uae30 \uc704\ud574 \\(\\sigma_{i}^{(2)}\\) \uc5d0 Exponential \ud568\uc218\ub97c \uc801\uc6a9\ud569\ub2c8\ub2e4. Op.[4] : \\(e_i = \\mathrm{exp}(\\sigma_{i}^{(2)}), i=1,...,K\\) Op.[4]\uc5d0 \uc758\ud574 \uacc4\uc0b0\ub41c \uacb0\uacfc, \ud589\ub82c \\(\\mathbf{E}\\) \ub294 \ucc28\uc6d0 [1\u00d73]\uc758 \uacbd\uc6b0 \ub2e4\uc74c\uacfc \ud615\ud0dc\ub97c \uac16\uc2b5\ub2c8\ub2e4. \\( \\mathbf{E} = \\begin{bmatrix} \\mathrm{exp}(\\sigma_{1}^{(2)}) & \\mathrm{exp}(\\sigma_{2}^{(2)}) & \\mathrm{exp}(\\sigma_{3}^{(2)}) \\end{bmatrix} \\) \uc774\uc81c \ud589\ub82c \\(\\mathbf{E}\\) \uc758 \uac01 \uc5d8\ub9ac\uba3c\ud2b8\ub97c \uc5d8\ub9ac\uba3c\ud2b8\ub97c \ubaa8\ub450 \ub354\ud55c \uac12\uc73c\ub85c \ub098\ub215\ub2c8\ub2e4. Op.[5] : \\(\\displaystyle{ q_i = \\frac{e_i}{\\sum_{k=1}^{K}{e_k}} = \\frac{e_i}{S} } \\), \\(i = 1,...,K\\) \uc5ec\uae30\uc11c, \\(S = \\displaystyle{\\sum_{k=1}^{K}{e_k}} \\) \ud559\uc2b5\ud558\ub294 \uacfc\uc815\uc5d0\uc11c \uc2e4\uc81c \ub370\uc774\ud130 \ub77c\ubca8(\ub610\ub294 \ud074\ub798\uc2a4) - \uc774\ub97c Ground Truth Label\uc774\ub77c\uace0 \ud569\ub2c8\ub2e4 - \uacfc \uc608\uce21\ub41c \ub77c\ubca8\uc744 \ube44\uad50\ud558\uc5ec \ucc28\uc774\uac00 \ub098\ub294 \uacbd\uc6b0 Information Theory\uc5d0 \uc785\uac01\ud558\uc5ec \uc774\ub97c \ub370\uc774\ud130 \uc190\uc2e4(Data Loss)\ub77c\uace0 \ud558\uba70, True Distribution \\(p\\) \uc640 Estimated Distribution \\(q\\) \uc0ac\uc774\uc758 Cross-entropy \\(H(p,q)\\) \ub85c \ud45c\ud604\ud569\ub2c8\ub2e4: \\(H(p,q) = {p \\mathrm{log}\\begin{pmatrix}\\displaystyle{\\frac{1}{q}}\\end{pmatrix}} = -p \\mathrm{log}(q) \\) \\(K\\) \uac1c\uc758 Class\uc5d0 \ub300\ud558\uc5ec \ud45c\ud604\ud558\uba74, \\( H(p,q) = \\displaystyle{- \\sum_{k=1}^{K}{p_k \\mathrm{log}(q_k)}} \\) \uacfc \uac19\uc2b5\ub2c8\ub2e4. True Distribution \\(p\\) \ub294, \\( \\mathbf{p} = \\begin{bmatrix} p_1 & p_2 & ... & p_K \\end{bmatrix} \\) , \\( \\displaystyle{\\sum_{k=1}^{K}{p_K} = 1} \\) \uc778\ub370, Ground Truth Label\uc774 \\(y\\) \ubc88\uc9f8 Index, \uc989, \\(k=y\\) \uc774\uba74 \uacb0\uad6d, \\(p_{k=y} = 1\\) \uc774\uba70, \\(p_{k \\ne y} = 0\\) \uc73c\ub85c, \\(y\\) \ubc88\uc9f8 Index\ub9cc\uc774 1\uc774\uba70, \uadf8 \uc678\uc5d0\ub294 \ubaa8\ub450 0\uac00 \ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c, Kronecker Delta Property \ub97c \uc774\uc6a9\ud558\uc5ec \ub2e4\uc74c\uacfc \uac19\uc774 \uac04\ub2e8\ud558\uac8c \ud45c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \\( H(p,q) = -\\mathrm{log}(q_k) \\cdot \\delta_{ky}\\) , \\(k=1,...,K\\) , \\(y \\in [1,...K]\\) Cross-entropy\ub294 Data Loss\ub97c \uc758\ubbf8\ud558\ubbc0\ub85c, Ground Truth Label y\uc5d0 \ub300\ud55c Data Loss \\(L_D\\) \ub294, Op.[6] : \\(L_D = -\\mathrm{log}(q_k) \\cdot \\delta_{ky}, \\ k=1,...,K\\) \\(y \\in [1,...K] : \\mathrm{Ground \\ Truth \\ Label}\\) \uc704\uc758 \uc2dd\uc5d0\uc11c \ucca8\uc790(Subscript) \\(k\\) \uac00 \ub450 \ubc88 \uc911\ubcf5\ub418\uc5b4 \uc788\uc74c\uc744 \ubcfc \uc218 \uc788\ub294\ub370 Tensor \ud45c\ud604\uc5d0 \uc758\ud558\uba74 \uc77c\ubc18\uc801\uc73c\ub85c \uc911\ubcf5 \ucca8\uc790\ub294 \uc774 \ucca8\uc790\uc5d0 \ub300\ud558\uc5ec \ud569 \uc5f0\uc0b0(Summation)\uc744 \uc218\ud589\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c, \ub2e4\uc74c\uacfc \uac19\uc774 Data Loss \uc2dd\uc744 \ub354\uc6b1 \uac04\ub2e8\ud788 \ud45c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: Op.[7] : \\(L_D = -\\mathrm{log}(q_y)\\) Op.[7]\uc5d0 \uc758\ud574 \uacc4\uc0b0\ub41c \\(q\\) \ub97c correct.logprobs \ub77c \uce6d\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. 1\uac1c\uc758 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \uc608\ub97c \ub4e4\uc5b4 \uc124\uba85\ud558\uace0 \uc788\uc9c0\ub9cc, \ub9cc\uc57d \uc5ec\ub7ec \uac1c\uc758 \ub370\uc774\ud130\uc778 \uacbd\uc6b0, \uc774\ub4e4\uc744 \ud3c9\uade0\uc744 \uacc4\uc0b0\ud558\uc5ec Data Loss\ub85c \uacc4\uc0b0\ud569\ub2c8\ub2e4. \uac00\ub839, \\(N\\) \uac1c\uc758 \ub370\uc774\ud130\uc5d0 \ub300\ud558\uc5ec Data Loss\ub294, Op.[8] : \\(\\displaystyle{ L_D = - \\frac{1}{N}\\sum_{i=1}^{N}{\\mathrm{log}(q_i)} }\\) \ub85c \ud655\uc7a5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc11c, \\(L_D\\) \ub294 \uc804\uccb4 \ub370\uc774\ud130\uc14b\uc5d0 \ub300\ud55c \ud3c9\uade0 Data Loss\ub97c \uc758\ubbf8\ud558\uba70, \\(q_k\\) \ub294 k\ubc88\uc9f8 \ub370\uc774\ud130\uc758 Data Loss\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. Loss\ub294 \uc55e\uc11c \uc5b8\uae09\ud55c Data Loss \uc678\uc5d0 Regularization Loss\ub77c\ub294 \uac83\uc774 \uc788\uc2b5\ub2c8\ub2e4. Stanford CS231n \uac15\uc758 \uc0ac\uc774\ud2b8\uc5d0 \ub9e4\uc6b0 \uc798 \uc124\uba85\ub418\uc5b4 \uc788\ub294\ub370, \uac04\ub7b5\ud788 \uc694\uc57d\ud558\uc790\uba74, \ud2b9\uc815 \ub370\uc774\ud130\uc5d0 \ub300\ud558\uc5ec \uacfc\ub3c4\ud558\uac8c \uac00\uc911\uce58\uac00 \ubd80\uc5ec\ub418\ub294 \uacfc\ub3c4\uc801\ud569(Overfitting)\uc774\ub77c\uace0 \ud558\uba70 \uc774\ub97c \ubc29\uc9c0\ud558\uae30 \uc704\ud574 Regularization Loss(L-2 Regularization)\ub97c \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ud569\ub2c8\ub2e4: Op.[9] : \\(L_R = \\displaystyle{\\frac{1}{2}} \\lambda \\displaystyle{\\sum_{k}{\\sum_{l}{w_{kl}^2}}}\\) \uc5ec\uae30\uc11c, \\(\\lambda\\) \ub294 Hyperparameter\uc758 \uc77c\uc885\uc73c\ub85c Regularization Factor\ub77c\uace0 \ud558\uba70 1/2\uc744 \uacf1\ud55c \uc774\uc720\ub294 Weights\uc5d0 \ub300\ud55c L-2 Regularization(\ubaa8\ub4e0 Weights\ub97c \uc81c\uacf1\uc744 \ud558\uc5ec \ub354\ud55c \uac83)\uc5d0 \ub300\ud558\uc5ec \ubbf8\ubd84\uc744 \ud560 \uacbd\uc6b0 1/2\uc744 \uc81c\uac70\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4 (\uc0c1\uc218 \uacc4\uc218 \uc5b4\ub5a4 \uac12\uc774 \uacf1\ud574\uc9c0\ub354\ub77c\ub3c4 \ucd5c\uc801\ud654\uc758 \uacb0\uacfc\ub294 \ub3d9\uc77c\ud569\ub2c8\ub2e4). Data Loss \\(L_D\\) \uc640 Regularization Loss \\(L_R\\) \ub97c \ub354\ud55c \uc804\uccb4 Loss \\(L\\) \ub97c \ubcc0\uc218 \\(\\mathbf{W}\\) \uc640 \\(\\mathbf{b}\\) \uc5d0 \ub300\ud558\uc5ec \ucd5c\uc18c\ud654\ud569\ub2c8\ub2e4: Op.[10] : \\(\\displaystyle{ \\min_{\\mathbf{W, b}}{L = L_D + L_R} }\\) \uc9c0\uae08\uae4c\uc9c0\uc758 \uacfc\uc815\uc744 \uac04\ub2e8\ud558\uac8c \uc218\uc2dd\uc73c\ub85c \uc815\ub9ac\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4(\ucca8\uc790 \ud45c\ud604\uc740 \uc55e\uc758 \uacfc\uc815\uacfc \uc77c\uce58\ud558\uc9c0 \uc54a\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4): Op.[ForwardPass] : \\(N\\) \uac1c\uc758 Dataset, \\(D\\) \uac1c\uc758 Input Dimensionality, \\(H\\) \uac1c\uc758 \ub274\ub7f0\uc744 \uac16\ub294 1\uac1c\uc758 Hidden Layer, \\(K\\) \uac1c\uc758 Output Class\ub97c \uac16\ub294 Multi-layer Perceptron\uc5d0 \ub300\ud558\uc5ec, \\( \\sigma_{i,j}^{(1)} = x_{i,k} w_{kj}^{(1)} + b_{i,j}^{(1)} \\) , \\(i=1,...,N\\) , \\(j=1,...,H\\) , \\(k=1,...,D\\) \\( h_{i,j} = \\mathrm{max}(0, \\sigma_{i,j}^{(1)}) \\) , \\(i=1,...,N\\) , \\(j=1,...,H\\) \u25cf hidden.layer[N\u00d7H] = \\(h_{i,j}\\) \\( \\sigma_{i,j}^{(2)} = h_{i,k} w_{kj}^{(2)} + b_{i,j}^{(2)} \\) , \\(i=1,...,K\\) , \\(j=1,...,H\\) , \\(k=1,...,H\\) \u25cf score[N\u00d7K] = \\(\\sigma_{i,j}^{(2)}\\) \\( e_{i,j} = \\mathrm{exp}(\\sigma_{i,j}^{(2)}) \\) , \\(i=1,...,N\\) , \\(j=1,...,K\\) \u25cf score.exp[N\u00d7K] = \\(e_{i,j}\\) \\( \\displaystyle{ q_{i,j} = \\frac{e_{i,j}}{\\sum_{k=1}^{K}{e_{i,k}}}} \\) , \\(i=1,...,N\\) , \\(j=1,...,K\\) \u25cf probs[N\u00d7K] = \\(q_{i,j}\\) \\( L_{D_{i}} = - \\mathrm{log}(q_{y_{i}}) \\) \u25cf correct.logprobs[N\u00d71] = \\(L_{D_{i}}\\) \\( L_D = \\displaystyle{ L_D = \\frac{1}{N}\\sum_{i=1}^{N}{L_{D_{i}}} = - \\frac{1}{N} \\sum_{i=1}^{N}{q_{y_{i}}} } \\) \u25cf data.loss = \\(L_D\\) \\( \\displaystyle{ L_R = \\frac{1}{2} \\lambda \\begin{bmatrix} \\displaystyle{\\sum_{k=1}^{D}{\\sum_{l=1}^{H}{w_{kl}^{(1)}}}^2} + \\displaystyle{\\sum_{k=1}^{H}{\\sum_{l=1}^{K}{w_{kl}^{(2)}}}^2} \\end{bmatrix} } \\) \u25cf reg.loss = \\(L_R\\) \\( L = L_D + L_R \\) \u25cf loss = \\(L\\)","title":"3. Feed-forward Operations"},{"location":"posts/deep-learning/2017-08-04-Deep-Learning-from-Scratch-Part-02/#4-backward-pass","text":"Backward Pass \ub610\ub294 Backpropagation \uc740 \ud559\uc2b5\uc744 \ud558\ub294 \uacfc\uc815 \ub3d9\uc548 \ucd5c\uc801\ud654 \ud30c\ub77c\ubbf8\ud130\ub4e4(Optimization Parameters)\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\uae30 \uc704\ud574 \uc774 \ud30c\ub77c\ubbf8\ud130\ub4e4\uc5d0 \ub300\ud55c \uc804\uccb4 Loss\uc758 \ubbfc\uac10\ub3c4(Sensitivity)\ub97c \uacc4\uc0b0\ud558\ub294 \uacfc\uc815\uc778\ub370, Loss\ub85c\ubd80\ud130 \ub124\ud2b8\uc6cc\ud06c\ub97c Feed-forward \ubc29\ud5a5\uc758 \uc5ed\uc73c\ub85c \uac70\uc2ac\ub7ec \uc62c\ub77c\uac00\uba74\uc11c \uacc4\uc0b0\ud558\uae30 \ub54c\ubb38\uc5d0 Backward Pass\ub77c\uace0 \ubd88\ub9ac\uc6cc\uc9d1\ub2c8\ub2e4. \ub2e4\uc2dc \ub370\uc774\ud130\uc14b\ud2b8\uc758 1\uac1c\uc758 \ub370\uc774\ud130\uc5d0 \ub300\ud558\uc5ec \uc124\uba85\uc744 \uc9c4\ud589\ud558\uaca0\uc73c\ub098, N\uac1c\uc758 \ub370\uc774\ud130\uc5d0\uc11c\ub3c4 \uc27d\uac8c \ud655\uc7a5\ud560 \uc218 \uc788\uc73c\ub2c8, 1\uac1c\uc758 \ub370\uc774\ud130\uc5d0 \ub300\ud574 \ud655\uc2e4\ud788 \uc774\ud574\ub97c \ud558\ub294 \uac83\uc774 \uc911\uc694\ud569\ub2c8\ub2e4. \uc880 \ub354 \uba85\ud655\ud55c \uc124\uba85\uc744 \uc704\ud574 Hidden Layer ~ Classification \ubd80\ubd84\uc744 \ub2e4\uc74c\uacfc \uac19\uc774 \ub530\ub85c \ub5bc\uc5b4 \ub193\uaca0\uc2b5\ub2c8\ub2e4. \uac04\ub2e8\ud558\uac8c \uadf8\ub9bc\uc744 \uc124\uba85 \ub4dc\ub9ac\uba74, \uc6b0\uc120 Hidden Layer \\(\\mathbf{h}\\) \ub85c\ubd80\ud130, \\( \\sigma_{i}^{(2)} = w_{ki}^{(2)}h_k + b_{i}^{(2)} \\) , \\(i=1,...,K\\) \\(k=1,...,H\\) \uc774\uba70, \\(K\\) \uc640 \\(H\\) \ub294 \uac01\uac01 Class\uc758 \uac1c\uc218\uc640 Hidden Layer \ub0b4 Neuron\uc758 \uac1c\uc218\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. \ubcc4\ub2e4\ub978 \uc124\uba85\uc774 \uc5c6\ub294 \ud55c, Tensor Notation\uc5d0 \uc758\ud574 \uc911\ubcf5\ucca8\uc790\uc5d0 \ub300\ud574\uc11c\ub294 \ud569 \uc5f0\uc0b0(Summation)\uc744 \ud558\ub294 \uac83\uc73c\ub85c \uac04\uc8fc\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0, \\(\\sigma_{i}^{(2)}\\) \uc5d0 Exponential \ud568\uc218\ub97c \ucde8\ud558\uc5ec, \\( e_{i} = \\mathrm{exp}(\\sigma_{i}^{(2)}) \\) , \\(i=1,...,K\\) \uc640 \uac19\uc774 \ud45c\ud604\ud558\uc600\uc2b5\ub2c8\ub2e4. \ub610\ud55c \uac01 Class\uc758 Score \ud655\ub960 \\(q_i\\) \ub294, \\( q_i = \\displaystyle{\\frac{e_i}{\\displaystyle{\\sum_{j=1}^{K}{e_j}}}} = \\displaystyle{\\frac{e_i}{S}} \\) \uc774\uba70, Ground Truth Label\uc758 Index \\(y\\) \uc5d0 \ub300\ud558\uc5ec Data Loss \\(L_D\\) \ub294, \\( L_D = - \\displaystyle{ \\sum_{i=1}^{N}{\\mathrm{log}(q_{y_i})} } \\) \uc785\ub2c8\ub2e4. \uc77c\ub2e8 1\ucc28 \ubaa9\ud45c\ub294, score\uc5d0 \ub300\ud55c Data Loss\uc758 \ubbfc\uac10\ub3c4 \uc2dd \\(\\displaystyle{ \\frac{\\partial L_D}{\\partial \\sigma_{i}^{(2)}} }\\) \ub97c \uad6c\ud558\ub294 \uac83\uc774 \ub418\uaca0\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc740 \ub2e4\uc74c\uacfc \uac19\uc740 Chain Rule\uc5d0 \uc758\ud574 \uc2dd\uc744 \uc720\ub3c4\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \\( \\displaystyle{ \\frac{\\partial L_D}{\\partial \\sigma_{i}^{(2)}} = \\frac{\\partial L_D}{\\partial q_y} \\frac{\\partial q_y}{\\partial e_k} \\frac{\\partial e_k}{\\partial \\sigma_{i}^{(2)}}} \\) \uc774\uc5d0 \ub300\ud55c \uccab\ubc88\uc9f8 \ub2e8\uacc4\ub294 correct.logprobs \uc5d0 \ub300\ud55c Data Loss\uc758 \ubbfc\uac10\ub3c4 \uc2dd, \uc989, \ud3b8\ubbf8\ubd84(Partial Derivatives) \uc2dd\uc744 \uad6c\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \\(N = 1\\) \uc774\ubbc0\ub85c \\(q_{y_i} \\rightarrow q_y\\) \ub85c \uac04\ub2e8\ud788 \ud45c\ud604\ud558\uc5ec, Op.[11] : \\(\\displaystyle{ \\frac{\\partial L_D}{\\partial q_y} } = \\displaystyle{ \\frac{\\partial}{\\partial q_y} \\begin{pmatrix} -\\mathrm{log}(q_y) \\end{pmatrix} } = \\displaystyle{-\\frac{1}{q_y}}\\) \uc640 \uac19\uc774 \uc2dd\uc744 \uc5bb\uc2b5\ub2c8\ub2e4. \uadf8 \ub2e4\uc74c, \\(q_y\\) \uc5d0 \ub300\ud55c \\(e_k\\) \uc758 \ud3b8\ubbf8\ubd84 \uc2dd\uc744 \uad6c\ud569\ub2c8\ub2e4. Op.[12] : \\(\\displaystyle{ \\frac{\\partial q_y}{\\partial e_k} = \\displaystyle{ \\frac{\\partial}{\\partial e_k} \\begin{pmatrix} \\displaystyle{\\frac{e_y}{S}} \\end{pmatrix} } } = \\displaystyle{ \\frac{\\delta_{ky} - e_y}{S^2} }\\) \uc774\ub7f0 \uc2dd\uc73c\ub85c Forward Pass\ub97c \ucc28\ub840\ucc28\ub840\ub85c \uc5ed\uc73c\ub85c \ud3b8\ubbf8\ubd84 \uc2dd\uc744 \uc720\ub3c4\ud558\uba74 \ub429\ub2c8\ub2e4. \ub2e4\uc74c\uc740 \\(\\sigma_{i}^{(2)}\\) \uc5d0 \ub300\ud55c \\(e_k\\) \uc758 \ud3b8\ubbf8\ubd84\uc744 \uad6c\ud558\ub294 \uc2dd\uc785\ub2c8\ub2e4: Op.[13] : \\(\\displaystyle{ \\frac{\\partial e_k}{\\partial \\sigma_{i}^{(2)}} } = \\displaystyle{ \\frac{\\partial}{\\partial \\sigma_{i}^{(2)}}[\\mathrm{exp}(\\sigma_{k}^{(2)})] } = \\mathrm{exp}(\\sigma_{k}^{(2)}) = e_k \\delta_{ik} \\), no sum on \\(k\\) Op.[13]\uc758 \uacbd\uc6b0, \\(k\\) \uac00 \uc911\ubcf5\ucca8\uc790\uc774\uc9c0\ub9cc \ud569 \uc5f0\uc0b0\uc744 \ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774\uc81c Op.[11]~[13]\uc758 Chain Rule\uc744 \uc774\uc6a9\ud558\uc5ec \\(\\sigma_{i}^{(2)}\\) \uc5d0 \ub300\ud55c Data Loss\uc758 \ud3b8\ubbf8\ubd84 \uac12\uc744 \uad6c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: Op.[14] : \\( \\displaystyle{\\frac{\\partial L_D}{\\partial \\sigma_{i}^{(2)}}} = \\displaystyle{ \\frac{\\partial L_D}{\\partial q_y} \\frac{\\partial q_y}{\\partial e_k} \\frac{\\partial e_k}{\\partial \\sigma_{i}^{(2)}} } = \\displaystyle{ -\\frac{S}{e_y} \\frac{\\delta_{ky}S - e_y}{S^2} e_k \\delta_{ik} = \\frac{e_y e_k \\delta_{ik}}{e_y S} - \\frac{\\delta_{ky} S e_k \\delta_{ik}}{e_y S} = \\frac{e_i}{S} - \\frac{\\delta_{ky} e_k \\delta_{ik}}{e_y} } \\) = \\(q_i - \\delta_{ky} \\delta_{ky} \\delta_{ik} = q_i - \\delta_{iy}\\) \uc9c0\uae08\uae4c\uc9c0 \ubcf5\uc7a1\ud55c \uc218\uc2dd\uc744 \uc798 \ub530\ub77c\uc624\uc168\uc2b5\ub2c8\ub2e4. 1\ucc28 \ubaa9\ud45c\ub294 \\(\\mathbf{W}^{(2)}\\) \uc640 \\(\\mathbf{b}^{(2)}\\) \uc758 Data Loss \\(L_D\\) \uc5d0 \ub300\ud55c \ud3b8\ubbf8\ubd84\uc744 \uac01\uac01 \uad6c\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uc774 \ud3b8\ubbf8\ubd84\uc740 \\(\\mathbf{W}^{(2)}\\) \uc640 \\(\\mathbf{b}^{(2)}\\) \uc758 \ubcc0\ud654\uac00 Data Loss\uc5d0 \ub300\ud55c \ubcc0\ud654\uc758 \uc601\ud5a5\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc5ed\uc2dc \ub9c8\ucc2c\uac00\uc9c0\ub85c Chain Rule\uc5d0 \uc758\ud574 \ub2e4\uc74c \uc2dd\uc744 \uc5bb\uc744 \uc218 \uc788\uc73c\uba70: Op.[15] : \\( \\displaystyle{ \\frac{\\partial L_D}{\\partial b_{j}^{(2)}} = \\frac{\\partial L_D}{\\partial q_y} \\frac{\\partial q_y}{\\partial e_k} \\frac{\\partial e_k}{\\partial \\sigma_{i}^{(2)}} \\frac{\\partial \\sigma_{i}^{(2)}}{\\partial b_{j}^{(2)}} } \\) \ub2e4\uc74c \uc2dd\uc774 \uc131\ub9bd\ud558\ubbc0\ub85c, Op.[16] : \\( \\displaystyle{ \\frac{\\partial \\sigma_{i}^{(2)}}{\\partial b_{j}^{(2)}} = \\frac{\\partial}{\\partial b_{j}^{(2)}} \\begin{bmatrix} \\displaystyle{ h_m w_{mj}^{(2)} + b_{i}^{(2)} } \\end{bmatrix} = \\delta_{ij} } \\) , \\(i=1,...,K\\) , \\(j=1,...,K\\) \uc744 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ucc38\uace0\ub85c, \uc704\uc758 \uc2dd\uc5d0\uc11c Index \\(m\\) \uc740 Dummy Variable\uc785\ub2c8\ub2e4. Op.[14]~[16]\uc744 \ud1b5\ud574 \ub2e4\uc74c \uc2dd\uc744 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4: Op.[17] : \\( \\displaystyle{ \\frac{\\partial L_D}{\\partial b_{j}^{(2)}} = (q_i - \\delta_{yi}) \\delta_{ij} = q_j - \\delta_{ij} } \\) \uc774\uc640 \uc720\uc0ac\ud558\uac8c, Op.[18] : \\( \\displaystyle{ \\frac{\\partial \\sigma_{i}^{(2)}}{\\partial w_{jl}^{(2)}} = \\frac{\\partial}{\\partial w_{jl}^{(2)}} \\begin{bmatrix} h_m w_{mi}^{(2)} + b_{i}^{(2)} \\end{bmatrix} = h_m \\frac{\\partial w_{mi}^{(2)}}{\\partial w_{jl}^{(2)}} = h_m \\delta_{mj} \\delta_{il} = h_j \\delta_{il} } \\) , \\(m=1,...,H\\) , \\(i=1,...,K\\) , \\(j=1,...,H\\) , \\(k=1,...,K\\) \ub97c \uc5bb\uc744 \uc218 \uc788\uc73c\ubbc0\ub85c, Op.[19] : \\( \\displaystyle{ \\frac{\\partial L_D}{\\partial w_{jl}^{(2)}} = \\frac{\\partial L_D}{\\partial q_y} \\frac{\\partial q_y}{\\partial e_k} \\frac{\\partial e_k}{\\partial \\sigma_{i}^{(2)}} \\frac{\\partial \\sigma_{i}^{(2)}}{\\partial w_{jl}^{(2)}} = h_j (q_l - \\delta_{yl}) } \\) \uc640 \uac19\uc774 \\(\\mathbf{W}^{(2)}\\) \uc5d0 \ub300\ud55c Data Loss \\(L_D\\) \uc758 \ud3b8\ubbf8\ubd84 \uac12\uc744 \uad6c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc9c0\uae08\uae4c\uc9c0 \uc21c\uc218\ud558\uac8c Tensor Notation\uc744 \uc774\uc6a9\ud558\uc5ec \uc218\uc2dd\uc744 \uc720\ub3c4\ud558\uc600\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098, \ubb54\uac00 \uc640\ub2ff\uc9c0 \uc54a\uace0 \uba38\ub9ac\ub9cc \ubcf5\uc7a1\ud574\uc9c0\uace0 \uc788\ub294 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c 1\uac1c\uc758 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \uc608\ub97c \ub4e4\uc5b4 \ud589\ub82c \ud615\ud0dc\ub85c \uc27d\uac8c \uc124\uba85\ud558\uace0\uc790 \ud569\ub2c8\ub2e4. Hidden Layer\uc758 Neuron \uac1c\uc218\ub97c 4\uac1c, \uc989 \\(D=4\\) \uc774\uace0, Class\uc758 \uac1c\uc218\ub97c 3\uac1c, \uc989 \\(K=3\\) \uc73c\ub85c \uac00\uc815\ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc55e\uc11c \uadf8\ub9bc\uc5d0\uc11c \ud45c\ud604\ud588\ub4ef \\(\\mathbf{\\sigma}^{(2)}\\) \uc640 \\(\\mathbf{h}\\) \ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uad00\uacc4\uac00 \uc131\ub9bd\ub429\ub2c8\ub2e4: Op.[20] : \\( \\mathbf{\\sigma}^{(2)} = \\mathbf{W}^{(2)T} \\mathbf{h} + \\mathbf{b}^{(2)} \\) \uc5ec\uae30\uc11c, \uac00\uc911\uce58 \ud589\ub82c \\(\\mathbf{W}^{(2)}\\) \ub294 \ub2e4\uc74c\uacfc \uac19\uc73c\uba70: \\( \\mathbf{W}^{(2)} = \\begin{bmatrix} w_{11} & w_{12} & w_{13} \\\\ w_{21} & w_{22} & w_{23} \\\\ w_{31} & w_{32} & w_{33} \\\\ w_{41} & w_{42} & w_{43} \\\\ w_{51} & w_{52} & w_{53} \\\\ w_{61} & w_{62} & w_{63} \\end{bmatrix} \\) \\(\\mathbf{\\sigma}^{(2)}\\) , \\(\\mathbf{h}\\) , \\(\\mathbf{b}^{(2)}\\) \ub294 \uac01\uac01, \\(\\mathbf{\\sigma}^{(2)} = \\begin{bmatrix} \\sigma_{1}^{(2)} \\\\ \\sigma_{2}^{(2)} \\\\ \\sigma_{3}^{(2)} \\end{bmatrix}\\) \\( \\mathbf{h} = \\begin{bmatrix} h_1 \\\\ h_2 \\\\ h_3 \\\\ h_4 \\\\ h_5 \\\\ h_6 \\end{bmatrix} \\) \\( \\mathbf{b}^{(2)} = \\begin{bmatrix} b_{1}^{(2)} \\\\ b_{2}^{(2)} \\\\ b_{3}^{(2)} \\end{bmatrix} \\) \uc785\ub2c8\ub2e4. \uc704\uc758 \uc2dd\uc744 \uc774\uc6a9\ud558\uc5ec Op.[20]\uc744 \ud480\uc5b4\uc4f0\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: Op.[21] : \\( \\sigma_{1}^{(2)} = w_{11}^{(1)} h_1 + w_{21}^{(1)} h_2 + w_{31}^{(1)} h_3 + w_{41}^{(1)} h_4 + w_{51}^{(1)} h_5 + w_{61}^{(1)} h_6 + b_{1}^{(2)} \\) \\( \\sigma_{2}^{(2)} = w_{12}^{(1)} h_1 + w_{22}^{(1)} h_2 + w_{32}^{(1)} h_3 + w_{42}^{(1)} h_4 + w_{52}^{(1)} h_5 + w_{62}^{(1)} h_6 + b_{2}^{(2)} \\) \\( \\sigma_{3}^{(2)} = w_{13}^{(1)} h_1 + w_{23}^{(1)} h_2 + w_{33}^{(1)} h_3 + w_{43}^{(1)} h_4 + w_{53}^{(1)} h_5 + w_{63}^{(1)} h_6 + b_{3}^{(2)}\\) \ud45c\ud604\uc744 \uac04\ub2e8\ud788 \ud558\uae30\uc704\ud574 \\(\\displaystyle{ \\frac{\\partial L_D}{\\partial \\sigma_{i}^{(2)}} } = \\Delta_i\\) \ub85c \ud558\uba74, \\( \\displaystyle{ \\frac{\\partial L_D}{\\partial w_{11}^{(2)}} = \\frac{\\partial L_D}{\\partial \\sigma_{i}^{(2)}} \\frac{\\partial \\sigma_{i}^{(2)}}{\\partial w_{11}^{(2)}} } = \\frac{\\partial L_D}{\\partial \\sigma_{1}^{(2)}} \\frac{\\partial \\sigma_{1}^{(2)}}{\\partial w_{11}^{(2)}} + \\frac{\\partial L_D}{\\partial \\sigma_{2}^{(2)}} \\frac{\\partial \\sigma_{2}^{(2)}}{\\partial w_{11}^{(2)}} + \\frac{\\partial L_D}{\\partial \\sigma_{3}^{(2)}} \\frac{\\partial \\sigma_{3}^{(2)}}{\\partial w_{11}^{(2)}} = \\Delta_1 h_2 \\) \uacfc \uac19\uc774 \ud45c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7f0 \uc2dd\uc73c\ub85c, \\( \\displaystyle{ \\frac{\\partial L_D}{\\partial w_{21}^{(2)}} = \\Delta_1 h_2 } \\) \u00b7 \u00b7 \u00b7 \\( \\displaystyle{ \\frac{\\partial L_D}{\\partial w_{61}^{(2)}} = \\Delta_1 h_6 } \\) \uc774\uba70, \uc77c\ubc18\uc801\uc73c\ub85c\ub294, Op.[22] \\( \\displaystyle{ \\frac{\\partial L_D}{\\partial w_{jl}^{(2)}} } = \\Delta_l h_j \\) \uc640 \uac19\uc774 \ud45c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c, Op.[23] \\( \\mathbf{dW}^{(2)} = \\displaystyle{ \\frac{\\partial L_D}{\\partial \\mathbf{W}^{(2)}} } = \\displaystyle{\\begin{bmatrix} \\frac{\\partial L_D}{\\partial w_{11}^{(2)}} & \\frac{\\partial L_D}{\\partial w_{12}^{(2)}} & \\frac{\\partial L_D}{\\partial w_{13}^{(2)}} \\\\ \\frac{\\partial L_D}{\\partial w_{21}^{(2)}} & \\frac{\\partial L_D}{\\partial w_{22}^{(2)}} & \\frac{\\partial L_D}{\\partial w_{23}^{(2)}} \\\\ \\vdots \\\\ \\frac{\\partial L_D}{\\partial w_{61}^{(2)}} & \\frac{\\partial L_D}{\\partial w_{62}^{(2)}} & \\frac{\\partial L_D}{\\partial w_{63}^{(2)}} \\end{bmatrix} = \\begin{bmatrix} \\Delta_1 h_1 & \\Delta_2 h_1 & \\Delta_3 h_1 \\\\ \\Delta_1 h_2 & \\Delta_2 h_2 & \\Delta_3 h_2 \\\\ \\vdots \\\\ \\Delta_1 h_6 & \\Delta_2 h_6 & \\Delta_3 h_6 \\end{bmatrix} = \\begin{bmatrix} h_1 \\\\ h_2 \\\\ \\vdots \\\\ h_6 \\end{bmatrix} \\begin{bmatrix} \\Delta_1 & \\Delta_2 & \\Delta_3 \\end{bmatrix} } \\) \uc73c\ub85c \ud45c\ud604\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4. \uc704\uc758 \ud589\ub82c \uc911, \\( \\displaystyle{ \\begin{bmatrix} \\Delta_1 & \\Delta_2 & \\Delta_3 \\end{bmatrix} } = \\) dscores \\( \\displaystyle{ \\begin{bmatrix} h_1 & h_2 & h_3 & h_4 & h_5 & h_6 \\end{bmatrix} } = \\) hidden.layer \ub77c\uace0 \uc9c0\uce6d\ud558\uaca0\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c, Op.[22]\ub294, hidden.layer \\(^{T}\\) dscores \uc758 \ud589\ub82c \uacf1\uc73c\ub85c \ud45c\ud604\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4. \ud55c\ud3b8, \\(\\displaystyle{ \\frac{d L_D}{d \\mathbf{b}^{(2)}} }\\) \uc5ed\uc2dc \ub2e4\uc74c\uacfc \uac19\uc774 \ud45c\ud604\ub429\ub2c8\ub2e4: \\( \\displaystyle{ \\frac{d L_D}{d b_{1}^{(2)}} = \\frac{\\partial L_D}{\\partial \\sigma_{1}^{(2)}} \\frac{\\partial \\sigma_{1}^{(2)}}{\\partial b_{1}^{(2)}} + \\frac{\\partial L_D}{\\partial \\sigma_{2}^{(2)}} \\frac{\\partial \\sigma_{2}^{(2)}}{\\partial b_{1}^{(2)}} + \\frac{\\partial L_D}{\\partial \\sigma_{3}^{(2)}} \\frac{\\partial \\sigma_{3}^{(2)}}{\\partial b_{1}^{(2)}} = \\Delta_1 } \\) \\( \\displaystyle{ \\frac{d L_D}{d b_{2}^{(2)}} = \\frac{\\partial L_D}{\\partial \\sigma_{1}^{(2)}} \\frac{\\partial \\sigma_{1}^{(2)}}{\\partial b_{2}^{(2)}} + \\frac{\\partial L_D}{\\partial \\sigma_{2}^{(2)}} \\frac{\\partial \\sigma_{2}^{(2)}}{\\partial b_{2}^{(2)}} + \\frac{\\partial L_D}{\\partial \\sigma_{3}^{(2)}} \\frac{\\partial \\sigma_{3}^{(2)}}{\\partial b_{2}^{(2)}} = \\Delta_2 } \\) \\( \\displaystyle{ \\frac{d L_D}{d b_{3}^{(2)}} = \\frac{\\partial L_D}{\\partial \\sigma_{1}^{(2)}} \\frac{\\partial \\sigma_{1}^{(2)}}{\\partial b_{3}^{(2)}} + \\frac{\\partial L_D}{\\partial \\sigma_{2}^{(2)}} \\frac{\\partial \\sigma_{2}^{(2)}}{\\partial b_{3}^{(2)}} + \\frac{\\partial L_D}{\\partial \\sigma_{3}^{(2)}} \\frac{\\partial \\sigma_{3}^{(2)}}{\\partial b_{3}^{(2)}} = \\Delta_3 } \\) \uc774 \uc5ed\uc2dc \uac04\ub2e8\ud558\uac8c \ud45c\ud604\ud558\uba74, \\( \\displaystyle{ \\frac{\\partial L_D}{\\partial b_{j}^{(2)}} = \\Delta_j } \\) \uc785\ub2c8\ub2e4. \uc774\uc81c \uc880 \ub354 \uc77c\ubc18\uc801\uc778 \uc2dd\uc73c\ub85c \uc774\ud574\ud558\uae30 \uc704\ud574 2\uac1c\uc758 \ub370\uc774\ud130\uac00 \uc785\ub825\uc73c\ub85c \uacf5\uae09\ub418\ub294 \uacbd\uc6b0, \uc989, \\(N = 2\\) \uc778 \uacbd\uc6b0\ub97c \uac00\uc815\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc6b0\uc120, Notation\uc744 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub418\uba70, Op.[24] : \\( \\sigma_{i,j}^{(2)} \\) , for \\(i\\) -th Input and \\(j\\) -th Class, \\(i=1,2\\) & \\(j=1,2,3\\) Weights \\(\\mathbf{W}^{(2)}\\) \uc640 Biases \\(\\mathbf{b}^{(2)}\\) \ub294 \ub450 \ub370\uc774\ud130\uc5d0 \ub300\ud558\uc5ec \ub3d9\uc77c\ud569\ub2c8\ub2e4. 1\ubc88\uc9f8 \uc785\ub825 \ub370\uc774\ud130\uc5d0 \ub300\ud558\uc5ec: Op.[25] : \\( \\sigma_{1,1}^{(2)} = w_{11}^{(2)} h_{1,1} + w_{21}^{(2)} h_{1,2} + w_{31}^{(2)} h_{1,3} + \\cdots + w_{61}^{(2)} h_{1,6} + b_{1}^{(2)} \\) \\( \\sigma_{1,2}^{(2)} = w_{12}^{(2)} h_{1,1} + w_{22}^{(2)} h_{1,2} + w_{32}^{(2)} h_{1,3} + \\cdots + w_{62}^{(2)} h_{1,6} + b_{2}^{(2)} \\) \\( \\sigma_{1,3}^{(2)} = w_{13}^{(2)} h_{1,1} + w_{23}^{(2)} h_{1,2} + w_{33}^{(2)} h_{1,3} + \\cdots + w_{63}^{(2)} h_{1,6} + b_{3}^{(2)} \\) 2\ubc88\uc9f8 \uc785\ub825 \ub370\uc774\ud130\uc5d0 \ub300\ud558\uc5ec: Op.[26] : \\( \\sigma_{2,1}^{(2)} = w_{11}^{(2)} h_{2,1} + w_{21}^{(2)} h_{2,2} + w_{31}^{(2)} h_{2,3} + \\cdots + w_{61}^{(2)} h_{2,6} + b_{1}^{(2)} \\) \\( \\sigma_{2,2}^{(2)} = w_{12}^{(2)} h_{2,1} + w_{22}^{(2)} h_{2,2} + w_{32}^{(2)} h_{2,3} + \\cdots + w_{62}^{(2)} h_{2,6} + b_{2}^{(2)} \\) \\( \\sigma_{2,3}^{(2)} = w_{13}^{(2)} h_{2,1} + w_{23}^{(2)} h_{2,2} + w_{33}^{(2)} h_{2,3} + \\cdots + w_{63}^{(2)} h_{2,6} + b_{3}^{(2)} \\) \ub610\ub294 \uac04\ub2e8\ud55c \ud589\ub82c\uc2dd\uc73c\ub85c, \\( \\mathbf{\\sigma}^{(2)} = \\mathbf{h}^{T} \\mathbf{W}^{(2)} + \\mathbf{b}^{(2)} \\) \uacfc \uac19\uc774 \ud45c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc11c, \\( \\mathbf{h} = \\displaystyle{ \\begin{bmatrix} h_{1,1} & h_{2,1} \\\\ h_{1,2} & h_{2,2} \\\\ h_{1,3} & h_{2,3} \\\\ h_{1,4} & h_{2,4} \\\\ h_{1,5} & h_{2,5} \\\\ h_{1,6} & h_{2,6} \\end{bmatrix} } \\) \\( \\mathbf{W}^{(2)} = \\displaystyle{ \\begin{bmatrix} w_{11}^{(2)} & w_{12}^{(2)} && w_{13}^{(2)} \\\\ w_{21}^{(2)} & w_{22}^{(2)} && w_{23}^{(2)} \\\\ w_{31}^{(2)} & w_{32}^{(2)} && w_{33}^{(2)} \\\\ w_{41}^{(2)} & w_{42}^{(2)} && w_{43}^{(2)} \\\\ w_{51}^{(2)} & w_{52}^{(2)} && w_{53}^{(2)} \\\\ w_{61}^{(2)} & w_{62}^{(2)} && w_{63}^{(2)} \\end{bmatrix} } \\) \\( \\mathbf{\\sigma}^{(2)} = \\displaystyle{ \\begin{bmatrix} \\sigma_{11}^{(2)} & \\sigma_{12}^{(2)} & \\sigma_{13}^{(2)} \\\\ \\sigma_{21}^{(2)} & \\sigma_{22}^{(2)} & \\sigma_{23}^{(2)} \\end{bmatrix} } \\) \uc785\ub2c8\ub2e4. \uc704\uc758 \uc2dd\uc744 \uc774\uc6a9\ud558\uc5ec 2\uac1c\uc758 \uc785\ub825 \ub370\uc774\ud130\uac00 \uc788\ub294 \uacbd\uc6b0, Op.[23]\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \ud45c\ud604\ub429\ub2c8\ub2e4: dW \\(^{(2)}\\) = hidden.layer \\(^{T}\\) \\(\\cdot\\) dscores \uc5ec\uae30\uc11c, hidden.layer = \\( \\displaystyle{ \\begin{bmatrix} h_{11} & h_{12} & h_{13} & h_{14} & h_{15} & h_{16} \\\\ h_{21} & h_{22} & h_{23} & h_{24} & h_{25} & h_{26} \\end{bmatrix} } \\) dscores = \\( \\displaystyle{ \\begin{bmatrix} \\Delta_{1,1} & \\Delta_{1,2} & \\Delta_{1,3} \\\\ \\Delta_{2,1} & \\Delta_{2,2} & \\Delta_{2,3} \\end{bmatrix} } \\) \uc785\ub2c8\ub2e4. \ud604\ud3b8, Op.[25], [26]\uc73c\ub85c\ubd80\ud130, \\( \\displaystyle{ \\frac{d L_D}{d b_{1}^{(2)}} = \\frac{\\partial L_D}{\\partial \\sigma_{1,1}^{(2)}} \\frac{\\partial \\sigma_{1,1}^{(2)}}{\\partial b_{1}^{(2)}} + \\frac{\\partial L_D}{\\partial \\sigma_{1,2}^{(2)}} \\frac{\\partial \\sigma_{1,2}^{(2)}}{\\partial b_{1}^{(2)}} + \\frac{\\partial L_D}{\\partial \\sigma_{1,3}^{(2)}} \\frac{\\partial \\sigma_{1,3}^{(2)}}{\\partial b_{1}^{(2)}} + \\frac{\\partial L_D}{\\partial \\sigma_{2,1}^{(2)}} \\frac{\\partial \\sigma_{2,1}^{(2)}}{\\partial b_{1}^{(2)}} + \\frac{\\partial L_D}{\\partial \\sigma_{2,2}^{(2)}} \\frac{\\partial \\sigma_{2,2}^{(2)}}{\\partial b_{1}^{(2)}} + \\frac{\\partial L_D}{\\partial \\sigma_{2,3}^{(2)}} \\frac{\\partial \\sigma_{21,3}^{(2)}}{\\partial b_{1}^{(2)}} } \\) \\( \\displaystyle{ = \\frac{\\partial L_D}{\\partial \\sigma_{1,1}^{(2)}} (1) + \\frac{\\partial L_D}{\\partial \\sigma_{1,2}^{(2)}} (0) + \\frac{\\partial L_D}{\\partial \\sigma_{1,3}^{(2)}} (0) + \\frac{\\partial L_D}{\\partial \\sigma_{2,1}^{(2)}} (1) + \\frac{\\partial L_D}{\\partial \\sigma_{2,2}^{(2)}} (0) + \\frac{\\partial L_D}{\\partial \\sigma_{2,3}^{(2)}} (0) } \\) \\( \\displaystyle{ = \\frac{\\partial L_D}{\\partial \\sigma_{1,1}^{(2)}} + \\frac{\\partial L_D}{\\partial \\sigma_{2,1}^{(2)}} } \\) \\( = \\Delta_{1,1} + \\Delta_{2,1} \\) \ub97c \uad6c\ud560 \uc218 \uc788\uc73c\uba70, \ub3d9\uc77c\ud55c \ubc29\uc2dd\uc73c\ub85c, \\( \\displaystyle{ \\frac{d L_D}{d b_{2}^{(2)}} = \\Delta_{1,2} + \\Delta_{2,2}} \\) \ubc0f \\( \\displaystyle{ \\frac{d L_D}{d b_{3}^{(2)}} = \\Delta_{1,3} + \\Delta_{2,3}} \\) \ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc989, Data Loss \\(L_D\\) \uc758 \\(\\mathbf{b}^{(2)}\\) \uc5d0 \ub300\ud55c \ubbf8\ubd84\uc740 \ud589\ub82c dscores\uc758 \uc5f4(Column)\uc744 \uac01\uac01 \ub354\ud55c \uac83\uc784\uc744 \uc54c \uc218 \uc788\uc73c\uba70, Op.[27] : \\( \\displaystyle{ \\frac{d L_D}{d b_{i}^{(2)}} } = \\sum_{j=1}^{N}{\\Delta_{j,i}} \\) \uacfc \uac19\uc774 \uc77c\ubc18\uc801\uc778 \uc2dd\uc73c\ub85c \ud45c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubb3c\ub860 \\(N\\) \uc740 \uc785\ub825 \ub370\uc774\ud130\uc758 \uac1c\uc218\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc774\uc81c \uc77c\ubc18\uc801\uc778 \uc2dd\uc744 \uc5bb\uae30 \uc704\ud574 \uc785\ub825 \ub370\uc774\ud130\uc758 \uac1c\uc218\uac00 \\(N\\) \uac1c\ub85c \ud655\uc7a5\ud558\uba74, Op.[28] : dW \\(^{(2)}\\) = hidden.layer \\(^{T}\\) \\(\\cdot\\) dscores db \\(^{(2)}\\) = ColumnSums(dscores) where hidden.layer = \\(h_{i,k}\\) , \\(i=1,...,N\\) , \\(k=1,...,H\\) dscores = \\(\\Delta_{k,j}\\) , \\(k=1,...,N\\) , \\(j=1,...,K\\) \\( \\Delta_{k,j} = \\displaystyle{ \\frac{d L_D}{d \\sigma_{k,j}^{(2)}} } \\) \ub85c \uc815\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uc73c\ub85c \uad6c\ud560 \uc2dd\uc740 Hidden Layer \\(\\mathbf{h}\\) \uc5d0 \ub300\ud55c Data Loss \\(L_D\\) \uc758 \ubbf8\ubd84\uc2dd, \uc989, \uc774\uba70, \uc774 \uc2dd \uc5ed\uc2dc Chain Rule\uc5d0 \uc758\ud574, \\( \\displaystyle{ \\frac{\\partial L_D}{\\partial q_y} \\frac{\\partial q_y}{\\partial e_k} \\frac{\\partial e_k}{\\partial \\sigma_{i}^{(2)}} \\frac{\\partial \\sigma_{i}^{(2)}}{\\partial h_j} } \\) \uc778\ub370, \\( \\displaystyle{ \\frac{\\partial L_D}{\\partial q_y} \\frac{\\partial q_y}{\\partial e_k} \\frac{\\partial e_k}{\\partial \\sigma_{i}^{(2)}} } \\) = dscores \uc774\uba70, Op.[21]\uc758 \uc2dd\uc744 \ucc38\uace0\ud558\uc5ec \uc720\ub3c4\ud574 \ubcf4\uba74, \\( \\displaystyle{ \\frac{\\partial \\sigma_{i}^{(2)}}{\\partial h_j} = w_{ji}^{(2)} = \\mathbf{W}^{(2)T} } \\) \uc784\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc989, \\(N\\) \uac1c\uc758 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \uc77c\ubc18\uc801\uc778 \uc2dd\uc73c\ub85c \ud45c\ud604\ud558\uba74, Op.[29] : dhidden = dscores \\(\\cdot\\) \\(\\mathbf{W}^{(2)T}\\) = \\( \\displaystyle{ \\begin{bmatrix} d_{1,1} & d_{1,2} & \\cdots & d_{1,K} \\\\ d_{2,1} & d_{2,2} & \\cdots & d_{2,K} \\\\ \\vdots & \\vdots & \\vdots & \\vdots \\\\ d_{N,1} & d_{N,2} & \\cdots & d_{N,K} \\end{bmatrix} \\begin{bmatrix} w_{1,1}^{(2)} & w_{2,1}^{(2)} & \\cdots & w_{K,1}^{(2)} \\\\ w_{1,2}^{(2)} & w_{2,2}^{(2)} & \\cdots & w_{K,2}^{(2)} \\\\ \\vdots & \\vdots & \\vdots & \\vdots \\\\ w_{1,H}^{(2)} & w_{2,H}^{(2)} & \\cdots & w_{K,H}^{(2)} \\end{bmatrix} } \\) \uacfc \uac19\uc2b5\ub2c8\ub2e4. \uc774\uc81c Input\uc5d0\uc11c Hidden Layer\uae4c\uc9c0 \uc774\ub974\ub294 \uc804\ubc18\ubd80\ub97c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc544\uc2dc\ub294 \ubc14\uc640 \uac19\uc774, \\(\\mathrm{ReLU}(x) = \\mathrm{max}(0,x)\\) \ub294 \\(x \\le 0\\) \uc5d0 \ub300\ud574\uc11c\ub294 0\uc744, \\(x > 0\\) \uc5d0 \ub300\ud574\uc11c\ub294 \uc785\ub825\uac12\uc744 \uadf8\ub300\ub85c \ucd9c\ub825\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c, ReLU\uc758 \ubbf8\ubd84\uac12\uc740, \\( \\displaystyle{ \\frac{d ReLU(x)}{dx} = \\begin{cases} 1, & x > 0 \\\\ 0, & x \\le 0 \\end{cases} } \\) \uacfc \uac19\uc2b5\ub2c8\ub2e4. \\( h_i = \\mathrm{ReLU}(\\sigma_{i}^{(1)}) \\) \uc774\ubbc0\ub85c, \uc774\ub97c \\(\\sigma_{i}^{(1)}\\) \uc5d0 \ub300\ud558\uc5ec \ud3b8\ubbf8\ubd84\ud558\uba74, Op.[30] : \\( \\displaystyle{\\frac{\\partial h_i}{\\partial \\sigma_{l}^{(1)}}} = \\begin{cases} 1, & h_i > 0 \\\\ 0, & h_i \\le 0 \\end{cases} \\) \uacfc \uac19\uc2b5\ub2c8\ub2e4. Op.[29]\uacfc [30]\uc73c\ub85c\ubd80\ud130 Chain Rule\uc744 \uc801\uc6a9\ud558\uc5ec, Op.[31] : \\( \\displaystyle{ \\frac{dL_D}{d \\sigma_{l}^{(1)}} = \\underbrace{ \\frac{\\partial L_D}{\\partial q_y} \\frac{\\partial q_y}{\\partial e_k} \\frac{\\partial e_k}{\\partial \\sigma_{i}^{(2)}} \\frac{\\partial \\sigma_{i}^{(2)}}{\\partial h_j} }_{\\mathrm{= dhidden}} \\underbrace{ \\frac{\\partial h_j}{\\partial \\sigma_{l}^{(1)}} }_{ = \\begin{cases} 1 & \\mathrm{if} \\; h_j > 0 \\\\ 0 & \\mathrm{otherwise} \\end{cases} } } = \\begin{cases} \\mathrm{dhidden} & \\mathrm{if} \\; h_j > 0 \\\\ 0 & \\mathrm{if} \\; h_j \\le 0 \\end{cases} \\) \ub97c \uc5bb\uc744 \uc218 \uc788\ub294\ub370, 5. Implementation \uc5d0\uc11c \ub2e4\uc2dc \uc124\uba85\ub4dc\ub9ac\uaca0\uc9c0\ub9cc Op.[29]~[31]\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uac04\ub7b5\ud558\uac8c \ucf54\ub4dc\ub85c \ud45c\ud604\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4: dhidden <- dscores %*% base :: t ( W2 ) dhidden [ hidden.layer <= 0 ] <- 0 \uc704\uc758 \ucf54\ub4dc\uc758 Line 2\ub294 hidden.layer \uc758 Element\uac00 0\uacfc \uac19\uac70\ub098 0 \ubcf4\ub2e4 \uc791\uc744 \ub54c \ub3d9\uc77c\ud55c \ud589\uacfc \uc5f4\uc5d0 \ud574\ub2f9\ud558\ub294 dhidden \uc758 Element\ub97c 0\uc73c\ub85c \ubcc0\uacbd\ud55c\ub2e4\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4. Op.[28]\uc744 \uc5bb\ub294 \ubc29\uc2dd\uacfc \ub3d9\uc77c\ud55c \ubc29\uc2dd\uc73c\ub85c, Op.[32] : dW \\(^{(1)}\\) = X \\(^{T}\\) \\(\\cdot\\) dhidden , db \\(^{(1)}\\) = ColumnSums(dhidden) \uc744 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uc81c \\(\\mathbf{W}^{(1)}\\) , \\(\\mathbf{b}^{(1)}\\) , \\(\\mathbf{W}^{(2)}\\) , \\(\\mathbf{b}^{(2)}\\) \uc5d0 \ub300\ud55c \\(L_D\\) \uc758 \ubbf8\ubd84\uc2dd\uc744 \ubaa8\ub450 \uc5bb\uc5c8\uc73c\ub2c8, \uc774\ub4e4\uc5d0 \ub300\ud55c \uc5c5\ub370\uc774\ud2b8 \uc2dd \\(\\theta \\leftarrow \\theta - \\alpha \\nabla_{\\theta}{L}\\) (\uc5ec\uae30\uc11c, \\(\\theta\\) \ub294 \ubaa8\ub378 \ud30c\ub77c\ubbf8\ud130\uc774\uba70 \\(\\alpha\\) \ub294 \ud559\uc2b5\ub960(Learning Rate)\ub97c \uc758\ubbf8\ud568)\uc744 \uc774\uc6a9\ud558\uc5ec \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7f0\ub370, \ud55c \uac00\uc9c0\ub97c \ube60\ub728\ub838\uc2b5\ub2c8\ub2e4. \uadf8\uac83\uc740 Op.[9]\uc5d0\uc11c \uc5b8\uae09\ud558\uc600\ub358 Regularization Loss( \\(L_R\\) )\uc5d0 \ub300\ud55c \uac01 \ubaa8\ub378 \ud30c\ub77c\ubbf8\ud130\uc758 \ubbf8\ubd84\uac12\ub4e4\uc785\ub2c8\ub2e4. \\(L_D\\) \uc740 Weights \uac12\ub4e4\uc758 \uc81c\uacf1\uc758 \ud569\uc73c\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc73c\ubbc0\ub85c \ub450\ub9d0\ud560 \uac83\ub3c4 \uc5c6\uc774 Bias\uc5d0 \ub300\ud55c \ubbf8\ubd84\uac12\uc740 \ubaa8\ub450 0\uc77c \uac83\uc785\ub2c8\ub2e4. \uac00\ub839, \\(\\displaystyle{ \\frac{\\partial L_R}{\\partial w_{i,j}} }\\) \uc744 \uad6c\ud55c\ub2e4\uace0 \ud558\uba74, \\(L_R\\) \uc740 \uac01 Weight\uc758 \uc81c\uacf1\uc744 \ud569\ud55c \uac83\uc774\ubbc0\ub85c(\ubb3c\ub860 \\(\\frac{1}{2}\\lambda\\) \uac00 \uacf1\ud574\uc84c\uc2b5\ub2c8\ub2e4) \ubbf8\ubd84\ud558\uace0\uc790 \ud558\ub294 \ub300\uc0c1 \uc678\uc5d0\ub294 \ubaa8\ub450 0\uc774 \ub420 \uac83\uc785\ub2c8\ub2e4. \uc989, \\(\\displaystyle{ \\frac{\\partial L_R}{\\partial w_{i,j}} } = w_{i,j}\\) \uc785\ub2c8\ub2e4. \ub530\ub77c\uc11c, \uc55e\uc11c \uad6c\ud588\ub358 \\(\\mathbf{dW}^{(1)}\\) \uacfc \\(\\mathbf{dW}^{(2)}\\) \uc5d0 Regularization Loss\uc758 \ubbf8\ubd84\uac12\uc744 \ubc18\uc601\ud558\uba74, Op.[33] : dW \\(^{(1)}\\) \\(\\leftarrow\\) dW \\(^{(1)}\\) + \\(\\lambda\\) * W \\(^{(1)}\\) dW \\(^{(2)}\\) \\(\\leftarrow\\) dW \\(^{(2)}\\) + \\(\\lambda\\) * W \\(^{(2)}\\) \uc640 \uac19\uc774 \uc5bb\uc744 \uc218 \uc788\uc73c\uba70, \ucd5c\uc885\uc801\uc73c\ub85c \ubaa8\ub378 \ud30c\ub77c\ubbf8\ud130\ub4e4\uc758 \uc5c5\ub370\uc774\ud2b8 \uc2dd\uc740, Op.[34] W \\(^{(1)}\\) \\(\\leftarrow\\) W \\(^{(1)}\\) - \\(\\alpha\\) * dW \\(^{(1)}\\) , b \\(^{(1)}\\) \\(\\leftarrow\\) b \\(^{(1)}\\) - \\(\\alpha\\) * db \\(^{(1)}\\) W \\(^{(2)}\\) \\(\\leftarrow\\) W \\(^{(2)}\\) - \\(\\alpha\\) * dW \\(^{(2)}\\) , b \\(^{(2)}\\) \\(\\leftarrow\\) b \\(^{(2)}\\) - \\(\\alpha\\) * db \\(^{(2)}\\) \uacfc \uac19\uc2b5\ub2c8\ub2e4. \uc774\ub85c\uc368 Backprogation\uc5d0 \ub300\ud55c \uc2dd\uc744 \ubaa8\ub450 \uad6c\ud558\uc600\uace0, \uc774\ub4e4\uc744 \uc774\uc6a9\ud558\uc5ec \uc77c\uc815 \uc870\uac74\uc774 \ub9cc\uc871\ub420 \ub54c\uae4c\uc9c0 \ubc18\ubcf5\ud558\uc5ec \ubaa8\ub378 \ud30c\ub77c\ubbf8\ud130\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud569\ub2c8\ub2e4. \uc9c0\uae08\uae4c\uc9c0\uc758 \uacfc\uc815\uc744 \uac04\ub2e8\ud558\uac8c \uc218\uc2dd\uc73c\ub85c \uc815\ub9ac\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4(\ucca8\uc790 \ud45c\ud604\uc740 \uc55e\uc758 \uacfc\uc815\uacfc \uc77c\uce58\ud558\uc9c0 \uc54a\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4): Op.[BackwardPass] : \\(N\\) \uac1c\uc758 Dataset, \\(D\\) \uac1c\uc758 Input Dimensionality, \\(H\\) \uac1c\uc758 \ub274\ub7f0\uc744 \uac16\ub294 1\uac1c\uc758 Hidden Layer, \\(K\\) \uac1c\uc758 Output Class\ub97c \uac16\ub294 Multi-layer Perceptron\uc5d0 \ub300\ud558\uc5ec, \\( \\displaystyle{ \\frac{\\partial L_D}{\\partial w_{kj}^{(i)}} = w_{kj}^{(i)} } \\) , \\( i \\in \\begin{Bmatrix} 1,2 \\end{Bmatrix} \\) , \\( \\begin{cases} \\mathrm{for} \\; i=1, \\; k=1,...,D, \\; j=1,...,H \\\\ \\mathrm{for} \\; i=2, \\; k=1,...,H, \\; j=1,...,K \\end{cases} \\) \\( \\displaystyle{ \\frac{\\partial L_R}{\\partial w_{kj}^{(i)}} = w_{kj}^{(i)} } \\) , \\( \\begin{cases} \\mathrm{for} \\; i=1, \\; k=1,...,D, \\; j=1,...,H \\\\ \\mathrm{for} \\; i=2, \\; k=1,...,H, \\; j=1,...,K \\end{cases} \\) dscores[N\u00d7K] = \\( q_{i,j} - \\delta_{jy_{i}} \\) , \\( i=1,...,N, \\; j=1,...,K \\) hidden.layer[N\u00d7H] = \\(h_{i,j}\\) , \\(i=1,...,N, \\; j=1,...,H\\) dW \\(^{(2)}\\) = \\( \\displaystyle{ h_{j,i} \\frac{\\partial L_D}{\\partial \\sigma_{i,k}^{(2)}} } \\) + \\(\\lambda\\) \\(w_{jk}^{(2)}\\) = hidden.layer \\(^{T}\\) \\(\\cdot\\) dscores + \\(\\lambda\\) \\(\\cdot\\) W \\(^{(2)}\\) , ( \\( i=1,...,N, \\; j=1,...,H, \\; k=1,...,K \\) ) db \\(^{(2)}\\) = \\( \\displaystyle{ \\sum_{i=1}^{N}{(q_{i,j} - \\delta_{jy_{i}} )} } \\) = ColumnSums(dscores) dhidden[N\u00d7H] = \\( \\displaystyle{ \\frac{\\partial L_D}{\\partial \\sigma_{i,j}^{(2)} } \\frac{\\partial \\sigma_{i,j}^{(2)} }{\\partial h_{i,k} } \\frac{\\partial h_{i,k} }{\\partial \\sigma_{i,l}^{(1)} } } \\) = \\( \\displaystyle{ \\begin{cases} \\frac{\\partial L_D}{\\partial \\sigma_{i,j}^{(2)} } \\frac{\\partial \\sigma_{i,j}^{(2)} }{\\partial h_{i,k} } & \\mathrm{if} \\; h_{i,k} > 0 \\\\ 0 & \\mathrm{if} \\; h_{i,k} \\le 0 \\end{cases} } \\) dW \\(^{(1)}\\) = X \\(^{T}\\) \\(\\cdot\\) dhidden + \\(\\lambda\\) \\(\\cdot\\) W \\(^{(1)}\\) db \\(^{(1)}\\) = ColumnSums(dhidden) [UPDATE of MODEL PARAMETERS] W \\(^{(2)}\\) \\(\\leftarrow\\) W \\(^{(2)}\\) - \\(\\alpha\\) \\(\\cdot\\) dW \\(^{(2)}\\) b \\(^{(2)}\\) \\(\\leftarrow\\) b \\(^{(2)}\\) - \\(\\alpha\\) \\(\\cdot\\) db \\(^{(2)}\\) W \\(^{(1)}\\) \\(\\leftarrow\\) W \\(^{(1)}\\) - \\(\\alpha\\) \\(\\cdot\\) dW \\(^{(1)}\\) b \\(^{(1)}\\) \\(\\leftarrow\\) b \\(^{(1)}\\) - \\(\\alpha\\) \\(\\cdot\\) db \\(^{(1)}\\)","title":"4. Backward Pass"},{"location":"posts/deep-learning/2017-08-04-Deep-Learning-from-Scratch-Part-02/#5-implementation","text":"\uc774\uc81c \uad6c\ud604\ub41c \ucf54\ub4dc\ub97c \ubd84\uc11d\ud558\uba74\uc154 \uc55e\uc11c \uc720\ub3c4\ud55c \uc2dd\uc774 \ucf54\ub4dc \uc0c1\uc5d0\uc11c \uc5b4\ub5bb\uac8c \uad6c\ud604\ub418\uc5b4 \uc788\ub294\uc9c0 \uc0b4\ud3b4\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc6b0\uc120, \uc804\uccb4 \ucf54\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 3\uac1c\uc758 \uc18c\uc2a4\ud30c\uc77c\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4 (\uc18c\uc2a4\ud30c\uc77c\uc758 Author\ub294 Peng Zhao( patric.zhao@gmail.com )\uc774\uba70, \uc6d0\ub798 1\uac1c\uc758 \uc18c\uc2a4\uc600\uc73c\ub098, \uae30\ub2a5\uc744 \ubd84\ub9ac\ud558\uc5ec \uc81c\uac00 3\uac1c\ub85c \ub098\ub208 \uac83\uc785\ub2c8\ub2e4): main.R train.dnn.R predict.dnn.R","title":"5. Implementation"},{"location":"posts/deep-learning/2017-08-04-Deep-Learning-from-Scratch-Part-02/#51-traindnn","text":"\uc18c\uc2a4 \ud30c\uc77c\ub4e4 \uc911 \uac00\uc7a5 \ud575\uc2ec\uc774 \ub418\ub294 train.dnn.R \uc744 \uc0b4\ud3b4\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. train.dnn.R \uc740 \ub2e8 \ud558\ub098\uc758 \ud568\uc218 train.dnn() \uc744 \uac16\ub294 \uc18c\uc2a4\ud30c\uc77c\uc785\ub2c8\ub2e4. \ud30c\uc77c\uc758 \ud504\ub85c\ud1a0\ud0c0\uc785\uc744 \ubcf4\uba74, train.dnn <- function ( x , y , traindata = data , testdata = NULL , model = NULL , # set hidden layers and neurons # currently, only support 1 hidden layer hidden = base :: c ( 6 ), # max iteration steps maxit = 2000 , # delta loss abstol = 1e-2 , # learning rate lr = 1e-2 , # regularization rate reg = 1e-3 , # show results every 'display' step display = 100 , random.seed = 1 ) \uc778\ub370, \uac01\uac01\uc758 \ud30c\ub77c\ubbf8\ud130\uc5d0 \ub300\ud55c \uc124\uba85\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: x : \uc785\ub825 \ub370\uc774\ud130(Input Features)\uc758 Column Index\uc785\ub2c8\ub2e4. main.R \uc744 \ubcf4\uba74 x = 1:4 \ub97c \ud30c\ub77c\ubbf8\ud130\ub85c \uc804\ub2ec\ud558\ub294\ub370, \uc774\ub294 \uccab\ubc88\uc9f8\ubd80\ud130 \ub124\ubc88\uc9f8\uae4c\uc9c0\uc758 Column(Sepal.Length ~ Petal.Width)\uc744 Input Features\ub85c \uc815\ud55c\ub2e4\ub294 \ub73b\uc785\ub2c8\ub2e4. y : \ucd9c\ub825 \ub370\uc774\ud130(Output Classes)\uc758 Column Index\uc785\ub2c8\ub2e4. main.R \uc744 \ubcf4\uba74 y = 5 \ub97c \ud30c\ub77c\ubbf8\ud130\ub85c \uc804\ub2ec\ud558\ub294\ub370, \uc774\ub294 \ub2e4\uc12f\ubc88\uc9f8 Column(Species)\uc744 Output Class\ub85c \uc815\ud55c\ub2e4\ub294 \ub73b\uc785\ub2c8\ub2e4. traindata : \ud559\uc2b5\uc744 \uc2dc\ud0ac \ub370\uc774\ud130\uc14b\uc785\ub2c8\ub2e4. testdata : \ud559\uc2b5\uc744 \ud1b5\ud574 \uc0dd\uc131\ud55c \uc608\uce21 \ubaa8\ub378\uc744 \ud14c\uc2a4\ud2b8\ud558\uae30 \uc704\ud55c \ub370\uc774\ud130\uc14b\uc785\ub2c8\ub2e4. model : \ud559\uc2b5\uc744 \ud1b5\ud574 \uc0dd\uc131\ud55c \uc608\uce21 \ubaa8\ub378\uc774\uba70, \ud559\uc2b5 \uc2dc\uc5d0\ub294 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc73c\uba70, \uc608\uce21 \uc2dc\uc5d0 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uc989, predict.dnn() \ud568\uc218\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \ud30c\ub77c\ubbf8\ud130\uc785\ub2c8\ub2e4. hidden : Hidden Layer \ub0b4 \ub178\ub4dc\uc758 \uac1c\uc218\uc774\uba70, 6\uac1c\ub85c \uc124\uc815\ud558\uc600\uc2b5\ub2c8\ub2e4. maxit : \ud559\uc2b5\uc744 \uc2dc\ud0a4\ub294 \ucd5c\ub300 \ubc18\ubcf5 \uacc4\uc0b0 \ud69f\uc218\uc774\uba70, \uae30\ubcf8\uac12\uc740 2000\uc73c\ub85c, main.R \uc5d0\uc11c \uc804\ub2ec\ud558\ub294 \uac12\uc740 3000\uc785\ub2c8\ub2e4. abstol : maxit \uc678\uc5d0 \ud559\uc2b5\uc744 \uc885\ub8cc\uc2dc\ud0a4\ub294 \uc870\uac74\uc73c\ub85c, \uacc4\uc0b0\ub41c Loss\uac00 \uc774 \uac12\ubcf4\ub2e4 \uac19\uac70\ub098 \uc791\uc73c\uba74 \ud559\uc2b5\uc744 \uc885\ub8cc\uc2dc\ud0b5\ub2c8\ub2e4. \uae30\ubcf8\uac12\uc740 \\(10^{-2}\\) \uc785\ub2c8\ub2e4. lr : \ud559\uc2b5\ub960(Learning Rate)\uc785\ub2c8\ub2e4. \uae30\ubcf8\uac12\uc740 \\(10^{-2}\\) \uc785\ub2c8\ub2e4. reg : Regularization\uc758 Hyperparameter( \\(\\lambda\\) )\uc774\uba70, \uae30\ubcf8\uac12\uc740 \\(10^{-3}\\) \uc785\ub2c8\ub2e4. display : \ud559\uc2b5\ud558\ub294 \uacfc\uc815 \uc911 \uc911\uac04 \uacb0\uacfc\ub97c \ucd9c\ub825\ud558\ub294 Step\uc785\ub2c8\ub2e4. random.seed : Weights\uc640 Biases \ucd08\uae30\ud654 \uc2dc \ub09c\uc218\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c Random Seed\uc785\ub2c8\ub2e4.","title":"5.1. train.dnn() \ud504\ub85c\ud1a0\ud0c0\uc785"},{"location":"posts/deep-learning/2017-08-04-Deep-Learning-from-Scratch-Part-02/#52","text":"\ub09c\uc218\ub97c \uc774\uc6a9\ud55c Weights \ubc0f Biases \ucd08\uae30\ud654\ub97c \uc704\ud574 \ud30c\ub77c\ubbf8\ud130\ub85c \uc804\ub2ec\ubc1b\uc740 random.seed \ub85c Random Seed\ub97c \uc124\uc815\ud569\ub2c8\ub2e4. # to make the case reproducible. base :: set.seed ( random.seed ) \ud559\uc2b5\uc2dc\ud0ac \ub370\uc774\ud130(traindata)\uc758 \uc804\uccb4 \uac1c\uc218\ub97c \ubcc0\uc218 N \uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4(\ub370\uc774\ud130 \uac1c\uc218\ub294 75\uac1c\uc785\ub2c8\ub2e4). # total number of training set N <- base :: nrow ( traindata ) Data Frame \ud615\uc2dd\uc73c\ub85c \uc785\ub825\ubc1b\uc740 \ud30c\ub77c\ubbf8\ud130 traindata \uc5d0\uc11c Input Features\uc5d0 \ud574\ub2f9\ud558\ub294 Columns(1~4)\ub97c \ucde8\ud558\ub418 Features\uc758 \uc774\ub984\uc740 \ud544\uc694\uc5c6\uc73c\ubbc0\ub85c \uc774\ub97c \uc81c\uac70\ud569\ub2c8\ub2e4: # extract the data and label # don't need atribute X <- base :: unname ( base :: data.matrix ( traindata [, x ])) Output Class\uc5d0 \ud574\ub2f9\ud558\ub294 Column(5)\uc744 \ucde8\ud558\uc5ec \ubcc0\uc218 Y\uc5d0 \uc800 # correct categories represented by integer Y <- traindata [, y ] Y \uc5d0 \uc800\uc7a5\ub41c \ud615\ud0dc\ub294 nominal value\uc778 \uacbd\uc6b0, \uc774\ub97c \uc815\uc218 \ud615\ud0dc\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4. \uc989, Y\uc5d0\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc138 \uac1c\uc758 \ud074\ub798\uc2a4 \uc774\ub984\uc774 \uc800\uc7a5\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. > Y [ 1 ] setosa setosa setosa setosa setosa setosa setosa setosa setosa setosa setosa setosa setosa [ 14 ] setosa setosa setosa setosa setosa setosa setosa setosa setosa setosa setosa setosa versicolor [ 27 ] versicolor versicolor versicolor versicolor versicolor versicolor versicolor versicolor versicolor versicolor versicolor versicolor versicolor [ 40 ] versicolor versicolor versicolor versicolor versicolor versicolor versicolor versicolor versicolor versicolor versicolor virginica virginica [ 53 ] virginica virginica virginica virginica virginica virginica virginica virginica virginica virginica virginica virginica virginica [ 66 ] virginica virginica virginica virginica virginica virginica virginica virginica virginica virginica Levels : setosa versicolor virginica if ( base :: is.factor ( Y )) { Y <- base :: as.integer ( Y ) } \ub2e4\uc74c \ucf54\ub4dc\ub97c \uc0b4\ud3b4\ubcf4\uc2dc\uba74, # create index for both row and col Y.len <- base :: length ( base :: unique ( Y )) Y.set <- base :: sort ( base :: unique ( Y )) Y.index <- base :: cbind ( 1 : N , base :: match ( Y , Y.set )) Line 2 \uc5d0\uc11c base::unique() \ud568\uc218\ub97c \uc774\uc6a9\ud558\uc5ec \uc911\ubcf5\ub418\uc9c0 \uc54a\uc740 \uc5d8\ub9ac\uba3c\ud2b8\ub4e4(Elements)\uc744 \ubf51\uc544\ub0b4\uace0 \uc774\ub4e4\uc758 \uac1c\uc218\ub97c \uad6c\ud558\uc5ec Y.len \uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4. Line 3 \uc5d0\uc11c\ub294 \uc774 \uc5d8\ub9ac\uba3c\ud2b8\ub4e4\uc744 \uc624\ub984\ucc28\uc21c(Ascending Order)\uc73c\ub85c \uc815\ub82c\ud55c \uacb0\uacfc\ub97c Y.set \uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4. Line 4 \uc5d0\uc11c base::match() \ud568\uc218\ub97c \uc774\uc6a9\ud558\uc5ec Y\uc758 \uac01 \uc5d8\ub9ac\uba3c\ud2b8\uac00 Y.set \uc758 \uc5d8\ub9ac\uba3c\ud2b8\uc640 \uc77c\uce58\ud558\ub294 \uc704\uce58\ub97c \ucc3e\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \uc608\ub97c \ud1b5\ud574 base::match() \ud568\uc218\ub97c \uc124\uba85\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. > base :: match ( base :: c ( 4 , 3 , 4 , 3 , 2 , 3 , 2 , 3 , 1 , 1 , 3 , 4 , 4 ), base :: c ( 1 , 3 , 2 )) [ 1 ] NA 2 NA 2 3 2 3 2 1 1 2 NA NA \uc704\uc758 \ucf54\ub4dc\uc5d0\uc11c base::match() \ud568\uc218\uc758 \uccab\ubc88\uc9f8 \ud30c\ub77c\ubbf8\ud130\uc758 \uccab\ubc88\uc9f8 \uc5d8\ub9ac\uba3c\ud2b8 4\ub294 \ub450\ubc88\uc9f8 \ud30c\ub77c\ubbf8\ud130\uc758 \uc77c\uce58\ud558\ub294 \uc5d8\ub9ac\uba3c\ud2b8\uac00 \uc5c6\uc73c\ubbc0\ub85c \uacb0\uacfc\ub294 NA \uc785\ub2c8\ub2e4. \uccab\ubc88\uc9f8 \ud30c\ub77c\ubbf8\ud130\uc758 \ub450\ubc88\uc9f8 \uc5d8\ub9ac\uba3c\ud2b8 3\uc740 \ub450\ubc88\uc9f8 \ud30c\ub77c\ubbf8\ud130\uc5d0 \uc77c\uce58\ud558\ub294 \uc5d8\ub9ac\uba3c\ud2b8\uac00 \uc874\uc7ac\ud558\uba70 \uc778\ub371\uc2a4\ub294 2\uc785\ub2c8\ub2e4. \uccab\ubc88\uc9f8 \ud30c\ub77c\ubbf8\ud130\uc758 \uc544\ud649\ubc88\uc9f8 \uc5d8\ub9ac\uba3c\ud2b8 1\uc740 \ub450\ubc88\uc9f8 \ud30c\ub77c\ubbf8\ud130\uc5d0 \uc77c\uce58\ud558\ub294 \uc5d8\ub9ac\uba3c\ud2b8\uac00 \uc874\uc7ac\ud558\uba74 \uc778\ub371\uc2a4\ub294 1\uc785\ub2c8\ub2e4. \uc774\uc640 \uac19\uc774 \uccab\ubc88\uc9f8 \ud30c\ub77c\ubbf8\ud130\uc758 \uac01 \uc5d8\ub9ac\uba3c\ud2b8\uac00 \ub450\ubc88\uc9f8 \ud30c\ub77c\ubbf8\ud130\uc758 \uc77c\uce58\ud558\ub294 \uc5d8\ub9ac\uba3c\ud2b8\uc758 \uc778\ub371\uc2a4\ub97c \ub118\uaca8\uc8fc\ub294 \ud568\uc218\uac00 base::match() \uc785\ub2c8\ub2e4. 1:N \ubca1\ud130\uc640 base::match(Y, Y.set) \ubca1\ud130\ub97c base::cbind() \ud568\uc218\ub97c \uc774\uc6a9\ud558\uc5ec Column Binding\ud55c \uacb0\uacfc\ub97c Y.index \uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4.","title":"5.2. \ubd80\uac00 \ubcc0\uc218 \uc124\uc815"},{"location":"posts/deep-learning/2017-08-04-Deep-Learning-from-Scratch-Part-02/#53-training","text":"\uc774\uc81c \ub2e4\uc74c \ucf54\ub4dc\ub97c \uc0b4\ud3b4\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. # number of input features D <- base :: ncol ( X ) # number of categories for classification K <- base :: length ( base :: unique ( Y )) H <- hidden # create and initialize weights and bias W1 <- 0.01 * base :: matrix ( stats :: rnorm ( D * H ), nrow = D , ncol = H ) b1 <- base :: matrix ( 0 , nrow = 1 , ncol = H ) W2 <- 0.01 * base :: matrix ( stats :: rnorm ( H * K ), nrow = H , ncol = K ) b2 <- base :: matrix ( 0 , nrow = 1 , ncol = K ) cs Line 1~6\uc740 Input Dimensionality(D), Hidden Layer \ub0b4 Neuron\uac1c\uc218(H), Class \uac1c\uc218(H)\ub97c \uc800\uc7a5\ud569\ub2c8\ub2e4. Line 8~13\uc740 Model Parameters\ub97c \uc8fc\uc5b4\uc9c4 Dimension \ud06c\uae30\uc758 \ud589\ub82c\ub85c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4. # use all train data to update weights since it's a small dataset batchsize <- N # initialize loss to a very big value loss <- 100000 \uc704\uc758 \ucf54\ub4dc\uc5d0\uc11c\ub294 Batch Size\uc640 Loss\ub97c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4. Batch Size\ub97c \uc804\uccb4 \ub370\uc774\ud130\uc758 \uac1c\uc218 N\uc73c\ub85c \uc124\uc815\ud55c \uac83\uc740 Full Batch\ub97c \uc758\ubbf8\ud558\uba70 N\uc774 \ub9e4\uc6b0 \ud074 \uacbd\uc6b0 Full Batch\uac00 \ube44\ud6a8\uc728\uc801\uc77c \uc218 \uc788\uc73c\ubbc0\ub85c Mini Batch( \\(\\mathrm{batchsize} < N\\) )\ub85c \uc218\ud589\ud558\uba70, Loss\ub294 \ucd5c\uc18c\ud654\uc758 \ub300\uc0c1\uc774\ubbc0\ub85c \ucda9\ubd84\ud788 \ud070 \uac12\uc73c\ub85c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4. \uc790, \uc774\uc81c \ubcf8\uaca9\uc801\uc73c\ub85c \ud559\uc2b5\uc744 \uc9c4\ud589\ud569\ub2c8\ub2e4. # Training the network i <- 0 while ( i < maxit && loss > abstol ) { # iteration index i <- i +1 # forward .... # 1 indicate row, 2 indicate col hidden.layer <- base :: sweep ( X %*% W1 , 2 , b1 , '+' ) # neurons : ReLU hidden.layer <- base :: pmax ( hidden.layer , 0 ) score <- base :: sweep ( hidden.layer %*% W2 , 2 , b2 , '+' ) # softmax score.exp <- base :: exp ( score ) # debug probs <- score.exp / base :: rowSums ( score.exp ) # compute the loss correct.logprobs <- - log ( probs [ Y.index ]) data.loss <- base :: sum ( correct.logprobs ) / batchsize reg.loss <- 0.5 * reg * ( base :: sum ( W1 * W1 ) + base :: sum ( W2 * W2 )) loss <- data.loss + reg.loss # backward .... dscores <- probs dscores [ Y.index ] <- dscores [ Y.index ] - 1 dscores <- dscores / batchsize dW2 <- base :: t ( hidden.layer ) %*% dscores db2 <- base :: colSums ( dscores ) dhidden <- dscores %*% base :: t ( W2 ) dhidden [ hidden.layer <= 0 ] <- 0 dW1 <- base :: t ( X ) %*% dhidden db1 <- base :: colSums ( dhidden ) # update .... dW2 <- dW2 + reg * W2 dW1 <- dW1 + reg * W1 W1 <- W1 - lr * dW1 b1 <- b1 - lr * db1 W2 <- W2 - lr * dW2 b2 <- b2 - lr * db2 } \uc55e\uc11c \uc774\ub860 \ubd80\ubd84\uc5d0\uc11c \ucda9\ubd84\ud788 \uc124\uba85\ub4dc\ub838\ub2e4\uace0 \uc0dd\uac01\ub418\ub294\ub370, Op.[ForwardPass]\uc640 Op.[BackwardPass]\ub97c \ub300\uc751\uc2dc\ucf1c \ubcf4\uc2dc\uba74 \ucf54\ub4dc\uac00 \uc644\ubcbd\ud558\uac8c \uc774\ud574\ub418\ub9ac\ub77c \ubbff\uc2b5\ub2c8\ub2e4. \ud559\uc2b5\uc774 \uc644\ub8cc\ub418\uba74 \uc544\ub798\uc758 \ucf54\ub4dc\uc640 \uac19\uc774 model \uc774\ub77c\ub294 list \ubcc0\uc218\uc5d0 \ubaa8\ub378 \ud30c\ub77c\ubbf8\ud130\ub4e4\uc744 \uc800\uc7a5\ud558\uace0 \uacb0\uacfc\ub85c \ub9ac\ud134\ud574 \uc90d\ub2c8\ub2e4. # final results # creat list to store learned parameters # you can add more parameters for debug and visualization # such as residuals, fitted.values ... model <- list ( D = D , H = H , K = K , # weights and bias W1 = W1 , b1 = b1 , W2 = W2 , b2 = b2 ) # plotting with Plotly learning_val <- learning_val [ -1 ,] p <- plotly :: plot_ly ( data = learning_val , x = ~ Epoch , y = ~ Loss , name = \"Loss\" , type = 'scatter' , mode = 'lines+markers' , line = list ( color = 'rgb(205, 12, 24)' , width = 3 )) %>% add_trace ( y = ~ Accuracy , name = \"Accuracy\" , line = list ( color = 'rgb(22, 96, 167)' , width = 4 )) %>% layout ( title = \"Loss & Accuracy as Steps Proceed\" , xaxis = list ( title = \"steps\" ), yaxis = list ( title = \"Loss & Acc.\" )) print ( p ) return ( model )","title":"5.3. Training"},{"location":"posts/deep-learning/2017-08-04-Deep-Learning-from-Scratch-Part-02/#54-predictdnn","text":"predict.dnn() \ud568\uc218\ub294 predict.dnn.R \uc18c\uc2a4 \ud30c\uc77c\uc5d0 \uc788\uc2b5\ub2c8\ub2e4. \ud568\uc218 \uc120\uc5b8\uc740 \ub2e4\uc74c\uacfc \uac19\uc740\ub370, predict.dnn <- function ( model , data = X.test ) \uc785\ub825 \ubcc0\uc218\uc5d0 \ub300\ud55c \uc124\uba85\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: model : train.dnn() \uc5d0\uc11c \ud559\uc2b5\uc2dc\ud0a8 \ubaa8\ub378 \ud30c\ub77c\ubbf8\ud130\ub4e4. data : \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130. Predict \uacfc\uc815\uc740 \ub2e8\uc21c\ud788 \ud14c\uc2a4\ud2b8 \uc785\ub825 \ub370\uc774\ud130\ub97c \uc55e\uc11c \uc5bb\uc740 model\uc744 \uc774\uc6a9\ud558\uc5ec Forward Pass\ub97c \uac70\uccd0 Score\uac00 \uac00\uc7a5 \ub192\uc740 Class\ub97c \uc5bb\ub294 \uacfc\uc815\uc774\ub77c\uace0 \ubcf4\uc2dc\uba74 \ub418\uaca0\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \ucf54\ub4dc\ub97c \ucc38\uace0\ud558\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4. # Prediction predict.dnn <- function ( model , data = X.test ) { # new data, transfer to matrix new.data <- base :: data.matrix ( data ) # Feed Forwad hidden.layer <- base :: sweep ( new.data %*% model $ W1 , 2 , model $ b1 , '+' ) # neurons : Rectified Linear hidden.layer <- base :: pmax ( hidden.layer , 0 ) score <- base :: sweep ( hidden.layer %*% model $ W2 , 2 , model $ b2 , '+' ) # Loss Function: softmax score.exp <- base :: exp ( score ) probs <- base :: sweep ( score.exp , 1 , base :: rowSums ( score.exp ), '/' ) # select max possiblity labels.predicted <- base :: max.col ( probs ) return ( labels.predicted ) }","title":"5.4. predict.dnn( ) \ud504\ub85c\ud1a0\ud0c0\uc785"},{"location":"posts/deep-learning/2017-08-04-Deep-Learning-from-Scratch-Part-02/#55-mainr","text":"main.R \uc5d0\uc11c \ud558\ub294 \uc791\uc5c5\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: \uc8fc\uc5b4\uc9c4 \ub370\uc774\ud130( iris )\ub97c train data\uc640 test data\ub85c \ubd84\ub958\ud55c\ub2e4. train data\ub97c train.dnn() \ud568\uc218\uc5d0 \uacf5\uae09\ud558\uc5ec \ud559\uc2b5 \ubaa8\ub378\uc744 \uc5bb\ub294\ub2e4. test data\ub97c predict.dnn() \ud568\uc218\uc5d0 \uacf5\uae09\ud558\uc5ec \uc608\uce21 \uacb0\uacfc\ub97c \uc5bb\ub294\ub2e4. \uc5bb\uc5b4\uc9c4 \uc608\uce21 \uacb0\uacfc\uc640 \uc2e4\uc81c \ub370\uc774\ud130(Ground Truth Labels)\uc640 \uc77c\uce58\ub3c4\ub97c \ud3c9\uac00\ud558\uc5ec Accuracy\ub97c \uc5bb\ub294\ub2e4. \ub2e4\uc74c\uc740 main.R \ucf54\ub4dc\uc785\ub2c8\ub2e4: # Copyright 2016: www.ParallelR.com # Parallel Blog : R For Deep Learning (I): Build Fully Connected Neural Network From Scratch # Classification by 2-layers DNN and tested by iris dataset # Author: Peng Zhao, patric.zhao@gmail.com base :: rm ( list = ls ()) base :: gc () base :: source ( './train.dnn.R' , echo = FALSE ) base :: source ( './predict.dnn.R' , echo = FALSE ) ######################################################################## # testing ####################################################################### set.seed ( 1 ) # 0. EDA base :: summary ( iris ) base :: names ( iris ) graphics :: plot ( iris ) # 1. split data into test/train samp <- base :: c ( base :: sample ( 1 : 50 , 25 ), base :: sample ( 51 : 100 , 25 ), base :: sample ( 101 : 150 , 25 )) # 2. train model ir.model <- train.dnn ( x = 1 : 4 , y = 5 , traindata = iris [ samp ,], testdata = iris [ - samp ,], hidden = 6 , maxit = 3000 , display = 50 ) # ir.model <- train.dnn(x=1:4, y=5, traindata=iris[samp,], hidden=6, maxit=2000, display=50) # 3. prediction # NOTE: if the predict is factor, we need to transfer the number into class manually. # To make the code clear, I don't write this change into predict.dnn function. labels.dnn <- predict.dnn ( ir.model , iris [ - samp , -5 ]) # 4. verify the results base :: table ( model = iris [ - samp , 5 ], data = labels.dnn ) # labels.dnn # 1 2 3 #setosa 25 0 0 #versicolor 0 24 1 #virginica 0 0 25 #accuracy print ( sprintf ( \"Accuracy: %f\" , base :: mean ( as.integer ( iris [ - samp , 5 ]) == labels.dnn )) ) # 0.98","title":"5.5. main.R"},{"location":"posts/deep-learning/2017-08-04-Deep-Learning-from-Scratch-Part-02/#56","text":"main.R \ucf54\ub4dc\ub97c \uc2e4\ud589\ud55c \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. 50 1.09785 0.3333333 100 1.096281 0.3333333 150 1.091853 0.3333333 200 1.080326 0.3333333 250 1.056044 0.3333333 300 1.015552 0.3466667 350 0.952453 0.6666667 400 0.8789816 0.6666667 450 0.8070193 0.6666667 500 0.7290098 0.6666667 550 0.649967 0.6666667 600 0.5840677 0.68 650 0.5341543 0.7066667 700 0.4962127 0.8 750 0.4660278 0.88 800 0.4406975 0.92 850 0.4184247 0.9333333 900 0.3981292 0.96 950 0.379204 0.96 1000 0.361337 0.96 1050 0.344356 0.96 1100 0.3281951 0.9866667 1150 0.3128612 0.9866667 1200 0.2983606 0.9866667 1250 0.284711 0.9866667 1300 0.2719326 0.9866667 1350 0.2600172 0.9866667 1400 0.2489488 0.9866667 1450 0.2387016 0.9866667 1500 0.2292342 0.9866667 1550 0.2204989 0.9866667 1600 0.2124452 0.9866667 1650 0.205022 0.9866667 1700 0.1981784 0.9866667 1750 0.1918652 0.9866667 1800 0.1860356 0.9866667 1850 0.180646 0.9866667 1900 0.1756561 0.9866667 1950 0.171029 0.9866667 2000 0.1667312 0.9866667 2050 0.1627323 0.9866667 2100 0.1590047 0.9866667 2150 0.1555238 0.9866667 2200 0.1522674 0.9866667 2250 0.1492155 0.9866667 2300 0.1463502 0.9866667 2350 0.1436553 0.9866667 2400 0.1411165 0.9866667 2450 0.1387206 0.9866667 2500 0.136456 0.9866667 2550 0.1343122 0.9866667 2600 0.1322797 0.9866667 2650 0.1303498 0.9866667 2700 0.1285149 0.9866667 2750 0.1267679 0.9866667 2800 0.1251025 0.9866667 2850 0.1235127 0.9866667 2900 0.1219935 0.9866667 2950 0.1205399 0.9866667 3000 0.1191476 0.9866667 [ 1 ] \"Accuracy: 0.986667\"","title":"5.6. \uc2e4\ud589\uacb0\uacfc"},{"location":"posts/deep-learning/2018-11-09-IntroductionToArtificialNeuralNetworksPart1/","text":"Written by Alex Choi, Nov. 09, 2018. \uc774\ubc88 \ud3ec\uc2a4\ud305\uc5d0\uc11c\ub294 \uc778\uacf5\uc2e0\uacbd\ub9dd(Artificial Neural Networks, ANN)\uc5d0 \ub300\ud558\uc5ec \uac04\ub7b5\ud55c \uc774\ub860\uc744 \uc54c\uc544\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc778\uacf5\uc2e0\uacbd\ub9dd(Artificial Neural Networks) \uac1c\uc694 \uc778\uacf5\uc2e0\uacbd\ub9dd\uc740 \uc0dd\ubb3c\uc758 \ub1cc\uac00 \uc785\ub825\ub41c \uc790\uadf9\uc5d0 \ubc18\uc751\ud558\ub294\uac00\ub97c \uc774\ud574\ud558\uc5ec \uc785\ub825 \uc2e0\ud638\uc640 \ucd9c\ub825 \uc2e0\ud638\uc5d0 \ub300\ud55c \uad00\uacc4\ub97c \ubaa8\ub378\ub9c1\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \ub274\ub7f0\uc740 \uc804\uae30 \uc2e0\ud638\ub97c \uc218\uc9d1, \ucc98\ub9ac \ubc0f \uc804\ud30c\ub97c \uc8fc\ub41c \ubaa9\uc801\uc73c\ub85c \ud558\ub294 \ub1cc\uc758 \uc138\ud3ec\uc778\ub370, \uc778\uacf5\uc2e0\uacbd\ub9dd\uc5d0 \uc788\uc5b4 \uc815\ubcf4\ub97c \ucc98\ub9ac\ud558\ub294 \uae30\ubcf8\uc801\uc778 \ub2e8\uc704\ub97c \uc778\uacf5 \ub274\ub7f0(Artificial Neuron) \ub610\ub294 \ub178\ub4dc(Node)\ub77c\uace0 \ud569\ub2c8\ub2e4. \uc778\uacf5\uc2e0\uacbd\ub9dd\uc740 \uc774\ub7ec\ud55c \uac70\ub300 \ubcd1\ub82c \ucc98\ub9ac\ub97c \uc704\ud55c \uc778\uacf5 \ub274\ub7f0\ub4e4\uc774 \uc11c\ub85c \uc5f0\uacb0\ub41c \ub124\ud2b8\uc6cc\ud06c\ub97c \uc774\uc6a9\ud558\ub294 \uac83\uc774\uba70, \ub1cc\uc758 \uc815\ubcf4 \ucc98\ub9ac \ub2a5\ub825\uc774 \uc774\ub7ec\ud55c \ub274\ub7f0\uc758 \ub124\ud2b8\uc6cc\ud06c\ub85c\ubd80\ud130 \uae30\uc778\ud55c\ub2e4\uace0 \uc0dd\uac01\ub418\uc5b4, \ucd08\ucc3d\uae30 \uc778\uacf5\uc9c0\ub2a5 \ubd84\uc57c\ub294 \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uc0dd\uc131\ud558\ub294 \uac83\uc744 \ubaa9\uc801\uc73c\ub85c \ud558\uc600\uc2b5\ub2c8\ub2e4. \uc778\uacf5\uc2e0\uacbd\ub9dd \ubd84\uc57c\uc758 \ub2e4\ub978 \uc774\ub984\uc740 \uacb0\ud569\uc124(Connectionism), \ubcd1\ub82c \ubd84\uc0b0 \ucc98\ub9ac(Parallel Distributed Processing), \uc2e0\uacbd \uacc4\uc0b0(Neural Computation) \ub4f1\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub807\ub2e4\uba74 \uc0dd\ubb3c\uc740 \uba87 \uac1c\uc758 \ub274\ub7f0\uc744 \uac00\uc9c0\uace0 \uc788\uc744\uae4c\uc694? \uc778\uac04\uc740 860\uc5b5\uac1c\uc758 \ub274\ub7f0\uc744 \uac00\uc9c0\uace0 \uc788\uc73c\uba70, \ud788\ub9d0\ub77c\uc57c \uc6d0\uc22d\uc774\ub294 63\uc5b5\uac1c, \uae4c\ub9c8\uadc0\ub294 21\uc5b5\uac1c, \uc950\ub294 7100\ub9cc\uac1c, \ubc14\ud034\ubc8c\ub808\ub294 100\ub9cc\uac1c, \ud574\ud30c\ub9ac\ub294 5,600\uac1c \uc815\ub3c4\uc758 \ub274\ub7f0\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7f0\ub370 \uac00\uc7a5 \ub9ce\uc740 \ub274\ub7f0\uc744 \uac00\uc9c0\uace0 \uc788\ub294 \uc0dd\ubb3c\uc740 \uc778\uac04\uc774 \uc544\ub2c8\ub77c \uc544\ud504\ub9ac\uce74 \ucf54\ub07c\ub9ac\uc778\ub370 \ubb34\ub824 2500\uc5b5\uac1c\ub098 \ub429\ub2c8\ub2e4. \uac1c\uccb4 \ub274\ub7f0 \uc218 \uc544\ud504\ub9ac\uce74 \ucf54\ub07c\ub9ac 257,000,000,000 \uc778\uac04 86,000,000,000 \ud788\ub9d0\ub77c\uc57c \uc6d0\uc22d\uc774 6,376,000,000 \uae4c\ub9c8\uadc0 2,171,000,000 \uace0\uc591\uc774 760,000,000 \ubb38\uc5b4 500,000,000 \uae30\ub2c8 \ud53c\uadf8 240,000,000 \uace8\ub4e0 \ud584\uc2a4\ud130 90,000,000 \uac1c\uad6c\ub9ac 16,000,000 \ubc14\ud034\ubc8c\ub808 1,000,000 \uac1c\ubbf8 250,000 \uacfc\uc77c \ud30c\ub9ac 250,000 \ud574\ud30c\ub9ac 5,600 \ucd9c\uc800: wkipedia.org \uc778\ub958\uc5d0\uac8c \ubd88\ud589\uc778\uc9c0 \ub2e4\ud589\uc778\uc9c0\ub294 \ubab0\ub77c\ub3c4 \ud604\uc7ac\uc758 \uc778\uacf5\uc2e0\uacbd\ub9dd\uc740 \uace0\uc791 \uc218\ubc31\uac1c\uc758 \ub274\ub7f0\uc744 \uac00\uc9c0\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 \uac00\uae4c\uc6b4 \ubbf8\ub798\uc5d0 \uae30\uacc4\uac00 \uc778\ub958\ub97c \uc704\ud611\ud560 \uac00\ub2a5\uc131\uc740 \uc5c6\uc5b4 \ubcf4\uc785\ub2c8\ub2e4. \uadf8\ub807\uc9c0\ub9cc, \ub2e4\uc591\ud55c \uc5f0\uad6c\uac00 \ube60\ub974\uac8c \uc9c4\ud589\ub418\uc5b4 \uac00\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 \uc778\uacf5\uc9c0\ub2a5\uc758 \ubc1c\uc804 \uc18d\ub3c4\ub294 \uc810\uc810 \uac00\uc18d\ud654 \ub418\uc5b4 \uac00\uace0 \uc788\uc73c\uba70, Neurorobotics \ubd84\uc57c\uc5d0\uc11c\ub294 \uc778\uac04\uc774 \ub9cc\ub4e0 \ucef4\ud4e8\ud130 \uc54c\uace0\ub9ac\uc998\uc774 \uc544\ub2cc \uc950\uc758 \ub1cc\ub97c \uc774\uc6a9\ud558\uc5ec \uc21c\uc218 \ub274\ub7f0\uc744 \uc5f0\uacb0\ud55c \ub124\ud2b8\uc6cc\ud06c\ub97c \ud1b5\ud574 \ubaa8\ud130\ub97c \uc81c\uc5b4\ud558\ub294 \ub2e8\uacc4\uc5d0\uae4c\uc9c0 \uc774\ub974\ub800\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \uc601\uc0c1\uc744 \uac10\uc0c1\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4(\uc18c\ub984\uc8fc\uc758). ANN \ucd08\uae30 50\ub144\uac04\uc5d0\ub294 AND, OR, NOT \ub4f1 \uac04\ub2e8\ud55c \ub17c\ub9ac\ub97c \ucc98\ub9ac\ud558\ub294 \uc218\uc900\uc73c\ub85c \ub1cc\uc758 \ub3d9\uc791\uc744 \uc2dc\ubbac\ub808\uc774\uc158\ud558\ub294 \uc218\uc900\uc774\uc5c8\uc73c\ub098, \uacfc\ud559\uc790\ub4e4\uc774 \uc0dd\ubb3c\ud559\uc801 \ub1cc\uc758 \uc791\ub3d9\uc6d0\ub9ac\ub97c \uc774\ud574\ud558\ub294\ub370 \uc788\uc5b4 \ub9ce\uc740 \ub3c4\uc6c0\uc744 \uc8fc\uc5c8\uc2b5\ub2c8\ub2e4. \ucd5c\uadfc \ucef4\ud4e8\ud305 \ud30c\uc6cc\uac00 \ud3ed\ubc1c\uc801\uc73c\ub85c \ubc1c\uc804\ud568\uc5d0 \ub530\ub77c ANN\uc740 \uc2e4\uc81c\uc801\uc778 \ubb38\uc81c\ub97c \ud478\ub294\ub370 \ubcf4\ub2e4 \uc801\uadf9\uc801\uc73c\ub85c \ud65c\uc6a9\ub418\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc0ac\ubb3c\uc778\uc2dd, \uc74c\uc131\uc778\uc2dd, \uc790\uc728\uc8fc\ud589\ucc28, \ub0a0\uc528\uc608\uce21\uacfc \uac19\uc740 \uc790\uc5f0\ud604\uc0c1\uc758 \uc608\uce21\uacfc \uc0ac\ud68c\ud604\uc0c1\uc758 \uc608\uce21\uc5d0\ub3c4 \ud65c\uc6a9\ub418\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc989, ANN\uc740 \ubd84\ub958(Classification), \uc218\uce58 \uc608\uce21, \uc790\uc728 \ud328\ud134 \uc778\uc2dd(Unsupervised Pattern Recognition) \ub4f1\uc5d0 \ud65c\uc6a9\ud560 \uc218 \uc788\uc744 \uc815\ub3c4\ub85c \ub2e4\uc7ac\ub2e4\ub2a5\ud569\ub2c8\ub2e4. ANN\uc740 \uc785\ub825 \ub370\uc774\ud130\uc640 \ucd9c\ub825 \ub370\uc774\ud130\uac00 \uc798 \uc815\uc758\ub418\uc5b4 \uc788\ub294 \ubb38\uc81c\uc5d0 \uac00\uc7a5 \uc801\ud569\ud55c\ub370, \uc785\ub825 \ub370\uc774\ud130\uc640 \ucd9c\ub825 \ub370\uc774\ud130 \uac04\uc758 \uad00\uacc4\ub97c \uc815\uc758\ud558\ub294 \uac83\uc740 \ub108\ubb34\ub098\ub3c4 \ubcf5\uc7a1\ud569\ub2c8\ub2e4. \uc778\uacf5\uc2e0\uacbd\ub9dd \ubaa8\ub378 \uc778\uacf5\uc2e0\uacbd\ub9dd\uc740 \uc778\uac04\uc758 \ub450\ub1cc\ub97c \ubaa8\uc0ac\ud55c \uac83\uc774\ubbc0\ub85c \uc778\uacbd\uc2e0\uacbd\ub9dd\uc758 \ub3d9\uc791 \uc6d0\ub9ac\ub97c \uc774\ud574\ud558\ub824\uba74 \ub274\ub7f0(Neuron)\uc758 \ub3d9\uc791 \uc6d0\ub9ac\ub97c \uc774\ud574\ud558\ub294 \uac83\uc774 \uc911\uc694\ud569\ub2c8\ub2e4. \uc0dd\ud654\ud559 \ud504\ub85c\uc138\uc2a4\ub97c \ud1b5\ud574 \uc138\ud3ec\uc758 \uc218\uc0c1\ub3cc\uae30(Dendrite)\ub85c \uc785\ub825\uc2e0\ud638\uac00 \ub4e4\uc5b4\uc624\uba74, \uadf8 \ucc98\ub9ac\uc758 \uc911\uc694\ub3c4\uc5d0 \ub530\ub77c \uc784\ud384\uc2a4\uc5d0 \uac00\uc911\uce58\ub97c \ubd80\uc5ec\ud569\ub2c8\ub2e4. \uc138\ud3ec\uccb4\ub294 \uc785\ub825\uc2e0\ud638\ub97c \ub204\uc801\ud558\uace0 \ub204\uc801\ub41c \uc785\ub825\uc2e0\ud638\uac00 \uc77c\uc815 \uc784\uacc4\uce58\ub97c \ub118\uc5b4\uc11c\uba74 \uc804\uae30\ud654\ud559 \ud504\ub85c\uc138\uc2a4\ub97c \ud1b5\ud574 \ucd9c\ub825\uc2e0\ud638\ub294 \ucd95\uc0c9\ub3cc\uae30(Axon)\ub85c \uc804\ub2ec\ub429\ub2c8\ub2e4. \ucd95\uc0c9\ub3cc\uae30 \uc885\ub2e8(Axon Terminal)\uc5d0\uc11c \uc804\uae30\uc2e0\ud638\ub294 \ud654\ud559\uc2e0\ud638\ub85c \ucc98\ub9ac\ub418\uc5b4 \ub274\ub7f0 \uac04\uc758 \uc791\uc740 \uac04\uadf9\uc778 \uc2dc\ub0c5\uc2a4(Synapse)\ub97c \ud1b5\ud574 \uc774\uc6c3\uc758 \ub274\ub7f0\uc73c\ub85c \uc804\ub2ec\ub429\ub2c8\ub2e4. \uc2e0\uacbd\ub9dd \uad6c\uc870 \ub2e8\uc77c \uc778\uacf5 \ub274\ub7f0 \ubaa8\ub378\uc740 \uc0dd\ubb3c\ud559\uc801 \ubaa8\ub378\uacfc \uc720\uc0ac\ud558\uac8c \uc774\ud574\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798 \uadf8\ub9bc\uc5d0\uc11c, \ub178\ub4dc \\(j\\) \uc5d0\uc11c \\(i\\) \ub85c\uc758 \ub9c1\ud06c\ub294 \\(j\\) \uc5d0\uc11c \\(i\\) \ub85c\uc758 \ud65c\uc131 \\(a_j\\) \ub97c \uc804\ud30c\ud558\ub294 \uc5ed\ud560\uc744 \ud569\ub2c8\ub2e4. \uac01 \ub9c1\ud06c\ub294 \uc774 \ub9c1\ud06c\uc640 \uad00\ub828\ub41c \uac00\uc911\uce58 \\(w_{j,i}\\) \ub97c \uac16\ub294\ub370, \uc5f0\uacb0\uc131\uc758 \uac15\ub3c4(Strength) \ubc0f \ubd80\ud638(Sign)\ub97c \uacb0\uc815\ud569\ub2c8\ub2e4. \uc778\uacf5\uc2e0\uacbd\ub9dd \uad6c\uc870 \uac01 \ub178\ub4dc \\(i\\) \ub294 \uba3c\uc800 \uc785\ub825\uc2e0\ud638\uc758 \uac00\uc911\uce58\ud569(Weighted Sum)\uc744 \uacc4\uc0b0\ud569\ub2c8\ub2e4: \\[\\mathbf{Input} = \\sum_{j}^{n} w_{j,i}a_{j}\\] \uc774\uc81c \ucd9c\ub825\uc744 \uc5bb\uc73c\ub824\uba74 \ud65c\uc131 \ud568\uc218(Activation Function) \\(\\mathscr{F}\\) \ub97c \uc801\uc6a9\ud569\ub2c8\ub2e4: \\[a_{i}=\\mathscr{F}(\\mathbf{Input}_{i})=\\mathscr{F}\\begin{pmatrix}\\sum_{j=1}^{n}{W_{j,i}a_{j}}\\end{pmatrix}\\] \ud2b9\ud788 \\(w_{0,i}\\) \ub97c \uace0\uc815 \uc785\ub825 \\(a_{0} = -1\\) \uc5d0 \uc5f0\uacb0\ub41c \ud3b8\ud5a5 \uac00\uc911\uce58\ub77c\uace0 \ud569\ub2c8\ub2e4. \uc774\ub7f0 \ubc29\uc2dd\uc73c\ub85c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc740 \ubcf5\uc7a1\ud55c \ubaa8\ub378\uc744 \uc138\uc6b0\uae30 \uc704\ud55c \uad6c\uc131\uc694\uc18c\ub85c \ub274\ub7f0\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc218\ub9ce\uc740 \uc778\uacf5\uc2e0\uacbd\ub9dd \uc54c\uace0\ub9ac\uc998\uc774 \uc874\uc7ac\ud558\uc9c0\ub9cc, \uc774\ub4e4\uc740 \uacf5\ub3d9\uc801\uc73c\ub85c \ub2e4\uc74c\uacfc \uac19\uc740 \ud2b9\uc9d5\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4: \ud65c\uc131 \ud568\uc218(Activation Function) : \ub274\ub7f0\uc5d0 \uc5f0\uacb0\ub41c \uc785\ub825\uc2e0\ud638\ub4e4\uc744 \ub2e8\uc77c \ucd9c\ub825\uc2e0\ud638\ub85c \ubcc0\ud658\ud558\uc5ec \uc774\uc6c3 \ub274\ub7f0\uc73c\ub85c \uc804\ud30c\ud569\ub2c8\ub2e4. \ub124\ud2b8\uc6cc\ud06c \ud1a0\ud3f4\ub85c\uc9c0(Network Topology) : \ubaa8\ub378\uc758 \ub274\ub7f0\uacfc \uacc4\uce35(Layer)\uc774 \uc5f0\uacb0\ub418\uc5b4 \uc788\ub294 \uad6c\uc870\uc785\ub2c8\ub2e4. \ud559\uc2b5 \uc54c\uace0\ub9ac\uc998(Training Algorithm) : \uc785\ub825\uc2e0\ud638\uc5d0 \ub300\uc751\ud558\uc5ec \ub274\ub7f0\uc744 \uc5b5\uc81c\ud558\uac70\ub098 \uc5ec\uae30\uc2dc\ud0a4\uae30 \uc704\ud55c \uc5f0\uacb0 \uac00\uc911\uce58\ub97c \uacb0\uc815\ud569\ub2c8\ub2e4. \ud65c\uc131 \ud568\uc218(Activation Function) \ud65c\uc131 \ud568\uc218\ub294 \uc778\uacf5 \ub274\ub7f0\uc774 \uc720\uc785\ub418\ub294 \uc815\ubcf4\ub97c \ucc98\ub9ac\ud558\uace0 \uad6c\uc131\ub41c \ub124\ud2b8\uc6cc\ud06c\ub85c \uc804\ub2ec\ud558\ub294 \uba54\ucee4\ub2c8\uc998\uc785\ub2c8\ub2e4. \uc778\uacf5\uc2e0\uacbd\ub9dd\uc774 \uc0dd\ubb3c\ud559\uc801 \uc2e0\uacbd\ub9dd\uc744 \ubaa8\uc0ac\ud558\ub4ef \ud65c\uc131\ud568\uc218 \ub610\ud55c \uc0dd\ubb3c\ud559\uc801\uc778 \ud2b9\uc9d5\uc744 \ubc18\uc601\ud558\ub294 \ubaa8\ub378\uc744 \ucc44\uc6a9\ud569\ub2c8\ub2e4. \uc0dd\ubb3c\ud559\uc801\uc778 \uce21\uba74\uc73c\ub85c \ubcfc \ub54c, \ud65c\uc131\ud568\uc218\ub294 \uc785\ub825\uc2e0\ud638\ub97c \uac00\uc911\uce58\ud569\uc744 \uacc4\uc0b0\ud558\uc5ec \uc774 \uac12\uc774 \uc815\ud574\uc9c4 \uc784\uacc4\uce58\ub97c \ub118\ub294\uc9c0 \uacb0\uc815\ud569\ub2c8\ub2e4. \ub9cc\uc57d \uc784\uacc4\uce58\ub97c \ub118\uc9c0 \ubabb\ud560 \uacbd\uc6b0 \uc544\ubb34 \uc77c\ub3c4 \ud558\uc9c0 \uc54a\ub294\ub370, \uc774\ub97c \uc784\uacc4 \ud65c\uc131 \ud568\uc218(Threshold Activation Function) (\uc544\ub798 \uadf8\ub9bc (a))\uc774\ub77c\uace0 \ud569\ub2c8\ub2e4. \ud65c\uc131\ud654 \ud568\uc218 \uc608\uc2dc \ub2e8\uc704 \uc2a4\ud15d \ud65c\uc131 \ud568\uc218(\ub610\ub294 \uc784\uacc4 \ud65c\uc131 \ud568\uc218)\ub294 \uc0dd\ubb3c\ud559\uc758 \ub3d9\uc791\uc6d0\ub9ac\uc5d0 \ubd80\ud569\ub418\uae30\ub294 \ud558\uc9c0\ub9cc \uc218\ud559\uc801 \ud2b9\uc131\uc774 \ubc14\ub78c\uc9c1\ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \uc778\uacf5\uc2e0\uacbd\ub9dd\uc5d0\uc11c \uac70\uc758 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uac00\uc7a5 \ub110\ub9ac \uc0ac\uc6a9\ub418\ub294 \ud568\uc218\ub294 Sigmoid \ud65c\uc131 \ud568\uc218(\ub610\ub294 Logistic Sigmoid\ub77c\uace0\ub3c4 \ud568)(\uc704\uc758 \uadf8\ub9bc (b))\uc785\ub2c8\ub2e4(\uc0ac\uc2e4, Sigmoid \ud568\uc218\ub3c4 Saturation \ubc0f Non-zero Centered \ud2b9\uc131\uc73c\ub85c \uc778\ud574 \uc2e4\ubb34\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ubc14\ub78c\uc9c1\ud558\uc9c0 \uc54a\uc73c\uba70, \ucd5c\uadfc Rectifier Linear Unit;ReLU\uc774 \uc2e4\ubb34\uc5d0\uc11c \uac00\uc7a5 \ub110\ub9ac \uc0ac\uc6a9\ub429\ub2c8\ub2e4). \ucd9c\ub825\uc2e0\ud638\uc758 \ubc94\uc704\ub294 \ubaa8\ub450 [0, +1]\uc774\uc9c0\ub9cc Sigmoid \ud568\uc218\ub294 \uc785\ub825\uc2e0\ud638 \ubc94\uc704 \uc804\uccb4\uc5d0\uc11c \ubbf8\ubd84\uac00\ub2a5\ud569\ub2c8\ub2e4. Sigmoid \ud65c\uc131\ud568\uc218\uc758 \ubbf8\ubd84\uac00\ub2a5 \ud2b9\uc131 \ub355\ubd84\uc5d0 ANN \ucd5c\uc801\ud654 \uc54c\uace0\ub9ac\uc998\uc744 \uc801\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub124\ud2b8\uc6cc\ud06c \ud1a0\ud3f4\ub85c\uc9c0(Network Topology) \ud1a0\ud3f4\ub85c\uc9c0(Topology)\ub294 \uc6b0\ub9ac\ub9d0\ub85c \uc704\uc0c1\uae30\ud558\ud559\uc774\ub77c\uace0 \ud558\uba70, \uc624\ube0c\uc81d\ud2b8\uc758 \uc5f0\uacb0\uc131(Connectivity)\uc640 \uad00\ub828\uc774 \uc788\uc2b5\ub2c8\ub2e4. ANN\uc5d0\uc11c\uc758 \ud1a0\ud3f4\ub85c\uc9c0\ub294 \ub274\ub7f0 \uac04\uc758 \uc5f0\uacb0\uad6c\uc870(\ub610\ub294 \ud328\ud134)\ub97c \uc758\ubbf8\ud558\uba70, \uc774 \uc5f0\uacb0\uad6c\uc870\uac00 ANN\uc758 \ud559\uc2b5\ub2a5\ub825\uc744 \uacb0\uc815\ud569\ub2c8\ub2e4. \ud1a0\ud3f4\ub85c\uc9c0\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ubd84\ub958\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \ub808\uc774\uc5b4\uc758 \uac1c\uc218 \ub124\ud2b8\uc6cc\ud06c \ub0b4\uc758 \uc815\ubcf4\uc758 \uc5ed\ubc29\ud5a5 \uc774\ub3d9 \uac00\ub2a5\uc131 \ub124\ud2b8\uc6cc\ud06c\uc758 \uac01 \ub808\uc774\uc5b4\uc758 \ub178\ub4dc \uac1c\uc218 \ud1a0\ud3f4\ub85c\uc9c0\ub294 \ub124\ud2b8\uc6cc\ud06c\ub97c \ud1b5\ud574 \ud559\uc2b5 \uac00\ub2a5\ud55c \ud0dc\uc2a4\ud06c\uc758 \ubcf5\uc7a1\uc131\uc744 \uacb0\uc815\ud558\uba70, \uc77c\ubc18\uc801\uc73c\ub85c \ub124\ud2b8\uc6cc\ud06c\uac00 \ubcf5\uc7a1\ud574\uc9c0\uace0 \uaddc\ubaa8\uac00 \ucee4\uc9c8\uc218\ub85d \ub2e4\uc591\ud55c \ud328\ud134\uacfc \ubcf5\uc7a1\ud55c \uacb0\uc815 \uacbd\uacc4\ub97c \uc2dd\ubcc4\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub124\ud2b8\uc6cc\ud06c\uc758 \uc131\ub2a5\uc740 \uadf8 \ud06c\uae30\ubfd0\ub9cc \uc544\ub2c8\ub77c \ub178\ub4dc\ub4e4\uc774 \uc5b4\ub5bb\uac8c \ubc30\uce58\ub418\uc5b4 \uc788\ub294\uac00\uc5d0 \uc758\ud574\uc11c\ub3c4 \uacb0\uc815\ub429\ub2c8\ub2e4. \ub808\uc774\uc5b4(Layer)\uc758 \uac1c\uc218 ANN\uc758 \ucc98\ub9ac \ub2a5\ub825\uc740 \uace7 \ub808\uc774\uc5b4\uc758 \uac1c\uc218\uc640 \ubc00\uc811\ud55c \uad00\uacc4\uac00 \uc788\uc2b5\ub2c8\ub2e4. \ub808\uc774\uc5b4\ub294 \uc785\ub825\ub178\ub4dc\uc640 \ucd9c\ub825\ub178\ub4dc\uc758 \uc9d1\ud569\uccb4\uc774\uba70, \uc785\ub825\ub178\ub4dc\ub294 \uc785\ub825 \ub370\uc774\ud130\ub85c\ubd80\ud130 \uc2e0\ud638\ub97c \ubc1b\ub294 \ub274\ub7f0\uc744 \uc77c\uceeb\uc2b5\ub2c8\ub2e4. \uac01 \uc785\ub825\ub178\ub4dc\ub294 \ud65c\uc131\ud568\uc218\ub97c \ud1b5\ud574 \uc785\ub825\uc2e0\ud638\ub97c \ubcc0\ud658\ud558\uba70 \uc774\ub97c \ucd9c\ub825\ub178\ub4dc\ub85c \uc804\ub2ec\ud55c\ub2e4. \uc544\ub798 \uadf8\ub9bc\uc740 2\uac1c\uc758 \uc785\ub825\ub370\uc774\ud130\uc640 2\uac1c\uc758 \uc785\ub825 \ub178\ub4dc\ub85c \uad6c\uc131\ub41c 1\uac1c\uc758 \uc740\ub2c9 \ub808\uc774\uc5b4(Hidden Layer)\ub85c \uad6c\uc131\ub41c \uac04\ub2e8\ud55c ANN \ubaa8\ub378\uc774\uba70, \ub808\uc774\uc5b4\uac00 1\uac1c \uc874\uc7ac\ud558\ubbc0\ub85c \ub2e8\uc77c \ub808\uc774\uc5b4 \ub124\ud2b8\uc6cc\ud06c(Single-Layer Network)\ub77c\uace0 \ud569\ub2c8\ub2e4. \uc774 \ubaa8\ub378\uc740 \ub108\ubb34 \ub2e8\uc21c\ud558\ubbc0\ub85c \uc120\ud615\uc73c\ub85c \ubd84\ub958\uac00\ub2a5\ud55c(Linearly Separable) \ud328\ud134\uc5d0 \ub300\ud55c \ubb38\uc81c\uc5d0\ub9cc \uc801\uc6a9\uc774 \uac00\ub2a5\ud558\uba70, \ubcf4\ub2e4 \uc815\uad50\ud55c \ubb38\uc81c\ub97c \ud480\uae30 \uc704\ud574\uc11c\ub294 \uc880 \ub354 \ubcf5\uc7a1\ud55c \ubaa8\ub378\uc774 \uc694\uad6c\ub429\ub2c8\ub2e4. \uc544\ub798 \uadf8\ub9bc\uacfc \uac19\uc774 1\uac1c \uc774\uc0c1\uc758 \uc740\ub2c9 \ub808\uc774\uc5b4\uac00 \ucd94\uac00\ub41c \ub124\ud2b8\uc6cc\ud06c\ub97c \ub2e4\uc911 \ub808\uc774\uc5b4 \ub124\ud2b8\uc6cc\ud06c(Multi-Layer Network)\ub77c\uace0 \ud558\uba70, \uc785\ub825\ub178\ub4dc\ub4e4\uc5d0\uc11c \ucd9c\ub825\ub178\ub4dc \uc0ac\uc774\uc5d0 \uc740\ub2c9 \ub178\ub4dc\ub4e4\uc774 \uc874\uc7ac\ud569\ub2c8\ub2e4. \uc815\ubcf4\uc758 \uc774\ub3d9 \ubc29\ud5a5 \uc55e\uc11c \uc5b8\uae09\ud55c \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \uc815\ubcf4\ub294 \ud56d\uc0c1 \uc785\ub825\ub178\ub4dc\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \ucd9c\ub825\ub178\ub4dc\ub85c \uc885\uacb0\ub418\ub294 \uad6c\uc870\uc600\uc2b5\ub2c8\ub2e4. \uc774\ucc98\ub7fc \uc815\ubcf4\uac00 \ud55c \ubc29\ud5a5\uc73c\ub85c\ub9cc \uc9c4\ud589\ub418\ub294 \ub124\ud2b8\uc6cc\ud06c\ub97c \ud53c\ub4dc\ud3ec\uc6cc\ub4dc \ub124\ud2b8\uc6cc\ud06c(Feedforward Network)\ub77c\uace0 \ud558\uba70, \ud2b9\ud788 \uc544\ub798\uc758 \uadf8\ub9bc\uacfc \uac19\uc774 \ub2e4\uc911\uc758 \uc740\ub2c9 \ub808\uc774\uc5b4, \uc989 2\uac1c \uc774\uc0c1\uc758 \uc740\ub2c9 \ub808\uc774\uc5b4\ub97c \uac16\ub294 \ub124\ud2b8\uc6cc\ud06c \uad6c\uc870\ub97c \ub525 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c(Deep Neural Network; DNN)\ub77c\uace0 \ud558\uba70, \uc774\ub97c \uc774\uc6a9\ud55c Learning(Training)\uc744 \ub525 \ub7ec\ub2dd(Deep Learning)\uc774\ub77c\uace0 \ud569\ub2c8\ub2e4. \ub525 \ub7ec\ub2dd\uc740 \ubc14\ub451\uc5d0\uc11c \uc774\uc138\ub3cc\uc744 4:1\ub85c \ub204\ub978 DeepMind (Google\uc758 \uc790\ud68c\uc0ac)\uc758 \uc54c\ud30c\uace0 (AlphaGo)\uc758 \uadfc\uac04\uc774 \ub418\ub294 \uc54c\uace0\ub9ac\uc998\uc785\ub2c8\ub2e4. \ub2e4\uc911 \ub808\uc774\uc5b4 \ud53c\ub4dc\ud3ec\uc6cc\ub4dc \ub124\ud2b8\uc6cc\ud06c\ub294 \ub2e4\uc911 \ub808\uc774\uc5b4 \ud37c\uc149\ud2b8\ub860(Multi-Layer Perceptron; MLP)\ub77c\uace0\ub3c4 \ubd88\ub9ac\uc6b0\uba70 \uc0ac\uc2e4\uc0c1 ANN \ud1a0\ud3f4\ub85c\uc9c0\uc758 \ud45c\uc900\uc774\ub77c\uace0 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ubbf8\uc9c0 \ucd9c\ucc98: http://neuralnetworksanddeeplearning.com/chap1.html \ud53c\ub4dc\ud3ec\uc6cc\ub4dc \ub124\ud2b8\uc6cc\ud06c\uc640\ub294 \ub2ec\ub9ac \ub8e8\ud504(Loop)\uc5d0 \uc758\ud574\uc11c \uc815\ubcf4\uac00 \uc591\ubc29\ud5a5\uc73c\ub85c \uc774\ub3d9\ud558\ub294 \ub124\ud2b8\uc6cc\ud06c\ub97c \ubc18\ubcf5 \ub124\ud2b8\uc6cc\ud06c(Recurrent Network) \ub610\ub294 \ud53c\ub4dc\ubc31 \ub124\ud2b8\uc6cc\ud06c(Feedback Network)\ub77c\uace0 \ud569\ub2c8\ub2e4. \ud53c\ub4dc\ubc31 \ub124\ud2b8\uc6cc\ud06c\ub294 \uc880 \ub354 \uc0dd\ubb3c\ud559\uc801\uc778 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\ub97c \ubaa8\uc0ac\ud558\uba70 \ub9e4\uc6b0 \ubcf5\uc7a1\ud55c \ud328\ud134\uc744 \ud559\uc2b5\ud558\ub294\ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \uc9c0\uc5f0(Delay)\uc744 \ucd94\uac00\ud558\uc5ec \uc8fc\uc2dd\uc2dc\uc7a5\uc758 \uc608\uce21, \ub0a0\uc528 \uc608\uce21 \ub4f1 \ub2e8\uae30 \uae30\uc5b5\uc744 \ud1b5\ud574 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc131\ub2a5\uc744 \ub192\uc77c \uc218 \uc788\uc73c\ubbc0\ub85c, \uc77c\uc815 \uae30\uac04\uc758 \uc77c\ub828\uc758 \uc774\ubca4\ud2b8\ub4e4\uc744 \uc774\ud574\ud560 \uc218 \uc788\ub294 \ub2a5\ub825\uc744 \uc9c0\ub2c8\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098, \ub108\ubb34 \ubcf5\uc7a1\ud558\uc5ec \ud604\uc7ac\ub85c\uc11c\ub294 \uc774\ub860\uc0c1\uc5d0 \uba38\ubb34\ub294 \uc218\uc900\uc774\uba70 \uc2e4\uc81c \ubb38\uc81c\uc5d0 \uac70\uc758 \uc801\uc6a9\ub418\uc9c0 \ubabb\ud558\uace0 \uc788\ub294 \uc2e4\uc815\uc785\ub2c8\ub2e4 (\uadf8\ub7fc\uc5d0\ub3c4 \uc774 \ubc29\ubc95\uc740 \uac00\uc7a5 \uc720\ub9dd\ud55c \ubc29\ubc95 \uc911 \ud558\ub098\uc778\ub370, \uc790\uc5f0\uc5b4\ucc98\ub9ac(Natural Language Processing;NLP), \ub85c\ubd07\uc81c\uc5b4, \uc778\uacf5\uc9c0\ub2a5 \uae30\ubc18 \uc791\uace1 \ub4f1 Sequence Data\ub97c \ucc98\ub9ac\ud558\ub294\ub370 \uc720\uc6a9\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4). \uc774\ubbf8\uc9c0 \uc124\uba85: Recurrent Neural Network\uc758 \uc608\uc2dc \uac01 \ub808\uc774\uc5b4 \ub0b4 \ub178\ub4dc \uac1c\uc218 \ub124\ud2b8\uc6cc\ud06c \ud1a0\ud3f4\ub85c\uc9c0\ub97c \uacb0\uc815\ud558\ub294 \ub610\ub2e4\ub978 \uc694\uc778\uc740 \uac01 \ub808\uc774\uc5b4 \ub0b4\uc5d0 \uc874\uc7ac\ud558\ub294 \ub178\ub4dc\uc758 \uac1c\uc218\uc785\ub2c8\ub2e4. \ub2f9\uc5f0\ud788 \uac01 \ub808\uc774\uc5b4\uc5d0 \ub300\ud55c \ub178\ub4dc\uc758 \uac1c\uc218\uac00 \uc99d\uac00\ud560 \uc218\ub85d \ub124\ud2b8\uc6cc\ud06c \ud1a0\ud3f4\ub85c\uc9c0\uc758 \ubcf5\uc7a1\ub3c4\ub294 \uc99d\uac00\ud569\ub2c8\ub2e4. \uc785\ub825\ub178\ub4dc\uc758 \uac1c\uc218\ub294 \uc785\ub825 \ub370\uc774\ud130\uc758 Feature\uc758 \uc218\uc5d0 \uc758\ud574 \ubbf8\ub9ac \uacb0\uc815\ub418\uba70, \ucd9c\ub825\ub178\ub4dc\uc758 \uac1c\uc218 \ub610\ud55c \ubaa8\ub378\uc758 \uacb0\uacfc\uc5d0 \ub530\ub77c \ub610\ub294 \ubaa8\ub378\uc758 \ubd84\ub958 \uc218\uc900\uc5d0 \ub530\ub77c \uacb0\uc815\ub418\uc9c0\ub9cc, \uc740\ub2c9 \ub178\ub4dc\ub4e4\uc758 \uc218\ub294 \uc0ac\uc6a9\uc790\uac00 \uc790\uc720\ub86d\uac8c \uacb0\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc740\ub2c9 \ub808\uc774\uc5b4\uc758 \ub274\ub7f0 \uac1c\uc218\ub97c \uacb0\uc815\ud558\ub294 \uc2e0\ub8b0\ud560\ub9cc\ud55c \uc5b4\ub5a4 \ubc95\uce59\uc774 \uc874\uc7ac\ud558\ub294 \uac83\uc740 \uc544\ub2c8\uc9c0\ub9cc, \uc801\uc815\ud55c \ub274\ub7f0\uc758 \uac1c\uc218\ub294 \uc785\ub825 \ub178\ub4dc, \ud559\uc2b5 \ub370\uc774\ud130 \ub7c9, \ub178\uc774\uc988 \ub370\uc774\ud130 \ub7c9, \ud559\uc2b5 \uc791\uc5c5\uc758 \ubcf5\uc7a1\ub3c4 \ub4f1\uacfc \uad00\ub828\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c \ub124\ud2b8\uc6cc\ud06c \ud1a0\ud3f4\ub85c\uc9c0\uac00 \ubcf5\uc7a1\ud560\uc218\ub85d \ub354 \ubcf5\uc7a1\ud55c \ubb38\uc81c\uc5d0 \ub300\ud55c \ud559\uc2b5\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ub178\ub4dc\uc758 \uac1c\uc218\uac00 \uc801\uc815\uc218\ubcf4\ub2e4 \uacfc\ub3c4\ud558\uac8c \ub9ce\uc744 \uacbd\uc6b0 Overfitting\uc758 \uc704\ud5d8\uc774 \uc788\uc73c\uba70, \uacc4\uc0b0\ub7c9 \ub610\ud55c \ub9ce\uc544\uc9c0\ubbc0\ub85c \ud559\uc2b5\uc18d\ub3c4\uac00 \ub290\ub824\uc9d1\ub2c8\ub2e4. \ucd5c\uc120\uc758 \uc801\uc6a9\uc740 \uc801\uc808\ud55c \uc131\ub2a5\uc744 \ub0b4\ub294 \ucd5c\uc18c\uc758 \ub178\ub4dc\uac1c\uc218\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 \uc801\uc740 \uac1c\uc218\uc758 \uc740\ub2c9 \ub178\ub4dc\ub9cc\uc73c\ub85c\ub3c4 \uc5c4\uccad\ub09c \uc591\uc758 \ud559\uc2b5 \ub2a5\ub825\uc744 \uc81c\uacf5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc5ed\uc804\ud30c \ub124\ud2b8\uc6cc\ud06c \ud1a0\ud3f4\ub85c\uc9c0 \uadf8 \uc790\uccb4\ub294 \uac13 \ud0dc\uc5b4\ub09c \uc544\uae30\ucc98\ub7fc \uc544\ubb34 \uac83\ub3c4 \ubc30\uc6b0\uc9c0 \uc54a\uc740 \ube44\uc5b4\uc788\ub294 \uc11d\ud310\uacfc\ub3c4 \uac19\uc2b5\ub2c8\ub2e4. \uc785\ub825\ub418\ub294 \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud558\ub294 \uacfc\uc815\uc744 \ud1b5\ud574 \ub274\ub7f0 \uac04 \uc5f0\uacb0\uc131\uc774 \uac15\ud654\ub418\uac70\ub098 \uc57d\ud654\ub418\uba70, \uadf8 \uacfc\uc815\uc744 \ud1b5\ud574 \ud328\ud134\uc744 \uc778\uc2dd\ud558\ub294 \uc218\uc900\uc73c\ub85c \ub124\ud2b8\uc6cc\ud06c \uc5f0\uacb0\uc5d0 \ub300\ud55c \uac00\uc911\uce58\uac00 \ud615\uc131\ub418\uc5b4 \uac11\ub2c8\ub2e4. \uc774\ub860\uc0c1\uc73c\ub85c\ub294 \uc218\uc2ed\ub144\uc804\uc5d0 \uc815\ub9bd\ub418\uc5c8\uc74c\uc5d0\ub3c4 \ubd88\uad6c\ud558\uace0, \uc5f0\uacb0 \uac00\uc911\uce58\ub97c \uc870\uc808\ud558\ub294 \uc2e0\uacbd\ub9dd \ud559\uc2b5\uc740 \ub9c9\ub300\ud55c \ucef4\ud4e8\ud130 \uc5f0\uc0b0\ub7c9\uc73c\ub85c \uc778\ud574 \ud6a8\uc728\uc801\uc778 \uc54c\uace0\ub9ac\uc998\uc774 \ubc1c\uacac\ub41c 1980\ub144\ub300 \ud6c4\ubc18\uc774 \ub418\uc5b4\uc11c\uc57c \uaca8\uc6b0 \uc2e4\uc9c8\uc801\uc778 (\uac04\ub2e8\ud55c) \ubb38\uc81c\ub97c \ud480 \uc218 \uc788\ub294 \uc218\uc900\uc774 \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8 \uc2e4\ud6a8\uc728\uc801\uc778 \uc54c\uace0\ub9ac\uc998\uc740 \ud604\uc7ac \uc5ed\uc804\ud30c(Backpropagation)\uc774\ub77c\uace0 \uc54c\ub824\uc9c4 \uc5ed\uc804\ud30c\ub418\ub294 \uc5d0\ub7ec \uc804\ub7b5( Strategy of Back-propagating Errors )\uc785\ub2c8\ub2e4. \ub2e4\ub978 \uae30\uacc4\ud559\uc2b5 \uc54c\uace0\ub9ac\uc998\ub4e4\uc5d0 \ube44\ud574 \uc5ec\uc804\ud788 \ub290\ub9ac\uae30\ub85c \uc545\uba85\uc774 \ub192\uc9c0\ub9cc, \uc601\ud654 \"\uc544\ubc14\ud0c0(Avatar)\"\uac00 \uc2a4\ud14c\ub808\uc624\uc2a4\ucf54\ud53d\uc758 \ubd80\ud765\uc744 \uc774\ub04c\uc5b4\ub0c8\ub4ef \uc5ed\uc804\ud30c \ubc29\ubc95\uc740 ANN\uc5d0 \ub2e4\uc2dc\uae08 \uad00\uc2ec\uc744 \ubaa8\uc73c\ub294 \uc6d0\ub3d9\ub825\uc774 \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uacb0\uacfc\uc801\uc73c\ub85c \uc774\uc81c\ub294 \uc5ed\uc804\ud30c \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\ub294 \ub2e4\uc911 \ub808\uc774\uc5b4 \ud53c\ub4dc\ud3ec\uc6cc\ub4dc(Multi-Layer Feedforward) \ub124\ud2b8\uc6cc\ud06c\ub294 \ub370\uc774\ud130 \ub9c8\uc774\ub2dd\uc758 \ud544\uc218\uac00 \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc5ed\uc804\ud30c \uc54c\uace0\ub9ac\uc998\uc758 \uac15\uc810\uacfc \uc57d\uc810\uc744 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: \uac15 \uc810 \uc57d \uc810 \ubd84\ub958 \ub610\ub294 \uc608\uce21 \ubb38\uc81c\uc5d0 \uc801\uc6a9 \uac00\ub2a5\ud568. \ucef4\ud4e8\ud130 \uc5f0\uc0b0\ub7c9\uc774 \ub9e4\uc6b0 \ub9ce\uace0 \ud559\uc2b5\uc18d\ub3c4\uac00 \uadf9\ud788 \ub290\ub9bc. \ud2b9\ud788 \ub124\ud2b8\uc6cc\ud06c \ud1a0\ud3f4\ub85c\uc9c0\uac00 \ubcf5\uc7a1\ud55c \uacbd\uc6b0 \ub354\uc6b1 \uc2ec\uac01\ud568. \uac70\uc758 \ubaa8\ub4e0 \uc54c\uace0\ub9ac\uc998\uc774 \ud560 \uc218 \uc788\ub294 \uac83\ubcf4\ub2e4 \ud6e8\uc52c \ub354 \ubcf5\uc7a1\ud55c \ud328\ud134\uc758 \ubaa8\ub378\ub9c1\uc774 \uac00\ub2a5\ud568. \ud559\uc2b5 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \uacfc\uc801\uc751(Ovefitting) \uacbd\ud5a5\uc774 \uac15\ud568. \ub418\ub3c4\ub85d \ub370\uc774\ud130\uc758 \uadfc\uc6d0\uc801\uc778 \uad00\uacc4\uc5d0 \ub300\ud55c \uac00\uc815\uc744 \uc801\uac8c \ud568. \ud574\uc11d\uc774 \uac70\uc758 \ubd88\uac00\ub2a5\ud558\uba70 \uac00\ub2a5\ud558\ub2e4\uace0 \ud574\ub3c4 \ub9e4\uc6b0 \uc5b4\ub835\uace0 \ubcf5\uc7a1\ud55c \ube14\ub799\ubc15\uc2a4 \ubaa8\ub378\uc784. \uc5ed\uc804\ud30c \uc54c\uace0\ub9ac\uc998\uc758 \uc77c\ubc18\uc801\uc778 \ud615\ud0dc\ub294 \ub9ce\uc740 \ubc18\ubcf5 \uc0ac\uc774\ud074\uc744 \uac16\ub294 \ub450 \uac1c\uc758 \ud504\ub85c\uc138\uc2a4\ub97c \ud3ec\ud568\ud558\uba70, \uac01 \uc0ac\uc774\ud074\uc744 Epoch\ub77c\uace0 \ud569\ub2c8\ub2e4. \ub124\ud2b8\uc6cc\ud06c\ub294 \uc5b4\ub5a0\ud55c \uc0ac\uc804 \uc9c0\uc2dd\ub3c4 \uac16\uace0 \uc788\uc9c0 \uc54a\uc73c\ubbc0\ub85c, \ucd08\uae30 \uac00\uc911\uce58\ub294 \ub79c\ub364\uc73c\ub85c \uc124\uc815\ub418\uba70, \uc815\ud574\uc9c4 \uc911\ub2e8 \uc870\uac74\uc744 \ub9cc\uc871\ud560 \ub54c\uae4c\uc9c0 \ud504\ub85c\uc138\uc2a4\ub97c \ud1b5\ud574 \ubc18\ubcf5\ub429\ub2c8\ub2e4. \uac01\uac01\uc758 Epoch\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 Phase\ub97c \ud3ec\ud568\ud569\ub2c8\ub2e4: (1) \uc21c\ubc29\ud5a5 Phase : \ub274\ub7f0\uc774 \uc785\ub825 \ub808\uc774\uc5b4\uc5d0\uc11c \ucd9c\ub825 \ub808\uc774\uc5b4 \uc21c\uc73c\ub85c \ud65c\uc131\ub418\uba70 \uadf8\uc5d0 \ub530\ub77c \ub274\ub7f0\uc758 \uac00\uc911\uce58\uc640 \ud65c\uc131 \ud568\uc218\uc744 \uc801\uc6a9\ud569\ub2c8\ub2e4. \ub9c8\uc9c0\ub9c9 \ub808\uc774\uc5b4\uc5d0 \ub3c4\ub2ec\ud558\uba74 \ucd9c\ub825\uc2e0\ud638\uac00 \uc0dd\uc131\ub429\ub2c8\ub2e4. (2) \uc5ed\ubc29\ud5a5 Phase : \uc21c\ubc29\ud5a5 Phase\uc5d0\uc11c \uc5bb\uc740 \ub124\ud2b8\uc6cc\ud06c \ucd9c\ub825\uc2e0\ud638\uc640 \ud559\uc2b5 \ub370\uc774\ud130\uc758 \uc2e4\uc81c \ud0c0\uac9f\uac12\uacfc \ube44\uad50\ud569\ub2c8\ub2e4. \uadf8 \ub450 \uac1c\uc758 \uac12 \uc0ac\uc774\uc758 \ucc28\uc774\uac00 \uc5d0\ub7ec\ub97c \uc77c\uc73c\ud0a4\uba74 \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \uc5ed\ubc29\ud5a5\uc73c\ub85c \uc804\ud30c\uc2dc\ucf1c \ub274\ub7f0\ub4e4 \uac04\uc758 \uc5f0\uacb0 \uac00\uc911\uce58\ub97c \uc218\uc815\ud558\uc5ec \ud5a5\ud6c4 \uc5d0\ub7ec\ub97c \uc9c0\uc18d\uc801\uc73c\ub85c \uc904\uc5ec\ub098\uac11\ub2c8\ub2e4. \uc774\ub7f0 \uc2dd\uc73c\ub85c \ub124\ud2b8\uc6cc\ud06c\ub294 \uc5ed\ubc29\ud5a5\uc73c\ub85c \ubcf4\ub0b8 \uc815\ubcf4\ub97c \uc774\uc6a9\ud558\uc5ec \ub124\ud2b8\uc6cc\ud06c\uc758 \uc804\uccb4 \uc5d0\ub7ec\ub97c \uc904\uc5ec\ub098\uac11\ub2c8\ub2e4. \uadf8\ub807\ub2e4\uba74 \uc774\ub54c\ucbe4 \ud558\ub098\uc758 \uc758\ubb38\uc0ac\ud56d\uc774 \ub4ed\ub2c8\ub2e4: \uacfc\uc5f0 \ub274\ub7f0\uc758 \uc785\ub825\uacfc \ucd9c\ub825 \uc0ac\uc774\uc758 \uad00\uacc4\uac00 \uadf8\ub807\uac8c \ubcf5\uc7a1\ud55c\ub300 \ub3c4\ub300\uccb4 \uc5b4\ub5bb\uac8c \uc774 \uc54c\uace0\ub9ac\uc998\uc740 \uac00\uc911\uce58\uc758 \ubcc0\ud654\ub7c9\uc744 \uacb0\uc815\ud558\ub294 \uac83\uc77c\uae4c? \uc774\uc5d0 \ub300\ud55c \ud574\ub2f5\uc740 \uae09\uacbd\uc0ac\ubc95(Steepest Descent Method)\uc5d0 \uc788\uc2b5\ub2c8\ub2e4. \uae09\uacbd\uc0ac\ubc95\uc740 \uac04\ub2e8\ud788 \uc0b0 \uc704\uc5d0\uc11c \ub208\uc744 \uac00\ub9b0 \ucc44\ub85c \uac00\uc7a5 \ub0ae\uc740 \uacf3\uc744 \ucc3e\uc544\uac08 \ub54c \uc4f0\ub294 \ubc29\ubc95\uacfc\ub3c4 \uac19\uc2b5\ub2c8\ub2e4. \uc0ac\ubc29\uc744 \uc9c0\ud321\uc774\ub85c \ub450\ub4dc\ub824\ubcf4\uace0 \uac00\uc7a5 \uacbd\uc0ac\uac00 \uc544\ub798 \ubc29\ud5a5\uc73c\ub85c \uc2ec\ud55c \uacf3\uc73c\ub85c \ud604\uc7ac \uc704\uce58\ud55c \uc9c0\uc810\uc5d0\uc11c \ud55c \ubc1c\uc790\uad6d\uac00\uace0 \uadf8 \uc704\uce58\uc5d0\uc11c \ub2e4\uc2dc \uac00\uc7a5 \uacbd\uc0ac\uac00 \uc544\ub798\ub85c \uc2ec\ud55c \ubc29\ud5a5\uc744 \ucc3e\uace0 \uadf8 \ubc29\ud5a5\uc73c\ub85c \ud55c \ubc1c\uc790\uad6d\uc529 \uc774\ub3d9\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c, \uae09\uacbd\uc0ac\ubc95\uc740 \ubc29\ud5a5\ud0d0\uc0c9(Direction Search)\uacfc \uc2a4\ud15d\ud06c\uae30 \uacb0\uc815(Step Size Determination)\uc73c\ub85c \uad6c\uc131\ub429\ub2c8\ub2e4. \uc774\ubbf8\uc9c0 \ucd9c\ucc98: http://aria42.com/blog/2014/12/understanding-lbfgs \uc704\uc758 \uc774\ubbf8\uc9c0\ub97c \uc0b4\ud3b4\ubcf4\ub3c4\ub85d \ud569\ub2c8\ub2e4. \uc0b0\uc758 \ub192\uc774\ub97c \ub4f1\uace0\uc120\uc73c\ub85c \ud45c\ud604\ud558\uc600\uc744 \ub54c \uac01 \ub4f1\uace0\uc120\uc5d0 \uc218\uc9c1\ud55c \ubc29\ud5a5(\ube68\uac04 \ud654\uc0b4\ud45c)\uc774 \uae09\uac15\ud558\ubc29\ud5a5\uc785\ub2c8\ub2e4 (\ub0b4\ubd80 \ub3d9\uc2ec\uc6d0\uc774 \uac00\uc7a5 \ub0ae\uc740 \ub4f1\uace0\uc120\uc774\ub77c \uac00\uc815). \ucc38\uace0\ub85c, \ub0b4\ubd80 \ub3d9\uc2ec\uc6d0\uc774 \uac00\uc7a5 \ub4f1\uace0\uc120 \ub192\uc774\uac00 \ud06c\ub2e4\uace0 \uac00\uc815\ud558\uba74 \ube68\uac04 \ud654\uc0b4\ud45c\ub294 \uae09\uc0c1\uc2b9(Steepest Ascent)\ubc29\ud5a5\uc774 \ub418\uba70, \uae09\uac15\ud558\uc640 \uae09\uc0c1\uc2b9\uc740 \ub2e8\uc9c0 \ubd80\ud638\uac00 \ubc14\ub010\ub2e4\ub294 \uac83\ubfd0\uc785\ub2c8\ub2e4. \uc0c1\uae30 \uc774\ubbf8\uc9c0\uc758 \ud30c\ub780 \ub4f1\uace0\uc120\uc5d0 \ud45c\uba74\ud568\uc218(Surface Function)\uc774 \\(z = f(x,y)\\) \ub85c \uc8fc\uc5b4\uc84c\ub2e4\uba74 \ud2b9\uc815 \uc704\uce58 \\((x*, y*)\\) \uc5d0\uc11c\uc758 \uae09\uac15\ud558\ubc29\ud5a5\uc740 \ub2e4\uc74c\uc758 \ubca1\ud130(Vector)\ub85c \ud45c\ud604\ub429\ub2c8\ub2e4: \\(-\\nabla f(x^{*},y^{*})=-\\begin{bmatrix}\\partial f(x^{*},y^{*})/\\partial x \\\\ \\partial f(x^{*},y^{*})/\\partial y\\end{bmatrix}\\) \uc774\uc640 \uc720\uc0ac\ud558\uac8c \uc5ed\uc804\ud30c \uc54c\uace0\ub9ac\uc998\uc740 \uac01 \ub274\ub7f0\uc758 \ud65c\uc131\ud568\uc218\uc758 \ubbf8\ubd84\uac12\uc744 \uc774\uc6a9\ud558\uc5ec \uac01\uac01\uc758 \uc720\uc785 \uac00\uc911\uce58\uc758 \ubc29\ud5a5\uc73c\ub85c \uacbd\uc0ac\ub3c4\ub97c \ud30c\uc545\ud569\ub2c8\ub2e4. \uc774 \ub54c\ubb38\uc5d0 \ud65c\uc131\ud568\uc218\uc758 \ubbf8\ubd84\uac00\ub2a5\uc131\uc774 \uc911\uc694\ud55c \uc758\ubbf8\ub97c \uc9c0\ub2d9\ub2c8\ub2e4. \uc774 \uacbd\uc0ac\ub3c4\ub294 \uac00\uc911\uce58\uc758 \ubcc0\ud654\uc5d0 \ub300\ud558\uc5ec \uc5d0\ub7ec\uc758 \uc99d\uac10\uc774 \uc5bc\ub9c8\ub098 \uae09\uc18d\ud558\uac8c \ubcc0\ud654\ub418\ub294\uc9c0\ub97c \ud310\ub2e8\ud560 \uc218 \uc788\ub294 \uae30\uc900\uc744 \uc81c\uc2dc\ud569\ub2c8\ub2e4. \uc54c\uace0\ub9ac\uc998\uc740 \ud559\uc2b5\ub960(Learning Rate)\ub77c\uace0 \ud558\ub294 \uc591\uc5d0 \uc758\ud574 \uc5d0\ub7ec\uac00 \uae09\uc18d\ub3c4\ub85c \uc791\uc544\uc9c0\ub294 \ubc29\ud5a5\uc73c\ub85c \uac00\uc911\uce58\ub97c \ubcc0\ud654\uc2dc\ud0b5\ub2c8\ub2e4. \ud559\uc2b5\ub960\uc774 \ucee4\uc9c8 \uc218\ub85d \ucd08\uae30\uc5d0\ub294 \ube60\ub974\uac8c \uc5d0\ub7ec\ub97c \uc904\uc774\ub098 \ud574(Solution) \uadfc\ucc98\uc5d0\uc11c\ub294 \uc624\ubc84\uc288\ud305(Overshooting)\uc73c\ub85c \uc778\ud574 \uc218\ub834 \uc18d\ub3c4\uac00 \ub290\ub824\uc9c0\uac70\ub098 \uc7ac\uc218\uac00 \uc5c6\ub294 \uacbd\uc6b0 \uc601\uc6d0\ud788 \uc218\ub834\ud558\uc9c0 \ubabb\ud558\ub294 \uacbd\uc6b0\uac00 \uc788\uc2b5\ub2c8\ub2e4. \ub610\ud55c, \uae09\uac15\ud558\ubc95\uc740 \uc9c0\uc5ed\ucd5c\uc18c\uac12(Local Minimum)\uc740 \ucc3e\uc744 \uc218 \uc788\uc73c\ub098 \uc804\uc5ed\ucd5c\uc18c\uac12(Global Minimum)\uc744 \ucc3e\uc9c0 \ubabb\ud558\ub294 \ub2e8\uc810\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uc81c \uc774\ub860\uc801\uc778 \uac83\uc744 \ub2e4\ub8ec Part 1.\uc744 \ub9c8\ubb34\ub9ac\ud558\uace0 Part 2.\uc5d0\uc11c\ub294 R\uc758 \uc778\uacf5\uc2e0\uacbd\ub9dd \ud328\ud0a4\uc9c0\uc778 nerualnet \uc744 \uc774\uc6a9\ud558\uc5ec ANN \uc54c\uace0\ub9ac\uc998\uc73c\ub85c \uc2e4\uc9c8\uc801\uc778 \uc608\uc81c\ub97c \ud480\uc5b4\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","title":"Introduction to Artificial Neural Network Part 1."},{"location":"posts/deep-learning/2018-11-09-IntroductionToArtificialNeuralNetworksPart1/#artificial-neural-networks","text":"\uc778\uacf5\uc2e0\uacbd\ub9dd\uc740 \uc0dd\ubb3c\uc758 \ub1cc\uac00 \uc785\ub825\ub41c \uc790\uadf9\uc5d0 \ubc18\uc751\ud558\ub294\uac00\ub97c \uc774\ud574\ud558\uc5ec \uc785\ub825 \uc2e0\ud638\uc640 \ucd9c\ub825 \uc2e0\ud638\uc5d0 \ub300\ud55c \uad00\uacc4\ub97c \ubaa8\ub378\ub9c1\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \ub274\ub7f0\uc740 \uc804\uae30 \uc2e0\ud638\ub97c \uc218\uc9d1, \ucc98\ub9ac \ubc0f \uc804\ud30c\ub97c \uc8fc\ub41c \ubaa9\uc801\uc73c\ub85c \ud558\ub294 \ub1cc\uc758 \uc138\ud3ec\uc778\ub370, \uc778\uacf5\uc2e0\uacbd\ub9dd\uc5d0 \uc788\uc5b4 \uc815\ubcf4\ub97c \ucc98\ub9ac\ud558\ub294 \uae30\ubcf8\uc801\uc778 \ub2e8\uc704\ub97c \uc778\uacf5 \ub274\ub7f0(Artificial Neuron) \ub610\ub294 \ub178\ub4dc(Node)\ub77c\uace0 \ud569\ub2c8\ub2e4. \uc778\uacf5\uc2e0\uacbd\ub9dd\uc740 \uc774\ub7ec\ud55c \uac70\ub300 \ubcd1\ub82c \ucc98\ub9ac\ub97c \uc704\ud55c \uc778\uacf5 \ub274\ub7f0\ub4e4\uc774 \uc11c\ub85c \uc5f0\uacb0\ub41c \ub124\ud2b8\uc6cc\ud06c\ub97c \uc774\uc6a9\ud558\ub294 \uac83\uc774\uba70, \ub1cc\uc758 \uc815\ubcf4 \ucc98\ub9ac \ub2a5\ub825\uc774 \uc774\ub7ec\ud55c \ub274\ub7f0\uc758 \ub124\ud2b8\uc6cc\ud06c\ub85c\ubd80\ud130 \uae30\uc778\ud55c\ub2e4\uace0 \uc0dd\uac01\ub418\uc5b4, \ucd08\ucc3d\uae30 \uc778\uacf5\uc9c0\ub2a5 \ubd84\uc57c\ub294 \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uc0dd\uc131\ud558\ub294 \uac83\uc744 \ubaa9\uc801\uc73c\ub85c \ud558\uc600\uc2b5\ub2c8\ub2e4. \uc778\uacf5\uc2e0\uacbd\ub9dd \ubd84\uc57c\uc758 \ub2e4\ub978 \uc774\ub984\uc740 \uacb0\ud569\uc124(Connectionism), \ubcd1\ub82c \ubd84\uc0b0 \ucc98\ub9ac(Parallel Distributed Processing), \uc2e0\uacbd \uacc4\uc0b0(Neural Computation) \ub4f1\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub807\ub2e4\uba74 \uc0dd\ubb3c\uc740 \uba87 \uac1c\uc758 \ub274\ub7f0\uc744 \uac00\uc9c0\uace0 \uc788\uc744\uae4c\uc694? \uc778\uac04\uc740 860\uc5b5\uac1c\uc758 \ub274\ub7f0\uc744 \uac00\uc9c0\uace0 \uc788\uc73c\uba70, \ud788\ub9d0\ub77c\uc57c \uc6d0\uc22d\uc774\ub294 63\uc5b5\uac1c, \uae4c\ub9c8\uadc0\ub294 21\uc5b5\uac1c, \uc950\ub294 7100\ub9cc\uac1c, \ubc14\ud034\ubc8c\ub808\ub294 100\ub9cc\uac1c, \ud574\ud30c\ub9ac\ub294 5,600\uac1c \uc815\ub3c4\uc758 \ub274\ub7f0\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7f0\ub370 \uac00\uc7a5 \ub9ce\uc740 \ub274\ub7f0\uc744 \uac00\uc9c0\uace0 \uc788\ub294 \uc0dd\ubb3c\uc740 \uc778\uac04\uc774 \uc544\ub2c8\ub77c \uc544\ud504\ub9ac\uce74 \ucf54\ub07c\ub9ac\uc778\ub370 \ubb34\ub824 2500\uc5b5\uac1c\ub098 \ub429\ub2c8\ub2e4. \uac1c\uccb4 \ub274\ub7f0 \uc218 \uc544\ud504\ub9ac\uce74 \ucf54\ub07c\ub9ac 257,000,000,000 \uc778\uac04 86,000,000,000 \ud788\ub9d0\ub77c\uc57c \uc6d0\uc22d\uc774 6,376,000,000 \uae4c\ub9c8\uadc0 2,171,000,000 \uace0\uc591\uc774 760,000,000 \ubb38\uc5b4 500,000,000 \uae30\ub2c8 \ud53c\uadf8 240,000,000 \uace8\ub4e0 \ud584\uc2a4\ud130 90,000,000 \uac1c\uad6c\ub9ac 16,000,000 \ubc14\ud034\ubc8c\ub808 1,000,000 \uac1c\ubbf8 250,000 \uacfc\uc77c \ud30c\ub9ac 250,000 \ud574\ud30c\ub9ac 5,600 \ucd9c\uc800: wkipedia.org \uc778\ub958\uc5d0\uac8c \ubd88\ud589\uc778\uc9c0 \ub2e4\ud589\uc778\uc9c0\ub294 \ubab0\ub77c\ub3c4 \ud604\uc7ac\uc758 \uc778\uacf5\uc2e0\uacbd\ub9dd\uc740 \uace0\uc791 \uc218\ubc31\uac1c\uc758 \ub274\ub7f0\uc744 \uac00\uc9c0\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 \uac00\uae4c\uc6b4 \ubbf8\ub798\uc5d0 \uae30\uacc4\uac00 \uc778\ub958\ub97c \uc704\ud611\ud560 \uac00\ub2a5\uc131\uc740 \uc5c6\uc5b4 \ubcf4\uc785\ub2c8\ub2e4. \uadf8\ub807\uc9c0\ub9cc, \ub2e4\uc591\ud55c \uc5f0\uad6c\uac00 \ube60\ub974\uac8c \uc9c4\ud589\ub418\uc5b4 \uac00\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 \uc778\uacf5\uc9c0\ub2a5\uc758 \ubc1c\uc804 \uc18d\ub3c4\ub294 \uc810\uc810 \uac00\uc18d\ud654 \ub418\uc5b4 \uac00\uace0 \uc788\uc73c\uba70, Neurorobotics \ubd84\uc57c\uc5d0\uc11c\ub294 \uc778\uac04\uc774 \ub9cc\ub4e0 \ucef4\ud4e8\ud130 \uc54c\uace0\ub9ac\uc998\uc774 \uc544\ub2cc \uc950\uc758 \ub1cc\ub97c \uc774\uc6a9\ud558\uc5ec \uc21c\uc218 \ub274\ub7f0\uc744 \uc5f0\uacb0\ud55c \ub124\ud2b8\uc6cc\ud06c\ub97c \ud1b5\ud574 \ubaa8\ud130\ub97c \uc81c\uc5b4\ud558\ub294 \ub2e8\uacc4\uc5d0\uae4c\uc9c0 \uc774\ub974\ub800\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \uc601\uc0c1\uc744 \uac10\uc0c1\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4(\uc18c\ub984\uc8fc\uc758). ANN \ucd08\uae30 50\ub144\uac04\uc5d0\ub294 AND, OR, NOT \ub4f1 \uac04\ub2e8\ud55c \ub17c\ub9ac\ub97c \ucc98\ub9ac\ud558\ub294 \uc218\uc900\uc73c\ub85c \ub1cc\uc758 \ub3d9\uc791\uc744 \uc2dc\ubbac\ub808\uc774\uc158\ud558\ub294 \uc218\uc900\uc774\uc5c8\uc73c\ub098, \uacfc\ud559\uc790\ub4e4\uc774 \uc0dd\ubb3c\ud559\uc801 \ub1cc\uc758 \uc791\ub3d9\uc6d0\ub9ac\ub97c \uc774\ud574\ud558\ub294\ub370 \uc788\uc5b4 \ub9ce\uc740 \ub3c4\uc6c0\uc744 \uc8fc\uc5c8\uc2b5\ub2c8\ub2e4. \ucd5c\uadfc \ucef4\ud4e8\ud305 \ud30c\uc6cc\uac00 \ud3ed\ubc1c\uc801\uc73c\ub85c \ubc1c\uc804\ud568\uc5d0 \ub530\ub77c ANN\uc740 \uc2e4\uc81c\uc801\uc778 \ubb38\uc81c\ub97c \ud478\ub294\ub370 \ubcf4\ub2e4 \uc801\uadf9\uc801\uc73c\ub85c \ud65c\uc6a9\ub418\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc0ac\ubb3c\uc778\uc2dd, \uc74c\uc131\uc778\uc2dd, \uc790\uc728\uc8fc\ud589\ucc28, \ub0a0\uc528\uc608\uce21\uacfc \uac19\uc740 \uc790\uc5f0\ud604\uc0c1\uc758 \uc608\uce21\uacfc \uc0ac\ud68c\ud604\uc0c1\uc758 \uc608\uce21\uc5d0\ub3c4 \ud65c\uc6a9\ub418\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc989, ANN\uc740 \ubd84\ub958(Classification), \uc218\uce58 \uc608\uce21, \uc790\uc728 \ud328\ud134 \uc778\uc2dd(Unsupervised Pattern Recognition) \ub4f1\uc5d0 \ud65c\uc6a9\ud560 \uc218 \uc788\uc744 \uc815\ub3c4\ub85c \ub2e4\uc7ac\ub2e4\ub2a5\ud569\ub2c8\ub2e4. ANN\uc740 \uc785\ub825 \ub370\uc774\ud130\uc640 \ucd9c\ub825 \ub370\uc774\ud130\uac00 \uc798 \uc815\uc758\ub418\uc5b4 \uc788\ub294 \ubb38\uc81c\uc5d0 \uac00\uc7a5 \uc801\ud569\ud55c\ub370, \uc785\ub825 \ub370\uc774\ud130\uc640 \ucd9c\ub825 \ub370\uc774\ud130 \uac04\uc758 \uad00\uacc4\ub97c \uc815\uc758\ud558\ub294 \uac83\uc740 \ub108\ubb34\ub098\ub3c4 \ubcf5\uc7a1\ud569\ub2c8\ub2e4.","title":"\uc778\uacf5\uc2e0\uacbd\ub9dd(Artificial Neural Networks) \uac1c\uc694"},{"location":"posts/deep-learning/2018-11-09-IntroductionToArtificialNeuralNetworksPart1/#_1","text":"\uc778\uacf5\uc2e0\uacbd\ub9dd\uc740 \uc778\uac04\uc758 \ub450\ub1cc\ub97c \ubaa8\uc0ac\ud55c \uac83\uc774\ubbc0\ub85c \uc778\uacbd\uc2e0\uacbd\ub9dd\uc758 \ub3d9\uc791 \uc6d0\ub9ac\ub97c \uc774\ud574\ud558\ub824\uba74 \ub274\ub7f0(Neuron)\uc758 \ub3d9\uc791 \uc6d0\ub9ac\ub97c \uc774\ud574\ud558\ub294 \uac83\uc774 \uc911\uc694\ud569\ub2c8\ub2e4. \uc0dd\ud654\ud559 \ud504\ub85c\uc138\uc2a4\ub97c \ud1b5\ud574 \uc138\ud3ec\uc758 \uc218\uc0c1\ub3cc\uae30(Dendrite)\ub85c \uc785\ub825\uc2e0\ud638\uac00 \ub4e4\uc5b4\uc624\uba74, \uadf8 \ucc98\ub9ac\uc758 \uc911\uc694\ub3c4\uc5d0 \ub530\ub77c \uc784\ud384\uc2a4\uc5d0 \uac00\uc911\uce58\ub97c \ubd80\uc5ec\ud569\ub2c8\ub2e4. \uc138\ud3ec\uccb4\ub294 \uc785\ub825\uc2e0\ud638\ub97c \ub204\uc801\ud558\uace0 \ub204\uc801\ub41c \uc785\ub825\uc2e0\ud638\uac00 \uc77c\uc815 \uc784\uacc4\uce58\ub97c \ub118\uc5b4\uc11c\uba74 \uc804\uae30\ud654\ud559 \ud504\ub85c\uc138\uc2a4\ub97c \ud1b5\ud574 \ucd9c\ub825\uc2e0\ud638\ub294 \ucd95\uc0c9\ub3cc\uae30(Axon)\ub85c \uc804\ub2ec\ub429\ub2c8\ub2e4. \ucd95\uc0c9\ub3cc\uae30 \uc885\ub2e8(Axon Terminal)\uc5d0\uc11c \uc804\uae30\uc2e0\ud638\ub294 \ud654\ud559\uc2e0\ud638\ub85c \ucc98\ub9ac\ub418\uc5b4 \ub274\ub7f0 \uac04\uc758 \uc791\uc740 \uac04\uadf9\uc778 \uc2dc\ub0c5\uc2a4(Synapse)\ub97c \ud1b5\ud574 \uc774\uc6c3\uc758 \ub274\ub7f0\uc73c\ub85c \uc804\ub2ec\ub429\ub2c8\ub2e4. \uc2e0\uacbd\ub9dd \uad6c\uc870 \ub2e8\uc77c \uc778\uacf5 \ub274\ub7f0 \ubaa8\ub378\uc740 \uc0dd\ubb3c\ud559\uc801 \ubaa8\ub378\uacfc \uc720\uc0ac\ud558\uac8c \uc774\ud574\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798 \uadf8\ub9bc\uc5d0\uc11c, \ub178\ub4dc \\(j\\) \uc5d0\uc11c \\(i\\) \ub85c\uc758 \ub9c1\ud06c\ub294 \\(j\\) \uc5d0\uc11c \\(i\\) \ub85c\uc758 \ud65c\uc131 \\(a_j\\) \ub97c \uc804\ud30c\ud558\ub294 \uc5ed\ud560\uc744 \ud569\ub2c8\ub2e4. \uac01 \ub9c1\ud06c\ub294 \uc774 \ub9c1\ud06c\uc640 \uad00\ub828\ub41c \uac00\uc911\uce58 \\(w_{j,i}\\) \ub97c \uac16\ub294\ub370, \uc5f0\uacb0\uc131\uc758 \uac15\ub3c4(Strength) \ubc0f \ubd80\ud638(Sign)\ub97c \uacb0\uc815\ud569\ub2c8\ub2e4. \uc778\uacf5\uc2e0\uacbd\ub9dd \uad6c\uc870 \uac01 \ub178\ub4dc \\(i\\) \ub294 \uba3c\uc800 \uc785\ub825\uc2e0\ud638\uc758 \uac00\uc911\uce58\ud569(Weighted Sum)\uc744 \uacc4\uc0b0\ud569\ub2c8\ub2e4: \\[\\mathbf{Input} = \\sum_{j}^{n} w_{j,i}a_{j}\\] \uc774\uc81c \ucd9c\ub825\uc744 \uc5bb\uc73c\ub824\uba74 \ud65c\uc131 \ud568\uc218(Activation Function) \\(\\mathscr{F}\\) \ub97c \uc801\uc6a9\ud569\ub2c8\ub2e4: \\[a_{i}=\\mathscr{F}(\\mathbf{Input}_{i})=\\mathscr{F}\\begin{pmatrix}\\sum_{j=1}^{n}{W_{j,i}a_{j}}\\end{pmatrix}\\] \ud2b9\ud788 \\(w_{0,i}\\) \ub97c \uace0\uc815 \uc785\ub825 \\(a_{0} = -1\\) \uc5d0 \uc5f0\uacb0\ub41c \ud3b8\ud5a5 \uac00\uc911\uce58\ub77c\uace0 \ud569\ub2c8\ub2e4. \uc774\ub7f0 \ubc29\uc2dd\uc73c\ub85c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc740 \ubcf5\uc7a1\ud55c \ubaa8\ub378\uc744 \uc138\uc6b0\uae30 \uc704\ud55c \uad6c\uc131\uc694\uc18c\ub85c \ub274\ub7f0\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc218\ub9ce\uc740 \uc778\uacf5\uc2e0\uacbd\ub9dd \uc54c\uace0\ub9ac\uc998\uc774 \uc874\uc7ac\ud558\uc9c0\ub9cc, \uc774\ub4e4\uc740 \uacf5\ub3d9\uc801\uc73c\ub85c \ub2e4\uc74c\uacfc \uac19\uc740 \ud2b9\uc9d5\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4: \ud65c\uc131 \ud568\uc218(Activation Function) : \ub274\ub7f0\uc5d0 \uc5f0\uacb0\ub41c \uc785\ub825\uc2e0\ud638\ub4e4\uc744 \ub2e8\uc77c \ucd9c\ub825\uc2e0\ud638\ub85c \ubcc0\ud658\ud558\uc5ec \uc774\uc6c3 \ub274\ub7f0\uc73c\ub85c \uc804\ud30c\ud569\ub2c8\ub2e4. \ub124\ud2b8\uc6cc\ud06c \ud1a0\ud3f4\ub85c\uc9c0(Network Topology) : \ubaa8\ub378\uc758 \ub274\ub7f0\uacfc \uacc4\uce35(Layer)\uc774 \uc5f0\uacb0\ub418\uc5b4 \uc788\ub294 \uad6c\uc870\uc785\ub2c8\ub2e4. \ud559\uc2b5 \uc54c\uace0\ub9ac\uc998(Training Algorithm) : \uc785\ub825\uc2e0\ud638\uc5d0 \ub300\uc751\ud558\uc5ec \ub274\ub7f0\uc744 \uc5b5\uc81c\ud558\uac70\ub098 \uc5ec\uae30\uc2dc\ud0a4\uae30 \uc704\ud55c \uc5f0\uacb0 \uac00\uc911\uce58\ub97c \uacb0\uc815\ud569\ub2c8\ub2e4.","title":"\uc778\uacf5\uc2e0\uacbd\ub9dd  \ubaa8\ub378"},{"location":"posts/deep-learning/2018-11-09-IntroductionToArtificialNeuralNetworksPart1/#_2","text":"","title":""},{"location":"posts/deep-learning/2018-11-09-IntroductionToArtificialNeuralNetworksPart1/#activation-function","text":"\ud65c\uc131 \ud568\uc218\ub294 \uc778\uacf5 \ub274\ub7f0\uc774 \uc720\uc785\ub418\ub294 \uc815\ubcf4\ub97c \ucc98\ub9ac\ud558\uace0 \uad6c\uc131\ub41c \ub124\ud2b8\uc6cc\ud06c\ub85c \uc804\ub2ec\ud558\ub294 \uba54\ucee4\ub2c8\uc998\uc785\ub2c8\ub2e4. \uc778\uacf5\uc2e0\uacbd\ub9dd\uc774 \uc0dd\ubb3c\ud559\uc801 \uc2e0\uacbd\ub9dd\uc744 \ubaa8\uc0ac\ud558\ub4ef \ud65c\uc131\ud568\uc218 \ub610\ud55c \uc0dd\ubb3c\ud559\uc801\uc778 \ud2b9\uc9d5\uc744 \ubc18\uc601\ud558\ub294 \ubaa8\ub378\uc744 \ucc44\uc6a9\ud569\ub2c8\ub2e4. \uc0dd\ubb3c\ud559\uc801\uc778 \uce21\uba74\uc73c\ub85c \ubcfc \ub54c, \ud65c\uc131\ud568\uc218\ub294 \uc785\ub825\uc2e0\ud638\ub97c \uac00\uc911\uce58\ud569\uc744 \uacc4\uc0b0\ud558\uc5ec \uc774 \uac12\uc774 \uc815\ud574\uc9c4 \uc784\uacc4\uce58\ub97c \ub118\ub294\uc9c0 \uacb0\uc815\ud569\ub2c8\ub2e4. \ub9cc\uc57d \uc784\uacc4\uce58\ub97c \ub118\uc9c0 \ubabb\ud560 \uacbd\uc6b0 \uc544\ubb34 \uc77c\ub3c4 \ud558\uc9c0 \uc54a\ub294\ub370, \uc774\ub97c \uc784\uacc4 \ud65c\uc131 \ud568\uc218(Threshold Activation Function) (\uc544\ub798 \uadf8\ub9bc (a))\uc774\ub77c\uace0 \ud569\ub2c8\ub2e4. \ud65c\uc131\ud654 \ud568\uc218 \uc608\uc2dc \ub2e8\uc704 \uc2a4\ud15d \ud65c\uc131 \ud568\uc218(\ub610\ub294 \uc784\uacc4 \ud65c\uc131 \ud568\uc218)\ub294 \uc0dd\ubb3c\ud559\uc758 \ub3d9\uc791\uc6d0\ub9ac\uc5d0 \ubd80\ud569\ub418\uae30\ub294 \ud558\uc9c0\ub9cc \uc218\ud559\uc801 \ud2b9\uc131\uc774 \ubc14\ub78c\uc9c1\ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \uc778\uacf5\uc2e0\uacbd\ub9dd\uc5d0\uc11c \uac70\uc758 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uac00\uc7a5 \ub110\ub9ac \uc0ac\uc6a9\ub418\ub294 \ud568\uc218\ub294 Sigmoid \ud65c\uc131 \ud568\uc218(\ub610\ub294 Logistic Sigmoid\ub77c\uace0\ub3c4 \ud568)(\uc704\uc758 \uadf8\ub9bc (b))\uc785\ub2c8\ub2e4(\uc0ac\uc2e4, Sigmoid \ud568\uc218\ub3c4 Saturation \ubc0f Non-zero Centered \ud2b9\uc131\uc73c\ub85c \uc778\ud574 \uc2e4\ubb34\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ubc14\ub78c\uc9c1\ud558\uc9c0 \uc54a\uc73c\uba70, \ucd5c\uadfc Rectifier Linear Unit;ReLU\uc774 \uc2e4\ubb34\uc5d0\uc11c \uac00\uc7a5 \ub110\ub9ac \uc0ac\uc6a9\ub429\ub2c8\ub2e4). \ucd9c\ub825\uc2e0\ud638\uc758 \ubc94\uc704\ub294 \ubaa8\ub450 [0, +1]\uc774\uc9c0\ub9cc Sigmoid \ud568\uc218\ub294 \uc785\ub825\uc2e0\ud638 \ubc94\uc704 \uc804\uccb4\uc5d0\uc11c \ubbf8\ubd84\uac00\ub2a5\ud569\ub2c8\ub2e4. Sigmoid \ud65c\uc131\ud568\uc218\uc758 \ubbf8\ubd84\uac00\ub2a5 \ud2b9\uc131 \ub355\ubd84\uc5d0 ANN \ucd5c\uc801\ud654 \uc54c\uace0\ub9ac\uc998\uc744 \uc801\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ud65c\uc131 \ud568\uc218(Activation Function)"},{"location":"posts/deep-learning/2018-11-09-IntroductionToArtificialNeuralNetworksPart1/#network-topology","text":"\ud1a0\ud3f4\ub85c\uc9c0(Topology)\ub294 \uc6b0\ub9ac\ub9d0\ub85c \uc704\uc0c1\uae30\ud558\ud559\uc774\ub77c\uace0 \ud558\uba70, \uc624\ube0c\uc81d\ud2b8\uc758 \uc5f0\uacb0\uc131(Connectivity)\uc640 \uad00\ub828\uc774 \uc788\uc2b5\ub2c8\ub2e4. ANN\uc5d0\uc11c\uc758 \ud1a0\ud3f4\ub85c\uc9c0\ub294 \ub274\ub7f0 \uac04\uc758 \uc5f0\uacb0\uad6c\uc870(\ub610\ub294 \ud328\ud134)\ub97c \uc758\ubbf8\ud558\uba70, \uc774 \uc5f0\uacb0\uad6c\uc870\uac00 ANN\uc758 \ud559\uc2b5\ub2a5\ub825\uc744 \uacb0\uc815\ud569\ub2c8\ub2e4. \ud1a0\ud3f4\ub85c\uc9c0\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ubd84\ub958\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \ub808\uc774\uc5b4\uc758 \uac1c\uc218 \ub124\ud2b8\uc6cc\ud06c \ub0b4\uc758 \uc815\ubcf4\uc758 \uc5ed\ubc29\ud5a5 \uc774\ub3d9 \uac00\ub2a5\uc131 \ub124\ud2b8\uc6cc\ud06c\uc758 \uac01 \ub808\uc774\uc5b4\uc758 \ub178\ub4dc \uac1c\uc218 \ud1a0\ud3f4\ub85c\uc9c0\ub294 \ub124\ud2b8\uc6cc\ud06c\ub97c \ud1b5\ud574 \ud559\uc2b5 \uac00\ub2a5\ud55c \ud0dc\uc2a4\ud06c\uc758 \ubcf5\uc7a1\uc131\uc744 \uacb0\uc815\ud558\uba70, \uc77c\ubc18\uc801\uc73c\ub85c \ub124\ud2b8\uc6cc\ud06c\uac00 \ubcf5\uc7a1\ud574\uc9c0\uace0 \uaddc\ubaa8\uac00 \ucee4\uc9c8\uc218\ub85d \ub2e4\uc591\ud55c \ud328\ud134\uacfc \ubcf5\uc7a1\ud55c \uacb0\uc815 \uacbd\uacc4\ub97c \uc2dd\ubcc4\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub124\ud2b8\uc6cc\ud06c\uc758 \uc131\ub2a5\uc740 \uadf8 \ud06c\uae30\ubfd0\ub9cc \uc544\ub2c8\ub77c \ub178\ub4dc\ub4e4\uc774 \uc5b4\ub5bb\uac8c \ubc30\uce58\ub418\uc5b4 \uc788\ub294\uac00\uc5d0 \uc758\ud574\uc11c\ub3c4 \uacb0\uc815\ub429\ub2c8\ub2e4.","title":"\ub124\ud2b8\uc6cc\ud06c \ud1a0\ud3f4\ub85c\uc9c0(Network Topology)"},{"location":"posts/deep-learning/2018-11-09-IntroductionToArtificialNeuralNetworksPart1/#layer","text":"ANN\uc758 \ucc98\ub9ac \ub2a5\ub825\uc740 \uace7 \ub808\uc774\uc5b4\uc758 \uac1c\uc218\uc640 \ubc00\uc811\ud55c \uad00\uacc4\uac00 \uc788\uc2b5\ub2c8\ub2e4. \ub808\uc774\uc5b4\ub294 \uc785\ub825\ub178\ub4dc\uc640 \ucd9c\ub825\ub178\ub4dc\uc758 \uc9d1\ud569\uccb4\uc774\uba70, \uc785\ub825\ub178\ub4dc\ub294 \uc785\ub825 \ub370\uc774\ud130\ub85c\ubd80\ud130 \uc2e0\ud638\ub97c \ubc1b\ub294 \ub274\ub7f0\uc744 \uc77c\uceeb\uc2b5\ub2c8\ub2e4. \uac01 \uc785\ub825\ub178\ub4dc\ub294 \ud65c\uc131\ud568\uc218\ub97c \ud1b5\ud574 \uc785\ub825\uc2e0\ud638\ub97c \ubcc0\ud658\ud558\uba70 \uc774\ub97c \ucd9c\ub825\ub178\ub4dc\ub85c \uc804\ub2ec\ud55c\ub2e4. \uc544\ub798 \uadf8\ub9bc\uc740 2\uac1c\uc758 \uc785\ub825\ub370\uc774\ud130\uc640 2\uac1c\uc758 \uc785\ub825 \ub178\ub4dc\ub85c \uad6c\uc131\ub41c 1\uac1c\uc758 \uc740\ub2c9 \ub808\uc774\uc5b4(Hidden Layer)\ub85c \uad6c\uc131\ub41c \uac04\ub2e8\ud55c ANN \ubaa8\ub378\uc774\uba70, \ub808\uc774\uc5b4\uac00 1\uac1c \uc874\uc7ac\ud558\ubbc0\ub85c \ub2e8\uc77c \ub808\uc774\uc5b4 \ub124\ud2b8\uc6cc\ud06c(Single-Layer Network)\ub77c\uace0 \ud569\ub2c8\ub2e4. \uc774 \ubaa8\ub378\uc740 \ub108\ubb34 \ub2e8\uc21c\ud558\ubbc0\ub85c \uc120\ud615\uc73c\ub85c \ubd84\ub958\uac00\ub2a5\ud55c(Linearly Separable) \ud328\ud134\uc5d0 \ub300\ud55c \ubb38\uc81c\uc5d0\ub9cc \uc801\uc6a9\uc774 \uac00\ub2a5\ud558\uba70, \ubcf4\ub2e4 \uc815\uad50\ud55c \ubb38\uc81c\ub97c \ud480\uae30 \uc704\ud574\uc11c\ub294 \uc880 \ub354 \ubcf5\uc7a1\ud55c \ubaa8\ub378\uc774 \uc694\uad6c\ub429\ub2c8\ub2e4. \uc544\ub798 \uadf8\ub9bc\uacfc \uac19\uc774 1\uac1c \uc774\uc0c1\uc758 \uc740\ub2c9 \ub808\uc774\uc5b4\uac00 \ucd94\uac00\ub41c \ub124\ud2b8\uc6cc\ud06c\ub97c \ub2e4\uc911 \ub808\uc774\uc5b4 \ub124\ud2b8\uc6cc\ud06c(Multi-Layer Network)\ub77c\uace0 \ud558\uba70, \uc785\ub825\ub178\ub4dc\ub4e4\uc5d0\uc11c \ucd9c\ub825\ub178\ub4dc \uc0ac\uc774\uc5d0 \uc740\ub2c9 \ub178\ub4dc\ub4e4\uc774 \uc874\uc7ac\ud569\ub2c8\ub2e4.","title":"\ub808\uc774\uc5b4(Layer)\uc758 \uac1c\uc218"},{"location":"posts/deep-learning/2018-11-09-IntroductionToArtificialNeuralNetworksPart1/#_3","text":"\uc55e\uc11c \uc5b8\uae09\ud55c \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \uc815\ubcf4\ub294 \ud56d\uc0c1 \uc785\ub825\ub178\ub4dc\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \ucd9c\ub825\ub178\ub4dc\ub85c \uc885\uacb0\ub418\ub294 \uad6c\uc870\uc600\uc2b5\ub2c8\ub2e4. \uc774\ucc98\ub7fc \uc815\ubcf4\uac00 \ud55c \ubc29\ud5a5\uc73c\ub85c\ub9cc \uc9c4\ud589\ub418\ub294 \ub124\ud2b8\uc6cc\ud06c\ub97c \ud53c\ub4dc\ud3ec\uc6cc\ub4dc \ub124\ud2b8\uc6cc\ud06c(Feedforward Network)\ub77c\uace0 \ud558\uba70, \ud2b9\ud788 \uc544\ub798\uc758 \uadf8\ub9bc\uacfc \uac19\uc774 \ub2e4\uc911\uc758 \uc740\ub2c9 \ub808\uc774\uc5b4, \uc989 2\uac1c \uc774\uc0c1\uc758 \uc740\ub2c9 \ub808\uc774\uc5b4\ub97c \uac16\ub294 \ub124\ud2b8\uc6cc\ud06c \uad6c\uc870\ub97c \ub525 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c(Deep Neural Network; DNN)\ub77c\uace0 \ud558\uba70, \uc774\ub97c \uc774\uc6a9\ud55c Learning(Training)\uc744 \ub525 \ub7ec\ub2dd(Deep Learning)\uc774\ub77c\uace0 \ud569\ub2c8\ub2e4. \ub525 \ub7ec\ub2dd\uc740 \ubc14\ub451\uc5d0\uc11c \uc774\uc138\ub3cc\uc744 4:1\ub85c \ub204\ub978 DeepMind (Google\uc758 \uc790\ud68c\uc0ac)\uc758 \uc54c\ud30c\uace0 (AlphaGo)\uc758 \uadfc\uac04\uc774 \ub418\ub294 \uc54c\uace0\ub9ac\uc998\uc785\ub2c8\ub2e4. \ub2e4\uc911 \ub808\uc774\uc5b4 \ud53c\ub4dc\ud3ec\uc6cc\ub4dc \ub124\ud2b8\uc6cc\ud06c\ub294 \ub2e4\uc911 \ub808\uc774\uc5b4 \ud37c\uc149\ud2b8\ub860(Multi-Layer Perceptron; MLP)\ub77c\uace0\ub3c4 \ubd88\ub9ac\uc6b0\uba70 \uc0ac\uc2e4\uc0c1 ANN \ud1a0\ud3f4\ub85c\uc9c0\uc758 \ud45c\uc900\uc774\ub77c\uace0 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ubbf8\uc9c0 \ucd9c\ucc98: http://neuralnetworksanddeeplearning.com/chap1.html \ud53c\ub4dc\ud3ec\uc6cc\ub4dc \ub124\ud2b8\uc6cc\ud06c\uc640\ub294 \ub2ec\ub9ac \ub8e8\ud504(Loop)\uc5d0 \uc758\ud574\uc11c \uc815\ubcf4\uac00 \uc591\ubc29\ud5a5\uc73c\ub85c \uc774\ub3d9\ud558\ub294 \ub124\ud2b8\uc6cc\ud06c\ub97c \ubc18\ubcf5 \ub124\ud2b8\uc6cc\ud06c(Recurrent Network) \ub610\ub294 \ud53c\ub4dc\ubc31 \ub124\ud2b8\uc6cc\ud06c(Feedback Network)\ub77c\uace0 \ud569\ub2c8\ub2e4. \ud53c\ub4dc\ubc31 \ub124\ud2b8\uc6cc\ud06c\ub294 \uc880 \ub354 \uc0dd\ubb3c\ud559\uc801\uc778 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\ub97c \ubaa8\uc0ac\ud558\uba70 \ub9e4\uc6b0 \ubcf5\uc7a1\ud55c \ud328\ud134\uc744 \ud559\uc2b5\ud558\ub294\ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \uc9c0\uc5f0(Delay)\uc744 \ucd94\uac00\ud558\uc5ec \uc8fc\uc2dd\uc2dc\uc7a5\uc758 \uc608\uce21, \ub0a0\uc528 \uc608\uce21 \ub4f1 \ub2e8\uae30 \uae30\uc5b5\uc744 \ud1b5\ud574 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc131\ub2a5\uc744 \ub192\uc77c \uc218 \uc788\uc73c\ubbc0\ub85c, \uc77c\uc815 \uae30\uac04\uc758 \uc77c\ub828\uc758 \uc774\ubca4\ud2b8\ub4e4\uc744 \uc774\ud574\ud560 \uc218 \uc788\ub294 \ub2a5\ub825\uc744 \uc9c0\ub2c8\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098, \ub108\ubb34 \ubcf5\uc7a1\ud558\uc5ec \ud604\uc7ac\ub85c\uc11c\ub294 \uc774\ub860\uc0c1\uc5d0 \uba38\ubb34\ub294 \uc218\uc900\uc774\uba70 \uc2e4\uc81c \ubb38\uc81c\uc5d0 \uac70\uc758 \uc801\uc6a9\ub418\uc9c0 \ubabb\ud558\uace0 \uc788\ub294 \uc2e4\uc815\uc785\ub2c8\ub2e4 (\uadf8\ub7fc\uc5d0\ub3c4 \uc774 \ubc29\ubc95\uc740 \uac00\uc7a5 \uc720\ub9dd\ud55c \ubc29\ubc95 \uc911 \ud558\ub098\uc778\ub370, \uc790\uc5f0\uc5b4\ucc98\ub9ac(Natural Language Processing;NLP), \ub85c\ubd07\uc81c\uc5b4, \uc778\uacf5\uc9c0\ub2a5 \uae30\ubc18 \uc791\uace1 \ub4f1 Sequence Data\ub97c \ucc98\ub9ac\ud558\ub294\ub370 \uc720\uc6a9\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4). \uc774\ubbf8\uc9c0 \uc124\uba85: Recurrent Neural Network\uc758 \uc608\uc2dc","title":"\uc815\ubcf4\uc758 \uc774\ub3d9 \ubc29\ud5a5"},{"location":"posts/deep-learning/2018-11-09-IntroductionToArtificialNeuralNetworksPart1/#_4","text":"\ub124\ud2b8\uc6cc\ud06c \ud1a0\ud3f4\ub85c\uc9c0\ub97c \uacb0\uc815\ud558\ub294 \ub610\ub2e4\ub978 \uc694\uc778\uc740 \uac01 \ub808\uc774\uc5b4 \ub0b4\uc5d0 \uc874\uc7ac\ud558\ub294 \ub178\ub4dc\uc758 \uac1c\uc218\uc785\ub2c8\ub2e4. \ub2f9\uc5f0\ud788 \uac01 \ub808\uc774\uc5b4\uc5d0 \ub300\ud55c \ub178\ub4dc\uc758 \uac1c\uc218\uac00 \uc99d\uac00\ud560 \uc218\ub85d \ub124\ud2b8\uc6cc\ud06c \ud1a0\ud3f4\ub85c\uc9c0\uc758 \ubcf5\uc7a1\ub3c4\ub294 \uc99d\uac00\ud569\ub2c8\ub2e4. \uc785\ub825\ub178\ub4dc\uc758 \uac1c\uc218\ub294 \uc785\ub825 \ub370\uc774\ud130\uc758 Feature\uc758 \uc218\uc5d0 \uc758\ud574 \ubbf8\ub9ac \uacb0\uc815\ub418\uba70, \ucd9c\ub825\ub178\ub4dc\uc758 \uac1c\uc218 \ub610\ud55c \ubaa8\ub378\uc758 \uacb0\uacfc\uc5d0 \ub530\ub77c \ub610\ub294 \ubaa8\ub378\uc758 \ubd84\ub958 \uc218\uc900\uc5d0 \ub530\ub77c \uacb0\uc815\ub418\uc9c0\ub9cc, \uc740\ub2c9 \ub178\ub4dc\ub4e4\uc758 \uc218\ub294 \uc0ac\uc6a9\uc790\uac00 \uc790\uc720\ub86d\uac8c \uacb0\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc740\ub2c9 \ub808\uc774\uc5b4\uc758 \ub274\ub7f0 \uac1c\uc218\ub97c \uacb0\uc815\ud558\ub294 \uc2e0\ub8b0\ud560\ub9cc\ud55c \uc5b4\ub5a4 \ubc95\uce59\uc774 \uc874\uc7ac\ud558\ub294 \uac83\uc740 \uc544\ub2c8\uc9c0\ub9cc, \uc801\uc815\ud55c \ub274\ub7f0\uc758 \uac1c\uc218\ub294 \uc785\ub825 \ub178\ub4dc, \ud559\uc2b5 \ub370\uc774\ud130 \ub7c9, \ub178\uc774\uc988 \ub370\uc774\ud130 \ub7c9, \ud559\uc2b5 \uc791\uc5c5\uc758 \ubcf5\uc7a1\ub3c4 \ub4f1\uacfc \uad00\ub828\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c \ub124\ud2b8\uc6cc\ud06c \ud1a0\ud3f4\ub85c\uc9c0\uac00 \ubcf5\uc7a1\ud560\uc218\ub85d \ub354 \ubcf5\uc7a1\ud55c \ubb38\uc81c\uc5d0 \ub300\ud55c \ud559\uc2b5\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ub178\ub4dc\uc758 \uac1c\uc218\uac00 \uc801\uc815\uc218\ubcf4\ub2e4 \uacfc\ub3c4\ud558\uac8c \ub9ce\uc744 \uacbd\uc6b0 Overfitting\uc758 \uc704\ud5d8\uc774 \uc788\uc73c\uba70, \uacc4\uc0b0\ub7c9 \ub610\ud55c \ub9ce\uc544\uc9c0\ubbc0\ub85c \ud559\uc2b5\uc18d\ub3c4\uac00 \ub290\ub824\uc9d1\ub2c8\ub2e4. \ucd5c\uc120\uc758 \uc801\uc6a9\uc740 \uc801\uc808\ud55c \uc131\ub2a5\uc744 \ub0b4\ub294 \ucd5c\uc18c\uc758 \ub178\ub4dc\uac1c\uc218\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 \uc801\uc740 \uac1c\uc218\uc758 \uc740\ub2c9 \ub178\ub4dc\ub9cc\uc73c\ub85c\ub3c4 \uc5c4\uccad\ub09c \uc591\uc758 \ud559\uc2b5 \ub2a5\ub825\uc744 \uc81c\uacf5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uac01 \ub808\uc774\uc5b4 \ub0b4 \ub178\ub4dc \uac1c\uc218"},{"location":"posts/deep-learning/2018-11-09-IntroductionToArtificialNeuralNetworksPart1/#_5","text":"\ub124\ud2b8\uc6cc\ud06c \ud1a0\ud3f4\ub85c\uc9c0 \uadf8 \uc790\uccb4\ub294 \uac13 \ud0dc\uc5b4\ub09c \uc544\uae30\ucc98\ub7fc \uc544\ubb34 \uac83\ub3c4 \ubc30\uc6b0\uc9c0 \uc54a\uc740 \ube44\uc5b4\uc788\ub294 \uc11d\ud310\uacfc\ub3c4 \uac19\uc2b5\ub2c8\ub2e4. \uc785\ub825\ub418\ub294 \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud558\ub294 \uacfc\uc815\uc744 \ud1b5\ud574 \ub274\ub7f0 \uac04 \uc5f0\uacb0\uc131\uc774 \uac15\ud654\ub418\uac70\ub098 \uc57d\ud654\ub418\uba70, \uadf8 \uacfc\uc815\uc744 \ud1b5\ud574 \ud328\ud134\uc744 \uc778\uc2dd\ud558\ub294 \uc218\uc900\uc73c\ub85c \ub124\ud2b8\uc6cc\ud06c \uc5f0\uacb0\uc5d0 \ub300\ud55c \uac00\uc911\uce58\uac00 \ud615\uc131\ub418\uc5b4 \uac11\ub2c8\ub2e4. \uc774\ub860\uc0c1\uc73c\ub85c\ub294 \uc218\uc2ed\ub144\uc804\uc5d0 \uc815\ub9bd\ub418\uc5c8\uc74c\uc5d0\ub3c4 \ubd88\uad6c\ud558\uace0, \uc5f0\uacb0 \uac00\uc911\uce58\ub97c \uc870\uc808\ud558\ub294 \uc2e0\uacbd\ub9dd \ud559\uc2b5\uc740 \ub9c9\ub300\ud55c \ucef4\ud4e8\ud130 \uc5f0\uc0b0\ub7c9\uc73c\ub85c \uc778\ud574 \ud6a8\uc728\uc801\uc778 \uc54c\uace0\ub9ac\uc998\uc774 \ubc1c\uacac\ub41c 1980\ub144\ub300 \ud6c4\ubc18\uc774 \ub418\uc5b4\uc11c\uc57c \uaca8\uc6b0 \uc2e4\uc9c8\uc801\uc778 (\uac04\ub2e8\ud55c) \ubb38\uc81c\ub97c \ud480 \uc218 \uc788\ub294 \uc218\uc900\uc774 \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8 \uc2e4\ud6a8\uc728\uc801\uc778 \uc54c\uace0\ub9ac\uc998\uc740 \ud604\uc7ac \uc5ed\uc804\ud30c(Backpropagation)\uc774\ub77c\uace0 \uc54c\ub824\uc9c4 \uc5ed\uc804\ud30c\ub418\ub294 \uc5d0\ub7ec \uc804\ub7b5( Strategy of Back-propagating Errors )\uc785\ub2c8\ub2e4. \ub2e4\ub978 \uae30\uacc4\ud559\uc2b5 \uc54c\uace0\ub9ac\uc998\ub4e4\uc5d0 \ube44\ud574 \uc5ec\uc804\ud788 \ub290\ub9ac\uae30\ub85c \uc545\uba85\uc774 \ub192\uc9c0\ub9cc, \uc601\ud654 \"\uc544\ubc14\ud0c0(Avatar)\"\uac00 \uc2a4\ud14c\ub808\uc624\uc2a4\ucf54\ud53d\uc758 \ubd80\ud765\uc744 \uc774\ub04c\uc5b4\ub0c8\ub4ef \uc5ed\uc804\ud30c \ubc29\ubc95\uc740 ANN\uc5d0 \ub2e4\uc2dc\uae08 \uad00\uc2ec\uc744 \ubaa8\uc73c\ub294 \uc6d0\ub3d9\ub825\uc774 \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uacb0\uacfc\uc801\uc73c\ub85c \uc774\uc81c\ub294 \uc5ed\uc804\ud30c \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\ub294 \ub2e4\uc911 \ub808\uc774\uc5b4 \ud53c\ub4dc\ud3ec\uc6cc\ub4dc(Multi-Layer Feedforward) \ub124\ud2b8\uc6cc\ud06c\ub294 \ub370\uc774\ud130 \ub9c8\uc774\ub2dd\uc758 \ud544\uc218\uac00 \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc5ed\uc804\ud30c \uc54c\uace0\ub9ac\uc998\uc758 \uac15\uc810\uacfc \uc57d\uc810\uc744 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: \uac15 \uc810 \uc57d \uc810 \ubd84\ub958 \ub610\ub294 \uc608\uce21 \ubb38\uc81c\uc5d0 \uc801\uc6a9 \uac00\ub2a5\ud568. \ucef4\ud4e8\ud130 \uc5f0\uc0b0\ub7c9\uc774 \ub9e4\uc6b0 \ub9ce\uace0 \ud559\uc2b5\uc18d\ub3c4\uac00 \uadf9\ud788 \ub290\ub9bc. \ud2b9\ud788 \ub124\ud2b8\uc6cc\ud06c \ud1a0\ud3f4\ub85c\uc9c0\uac00 \ubcf5\uc7a1\ud55c \uacbd\uc6b0 \ub354\uc6b1 \uc2ec\uac01\ud568. \uac70\uc758 \ubaa8\ub4e0 \uc54c\uace0\ub9ac\uc998\uc774 \ud560 \uc218 \uc788\ub294 \uac83\ubcf4\ub2e4 \ud6e8\uc52c \ub354 \ubcf5\uc7a1\ud55c \ud328\ud134\uc758 \ubaa8\ub378\ub9c1\uc774 \uac00\ub2a5\ud568. \ud559\uc2b5 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \uacfc\uc801\uc751(Ovefitting) \uacbd\ud5a5\uc774 \uac15\ud568. \ub418\ub3c4\ub85d \ub370\uc774\ud130\uc758 \uadfc\uc6d0\uc801\uc778 \uad00\uacc4\uc5d0 \ub300\ud55c \uac00\uc815\uc744 \uc801\uac8c \ud568. \ud574\uc11d\uc774 \uac70\uc758 \ubd88\uac00\ub2a5\ud558\uba70 \uac00\ub2a5\ud558\ub2e4\uace0 \ud574\ub3c4 \ub9e4\uc6b0 \uc5b4\ub835\uace0 \ubcf5\uc7a1\ud55c \ube14\ub799\ubc15\uc2a4 \ubaa8\ub378\uc784. \uc5ed\uc804\ud30c \uc54c\uace0\ub9ac\uc998\uc758 \uc77c\ubc18\uc801\uc778 \ud615\ud0dc\ub294 \ub9ce\uc740 \ubc18\ubcf5 \uc0ac\uc774\ud074\uc744 \uac16\ub294 \ub450 \uac1c\uc758 \ud504\ub85c\uc138\uc2a4\ub97c \ud3ec\ud568\ud558\uba70, \uac01 \uc0ac\uc774\ud074\uc744 Epoch\ub77c\uace0 \ud569\ub2c8\ub2e4. \ub124\ud2b8\uc6cc\ud06c\ub294 \uc5b4\ub5a0\ud55c \uc0ac\uc804 \uc9c0\uc2dd\ub3c4 \uac16\uace0 \uc788\uc9c0 \uc54a\uc73c\ubbc0\ub85c, \ucd08\uae30 \uac00\uc911\uce58\ub294 \ub79c\ub364\uc73c\ub85c \uc124\uc815\ub418\uba70, \uc815\ud574\uc9c4 \uc911\ub2e8 \uc870\uac74\uc744 \ub9cc\uc871\ud560 \ub54c\uae4c\uc9c0 \ud504\ub85c\uc138\uc2a4\ub97c \ud1b5\ud574 \ubc18\ubcf5\ub429\ub2c8\ub2e4. \uac01\uac01\uc758 Epoch\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 Phase\ub97c \ud3ec\ud568\ud569\ub2c8\ub2e4: (1) \uc21c\ubc29\ud5a5 Phase : \ub274\ub7f0\uc774 \uc785\ub825 \ub808\uc774\uc5b4\uc5d0\uc11c \ucd9c\ub825 \ub808\uc774\uc5b4 \uc21c\uc73c\ub85c \ud65c\uc131\ub418\uba70 \uadf8\uc5d0 \ub530\ub77c \ub274\ub7f0\uc758 \uac00\uc911\uce58\uc640 \ud65c\uc131 \ud568\uc218\uc744 \uc801\uc6a9\ud569\ub2c8\ub2e4. \ub9c8\uc9c0\ub9c9 \ub808\uc774\uc5b4\uc5d0 \ub3c4\ub2ec\ud558\uba74 \ucd9c\ub825\uc2e0\ud638\uac00 \uc0dd\uc131\ub429\ub2c8\ub2e4. (2) \uc5ed\ubc29\ud5a5 Phase : \uc21c\ubc29\ud5a5 Phase\uc5d0\uc11c \uc5bb\uc740 \ub124\ud2b8\uc6cc\ud06c \ucd9c\ub825\uc2e0\ud638\uc640 \ud559\uc2b5 \ub370\uc774\ud130\uc758 \uc2e4\uc81c \ud0c0\uac9f\uac12\uacfc \ube44\uad50\ud569\ub2c8\ub2e4. \uadf8 \ub450 \uac1c\uc758 \uac12 \uc0ac\uc774\uc758 \ucc28\uc774\uac00 \uc5d0\ub7ec\ub97c \uc77c\uc73c\ud0a4\uba74 \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \uc5ed\ubc29\ud5a5\uc73c\ub85c \uc804\ud30c\uc2dc\ucf1c \ub274\ub7f0\ub4e4 \uac04\uc758 \uc5f0\uacb0 \uac00\uc911\uce58\ub97c \uc218\uc815\ud558\uc5ec \ud5a5\ud6c4 \uc5d0\ub7ec\ub97c \uc9c0\uc18d\uc801\uc73c\ub85c \uc904\uc5ec\ub098\uac11\ub2c8\ub2e4. \uc774\ub7f0 \uc2dd\uc73c\ub85c \ub124\ud2b8\uc6cc\ud06c\ub294 \uc5ed\ubc29\ud5a5\uc73c\ub85c \ubcf4\ub0b8 \uc815\ubcf4\ub97c \uc774\uc6a9\ud558\uc5ec \ub124\ud2b8\uc6cc\ud06c\uc758 \uc804\uccb4 \uc5d0\ub7ec\ub97c \uc904\uc5ec\ub098\uac11\ub2c8\ub2e4. \uadf8\ub807\ub2e4\uba74 \uc774\ub54c\ucbe4 \ud558\ub098\uc758 \uc758\ubb38\uc0ac\ud56d\uc774 \ub4ed\ub2c8\ub2e4: \uacfc\uc5f0 \ub274\ub7f0\uc758 \uc785\ub825\uacfc \ucd9c\ub825 \uc0ac\uc774\uc758 \uad00\uacc4\uac00 \uadf8\ub807\uac8c \ubcf5\uc7a1\ud55c\ub300 \ub3c4\ub300\uccb4 \uc5b4\ub5bb\uac8c \uc774 \uc54c\uace0\ub9ac\uc998\uc740 \uac00\uc911\uce58\uc758 \ubcc0\ud654\ub7c9\uc744 \uacb0\uc815\ud558\ub294 \uac83\uc77c\uae4c? \uc774\uc5d0 \ub300\ud55c \ud574\ub2f5\uc740 \uae09\uacbd\uc0ac\ubc95(Steepest Descent Method)\uc5d0 \uc788\uc2b5\ub2c8\ub2e4. \uae09\uacbd\uc0ac\ubc95\uc740 \uac04\ub2e8\ud788 \uc0b0 \uc704\uc5d0\uc11c \ub208\uc744 \uac00\ub9b0 \ucc44\ub85c \uac00\uc7a5 \ub0ae\uc740 \uacf3\uc744 \ucc3e\uc544\uac08 \ub54c \uc4f0\ub294 \ubc29\ubc95\uacfc\ub3c4 \uac19\uc2b5\ub2c8\ub2e4. \uc0ac\ubc29\uc744 \uc9c0\ud321\uc774\ub85c \ub450\ub4dc\ub824\ubcf4\uace0 \uac00\uc7a5 \uacbd\uc0ac\uac00 \uc544\ub798 \ubc29\ud5a5\uc73c\ub85c \uc2ec\ud55c \uacf3\uc73c\ub85c \ud604\uc7ac \uc704\uce58\ud55c \uc9c0\uc810\uc5d0\uc11c \ud55c \ubc1c\uc790\uad6d\uac00\uace0 \uadf8 \uc704\uce58\uc5d0\uc11c \ub2e4\uc2dc \uac00\uc7a5 \uacbd\uc0ac\uac00 \uc544\ub798\ub85c \uc2ec\ud55c \ubc29\ud5a5\uc744 \ucc3e\uace0 \uadf8 \ubc29\ud5a5\uc73c\ub85c \ud55c \ubc1c\uc790\uad6d\uc529 \uc774\ub3d9\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c, \uae09\uacbd\uc0ac\ubc95\uc740 \ubc29\ud5a5\ud0d0\uc0c9(Direction Search)\uacfc \uc2a4\ud15d\ud06c\uae30 \uacb0\uc815(Step Size Determination)\uc73c\ub85c \uad6c\uc131\ub429\ub2c8\ub2e4. \uc774\ubbf8\uc9c0 \ucd9c\ucc98: http://aria42.com/blog/2014/12/understanding-lbfgs \uc704\uc758 \uc774\ubbf8\uc9c0\ub97c \uc0b4\ud3b4\ubcf4\ub3c4\ub85d \ud569\ub2c8\ub2e4. \uc0b0\uc758 \ub192\uc774\ub97c \ub4f1\uace0\uc120\uc73c\ub85c \ud45c\ud604\ud558\uc600\uc744 \ub54c \uac01 \ub4f1\uace0\uc120\uc5d0 \uc218\uc9c1\ud55c \ubc29\ud5a5(\ube68\uac04 \ud654\uc0b4\ud45c)\uc774 \uae09\uac15\ud558\ubc29\ud5a5\uc785\ub2c8\ub2e4 (\ub0b4\ubd80 \ub3d9\uc2ec\uc6d0\uc774 \uac00\uc7a5 \ub0ae\uc740 \ub4f1\uace0\uc120\uc774\ub77c \uac00\uc815). \ucc38\uace0\ub85c, \ub0b4\ubd80 \ub3d9\uc2ec\uc6d0\uc774 \uac00\uc7a5 \ub4f1\uace0\uc120 \ub192\uc774\uac00 \ud06c\ub2e4\uace0 \uac00\uc815\ud558\uba74 \ube68\uac04 \ud654\uc0b4\ud45c\ub294 \uae09\uc0c1\uc2b9(Steepest Ascent)\ubc29\ud5a5\uc774 \ub418\uba70, \uae09\uac15\ud558\uc640 \uae09\uc0c1\uc2b9\uc740 \ub2e8\uc9c0 \ubd80\ud638\uac00 \ubc14\ub010\ub2e4\ub294 \uac83\ubfd0\uc785\ub2c8\ub2e4. \uc0c1\uae30 \uc774\ubbf8\uc9c0\uc758 \ud30c\ub780 \ub4f1\uace0\uc120\uc5d0 \ud45c\uba74\ud568\uc218(Surface Function)\uc774 \\(z = f(x,y)\\) \ub85c \uc8fc\uc5b4\uc84c\ub2e4\uba74 \ud2b9\uc815 \uc704\uce58 \\((x*, y*)\\) \uc5d0\uc11c\uc758 \uae09\uac15\ud558\ubc29\ud5a5\uc740 \ub2e4\uc74c\uc758 \ubca1\ud130(Vector)\ub85c \ud45c\ud604\ub429\ub2c8\ub2e4: \\(-\\nabla f(x^{*},y^{*})=-\\begin{bmatrix}\\partial f(x^{*},y^{*})/\\partial x \\\\ \\partial f(x^{*},y^{*})/\\partial y\\end{bmatrix}\\) \uc774\uc640 \uc720\uc0ac\ud558\uac8c \uc5ed\uc804\ud30c \uc54c\uace0\ub9ac\uc998\uc740 \uac01 \ub274\ub7f0\uc758 \ud65c\uc131\ud568\uc218\uc758 \ubbf8\ubd84\uac12\uc744 \uc774\uc6a9\ud558\uc5ec \uac01\uac01\uc758 \uc720\uc785 \uac00\uc911\uce58\uc758 \ubc29\ud5a5\uc73c\ub85c \uacbd\uc0ac\ub3c4\ub97c \ud30c\uc545\ud569\ub2c8\ub2e4. \uc774 \ub54c\ubb38\uc5d0 \ud65c\uc131\ud568\uc218\uc758 \ubbf8\ubd84\uac00\ub2a5\uc131\uc774 \uc911\uc694\ud55c \uc758\ubbf8\ub97c \uc9c0\ub2d9\ub2c8\ub2e4. \uc774 \uacbd\uc0ac\ub3c4\ub294 \uac00\uc911\uce58\uc758 \ubcc0\ud654\uc5d0 \ub300\ud558\uc5ec \uc5d0\ub7ec\uc758 \uc99d\uac10\uc774 \uc5bc\ub9c8\ub098 \uae09\uc18d\ud558\uac8c \ubcc0\ud654\ub418\ub294\uc9c0\ub97c \ud310\ub2e8\ud560 \uc218 \uc788\ub294 \uae30\uc900\uc744 \uc81c\uc2dc\ud569\ub2c8\ub2e4. \uc54c\uace0\ub9ac\uc998\uc740 \ud559\uc2b5\ub960(Learning Rate)\ub77c\uace0 \ud558\ub294 \uc591\uc5d0 \uc758\ud574 \uc5d0\ub7ec\uac00 \uae09\uc18d\ub3c4\ub85c \uc791\uc544\uc9c0\ub294 \ubc29\ud5a5\uc73c\ub85c \uac00\uc911\uce58\ub97c \ubcc0\ud654\uc2dc\ud0b5\ub2c8\ub2e4. \ud559\uc2b5\ub960\uc774 \ucee4\uc9c8 \uc218\ub85d \ucd08\uae30\uc5d0\ub294 \ube60\ub974\uac8c \uc5d0\ub7ec\ub97c \uc904\uc774\ub098 \ud574(Solution) \uadfc\ucc98\uc5d0\uc11c\ub294 \uc624\ubc84\uc288\ud305(Overshooting)\uc73c\ub85c \uc778\ud574 \uc218\ub834 \uc18d\ub3c4\uac00 \ub290\ub824\uc9c0\uac70\ub098 \uc7ac\uc218\uac00 \uc5c6\ub294 \uacbd\uc6b0 \uc601\uc6d0\ud788 \uc218\ub834\ud558\uc9c0 \ubabb\ud558\ub294 \uacbd\uc6b0\uac00 \uc788\uc2b5\ub2c8\ub2e4. \ub610\ud55c, \uae09\uac15\ud558\ubc95\uc740 \uc9c0\uc5ed\ucd5c\uc18c\uac12(Local Minimum)\uc740 \ucc3e\uc744 \uc218 \uc788\uc73c\ub098 \uc804\uc5ed\ucd5c\uc18c\uac12(Global Minimum)\uc744 \ucc3e\uc9c0 \ubabb\ud558\ub294 \ub2e8\uc810\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uc81c \uc774\ub860\uc801\uc778 \uac83\uc744 \ub2e4\ub8ec Part 1.\uc744 \ub9c8\ubb34\ub9ac\ud558\uace0 Part 2.\uc5d0\uc11c\ub294 R\uc758 \uc778\uacf5\uc2e0\uacbd\ub9dd \ud328\ud0a4\uc9c0\uc778 nerualnet \uc744 \uc774\uc6a9\ud558\uc5ec ANN \uc54c\uace0\ub9ac\uc998\uc73c\ub85c \uc2e4\uc9c8\uc801\uc778 \uc608\uc81c\ub97c \ud480\uc5b4\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","title":"\uc5ed\uc804\ud30c"},{"location":"posts/deep-learning/2019-02-07-IntroductionToArtificialNeuralNetworksPart2/","text":"Written by Alex Choi, Feb. 07, 2019. Part 1. \uc5d0 \uc774\uc5b4 \uc774\ubc88 \uae00\uc5d0\uc11c\ub294 R\uc5d0\uc11c \uc778\uacf5\uc2e0\uacbd\ub9dd(Artificial Neural Networks, ANN)\uc744 \uc774\uc6a9\ud558\uc5ec \ubd84\ub958(Classification) \ubb38\uc81c\ub97c \ud480\uc5b4\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \ubcf8 \ud3ec\uc2a4\ud305\uc758 \ubaa8\ub4e0 \ucf54\ub4dc\ub294 R \ucf54\ub4dc\uc785\ub2c8\ub2e4. 1. \ub370\uc774\ud130 \ud68d\ub4dd ANN\uc744 \uc774\uc6a9\ud558\uc5ec \ubd84\ub958\ud560 \ud559\uc2b5 \ub370\uc774\ud130\uc640 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. \ub300\ud45c\uc801\uc778 Machine Learning \uc800\uc7a5\uc18c\uc778 UCI Machine Learning Data Repository \uc5d0\uc11c \ub370\uc774\ud130\ub97c \ud68d\ub4dd\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4. \uc774 \uc911 \ubabd\ud06c \ubb38\uc81c(Monk's Problem) \ub370\uc774\ud130\ub97c \uc774\uc6a9\ud558\uae30\ub85c \ud558\uaca0\uc2b5\ub2c8\ub2e4. \ubabd\ud06c \ubb38\uc81c\ub294 \ucd5c\ucd08\uc758 \ud559\uc2b5 \uc54c\uace0\ub9ac\uc998 \ube44\uad50\ub97c \uc704\ud55c \uae30\ucd08\ubb38\uc81c\uc785\ub2c8\ub2e4. \uba3c\uc800 \ubabd\ud06c \ubb38\uc81c\uc758 \ud559\uc2b5 \ub370\uc774\ud130\ub97c \ub2e4\uc6b4\ubc1b\ub3c4\ub85d \ud569\ub2c8\ub2e4: \ubabd\ud06c \ubb38\uc81c \ud559\uc2b5 \ub370\uc774\ud130 \ub610\ud55c \ubabd\ud06c \ubb38\uc81c\uc758 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \ub2e4\uc6b4\ubc1b\ub3c4\ub85d \ud569\ub2c8\ub2e4: \ubabd\ud06c \ubb38\uc81c \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \ub2e4\uc6b4\ubc1b\uc740 \ud30c\uc77c\ub4e4\uc758 \ud655\uc7a5\uc790\ub97c \ubaa8\ub450 .csv\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4. \ub9cc\uc57d \uc704\uc758 \uacfc\uc815\uc774 \ubc88\uac70\ub85c\uc6b8 \uacbd\uc6b0 \ub2e4\uc74c CSV \ud30c\uc77c\uc744 \ub2e4\uc6b4 \ubc1b\uc2b5\ub2c8\ub2e4: monk_train_1.csv monk_test_1.csv 2. \ub370\uc774\ud130 \uad00\ucc30 \ubc0f \uac00\uacf5 \uc774\uc81c \ub370\uc774\ud130\ub97c \ubd88\ub7ec\uc624\uace0 \uc0b4\ud3b4\ubcf4\ub3c4\ub85d \ud569\ub2c8\ub2e4. > utils::head(monk_train) X X1 X1.1 X1.2 X1.3 X1.4 X3 X1.5 data_5 1 NA 1 1 1 1 1 3 2 data_6 2 NA 1 1 1 1 3 2 1 data_19 3 NA 1 1 1 1 3 3 2 data_22 4 NA 1 1 1 2 1 2 1 data_27 5 NA 1 1 1 2 1 2 2 data_28 6 NA 1 1 1 2 2 3 1 data_37 \uacfc \uac19\uc740\ub370, \uac01 \ud53c\uccd0(Feature)\uc758 \uc774\ub984\uc744 \uc815\ud574\ub193\uc9c0 \uc54a\uc558\uae30 \ub54c\ubb38\uc5d0 \uc790\ub3d9\uc73c\ub85c \uc0dd\uc131\ub418\uc5b4 \uc788\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc6b0\uc120 X\uc5f4 \uc744 \uc0ad\uc81c\ud569\ub2c8\ub2e4. monk_train$X <- NULL \ub2e4\uc2dc \ub370\uc774\ud130 \uba87 \uac1c\ub97c \uc0b4\ud3b4\ubcf4\uba74, > utils::head(monk_train) X1 X1.1 X1.2 X1.3 X1.4 X3 X1.5 data_5 1 1 1 1 1 1 3 2 data_6 2 1 1 1 1 3 2 1 data_19 3 1 1 1 1 3 3 2 data_22 4 1 1 1 2 1 2 1 data_27 5 1 1 1 2 1 2 2 data_28 6 1 1 1 2 2 3 1 data_37 \uccab\ubc88\uc9f8 \uc5f4\uc774\uc5c8\ub358 X \ud53c\uccd0\uac00 \uc0ad\uc81c\ub418\uc5c8\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uc81c \ud53c\uccd0\ub4e4\uc758 \uc774\ub984\uc744 \uc9c0\uc815\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4. UCI Machine Learning Repository\uc758 \ubabd\ud06c \ubb38\uc81c \uc0ac\uc774\ud2b8\ub97c \uc0b4\ud3b4\ubcf4\uba74, Attribute Information\uc5d0\uc11c \uac01 \ud53c\uccd0\uc758 \uc774\ub984\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4: Attribute Information: 1. class: 0, 1 2. a1: 1, 2, 3 3. a2: 1, 2, 3 4. a3: 1, 2 5. a4: 1, 2, 3 6. a5: 1, 2, 3, 4 7. a6: 1, 2 8. Id: (A unique symbol for each instance) \ucd1d 8\uac1c\uc758 \ud53c\uccd0\uac00 \uc788\uace0 \uc774\ub984\uc740 \uc704\uc640 \uac19\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c, \uc704\uc640 \uac19\uc774 \ud53c\uccd0\uc758 \uc774\ub984\uc744 \ubd80\uc5ec\ud558\uace0, base::names(monk_train) <- c(\"class\",\"a1\",\"a2\",\"a3\",\"a4\",\"a5\",\"a6\",\"id\") \ub2e4\uc2dc \ub370\uc774\ud130\ub97c \uba87 \uac1c \uc0b4\ud3b4\ubcf4\uba74, > utils::head(monk_train) class a1 a2 a3 a4 a5 a6 id 1 1 1 1 1 1 3 2 data_6 2 1 1 1 1 3 2 1 data_19 3 1 1 1 1 3 3 2 data_22 4 1 1 1 2 1 2 1 data_27 5 1 1 1 2 1 2 2 data_28 6 1 1 1 2 2 3 1 data_37 \uc774 \uc911 \uc0ac\uc2e4 id\ub294 \ud544\uc694\uac00 \uc5c6\uc73c\ubbc0\ub85c, \ub2e4\uc2dc \uc774 \ud53c\uccd0\ub97c \uc0ad\uc81c\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4: monk_train $ id <- NULL \uc774\uc81c id \ud53c\uccd0\uac00 \uc0ad\uc81c\ub418\uc5c8\uc2b5\ub2c8\ub2e4: > utils :: head ( monk_train ) class a1 a2 a3 a4 a5 a6 1 1 1 1 1 1 3 2 2 1 1 1 1 3 2 1 3 1 1 1 1 3 3 2 4 1 1 1 2 1 2 1 5 1 1 1 2 1 2 2 6 1 1 1 2 2 3 1 \uc774\uc81c \uc804\uccb4\uc801\uc73c\ub85c \ub370\uc774\ud130\ub97c \uc0b4\ud3b4\ubcf4\uba74, > utils::str(monk_train) 'data.frame': 123 obs. of 7 variables: $ class: int 1 1 1 1 1 1 1 1 1 0 ... $ a1 : int 1 1 1 1 1 1 1 1 1 1 ... $ a2 : int 1 1 1 1 1 1 1 1 2 2 ... $ a3 : int 1 1 1 2 2 2 2 2 1 1 ... $ a4 : int 1 3 3 1 1 2 2 3 1 1 ... $ a5 : int 3 2 3 2 2 3 4 1 1 2 ... $ a6 : int 2 1 2 1 2 1 1 2 2 1 ... monk_train \uc740 7\uac1c\uc758 \ud53c\uccd0\ub97c \uac16\ub294 \ucd1d 123\uac1c\uc758 \ub370\uc774\ud130\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud559\uc2b5 \ub370\uc774\ud130\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c, \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \ub610\ud55c \ub3d9\uc77c\ud55c \ubc29\uc2dd\uc73c\ub85c \uac00\uacf5\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4: monk_test <- utils :: read.csv ( file = \"monk_test_1.csv\" , sep = \" \" ) monk_test $ X <- NULL base :: names ( monk_test ) <- c ( \"class\" , \"a1\" , \"a2\" , \"a3\" , \"a4\" , \"a5\" , \"a6\" , \"id\" ) monk_test $ id <- NULL utils :: str ( monk_test ) \ud53c\uccd0\ub9c8\ub2e4 \uac12\uc758 \ubc94\uc704\uac00 \uc81c\uac01\uac01\uc774\uae30 \ub54c\ubb38\uc5d0 \uc774\ub97c \uc815\uaddc\ud654(Normalization)\ud560 \ud544\uc694\uac00 \uc788\uc73c\ubbc0\ub85c, \uc815\uaddc\ud654 \ud568\uc218\ub97c \uc815\uc758\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4. \uc815\uaddc\ud654 \ud568\uc218\ub294 \ubca1\ud130\uc758 \uac12\uc5d0\uc11c \ud574\ub2f9 \ubca1\ud130\uc758 \ucd5c\uc18c\uac12\uc744 \ube80 \uac12\uc744 \ucd5c\ub300\uac12\uacfc \ucd5c\uc18c\uac12\uacfc\uc758 \ucc28\uc774\ub85c \ub098\ub208 \uac83\uc785\ub2c8\ub2e4: normalize <- function ( x ) { return (( x - min ( x )) / ( max ( x ) - min ( x ))) } \ub530\ub77c\uc11c, \uc704\uc758 \ud568\uc218\ub97c \uc774\uc6a9\ud558\uba74, \uc785\ub825\ub41c \uac12\uc5d0 [0,1] \uc758 \ubc94\uc704\ub85c \ubcc0\ud658\ub429\ub2c8\ub2e4. lapply \ud568\uc218\ub97c \uc774\uc6a9\ud558\uc5ec monk_train \uc758 \uac01 \uc5f4\uc5d0 normalize() \ud568\uc218\ub97c \uc801\uc6a9\ud558\uace0, \uc774\ub97c Data Frame\uc73c\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4: monk_train_norm <- base :: as.data.frame ( base :: lapply ( monk_train , normalize )) \uadf8\ub7ec\ub098, class \ud53c\uccd0\ub294 \uc815\uaddc\ud654 \ub418\uc9c0 \uc54a\uae30\ub97c \uc6d0\ud558\uae30 \ub54c\ubb38\uc5d0 \uc774 \ud53c\uccd0\uc5d0 \ub300\ud574\uc11c\ub294 \ub2e4\uc2dc \uc6d0\ub798 \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4: (\uc0ac\uc2e4 class \ud53c\uccd0\uac12\ub4e4\uc740 0 \uc544\ub2c8\uba74 1\uc774\ubbc0\ub85c \uad73\uc774 \ub370\uc774\ud130\ub97c \ub418\ub3cc\ub9b4 \ud544\uc694\ub294 \uc5c6\uc9c0\ub9cc, \ubabd\ud06c \ubb38\uc81c\uac00 \uc544\ub2cc \ub2e4\ub978 \ub370\uc774\ud130\uc778 \uacbd\uc6b0\uc5d0\ub294 \uc774 \uacfc\uc815\uc774 \ubc18\ub4dc\uc2dc \ud544\uc694\ud569\ub2c8\ub2e4.) monk_train_norm $ class <- monk_train $ class \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc5d0 \ub300\ud574\uc11c\ub3c4 \ub3d9\uc77c\ud55c \uacfc\uc815\uc744 \uc218\ud589\ud569\ub2c8\ub2e4: monk_test_norm <- base :: as.data.frame ( base :: lapply ( monk_test , normalize )) monk_test_norm $ class <- monk_test $ class 3. nuralnet \ud328\ud0a4\uc9c0 \uc124\uce58 \uc774\uc81c R\uc758 \uc778\uacf5\uc2e0\uacbd\ub9dd \ud328\ud0a4\uc9c0 \uc911 \ud558\ub098\uc778 neuralnet \uc744 \ub2e4\uc6b4 \ubc1b\uc2b5\ub2c8\ub2e4: > install.packages ( \"neuralnet\" ) \uadf8\ub9ac\uace0 \uc774 \ud328\ud0a4\uc9c0\ub97c \ub85c\ub529\ud569\ub2c8\ub2e4: base::library(neuralnet) 4. ANN \ubaa8\ub378 \ubc0f \uac00\uc2dc\ud654 \uc740\ub2c9 \ub808\uc774\uc5b4\ub97c 1\uac1c\ub9cc \uac16\ub294 \uac04\ub2e8\ud55c ANN \ubaa8\ub378\uc744 \uc138\uc6c1\ub2c8\ub2e4: monk_model <- neuralnet :: neuralnet ( formula = class ~ a1 + a2 + a3 + a4 + a5 + a6 , data = monk_train , hidden = 1 ) \uc774\uc81c \uc138\uc6cc\uc9c4 ANN \ubaa8\ub378\uc5d0 \ub300\ud55c \ub124\ud2b8\uc6cc\ud06c \ud1a0\ud3f4\ub85c\uc9c0\ub97c \uac00\uc2dc\ud654\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. > graphics :: plot ( monk_model ) \ubaa8\ub378 \uc544\ud0a4\ud14d\uccd0 \uad6c\uc131\ub41c \ub178\ub4dc \ubc0f \ub808\uc774\uc5b4\uc640 \ub178\ub4dc \uac00\uc911\uce58\ub97c \ud55c \ub208\uc5d0 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc0c1\uae30 \uc774\ubbf8\uc9c0\uc758 \ud30c\ub780\uc0c9 \ub178\ub4dc\ub294 \ud3b8\ud5a5(Bias)\uac12\uc744 \ub098\ud0c0\ub0b4\uba70, \uc774 \uac12\uc740 \ub178\ub4dc\uc758 \uac12\uc774 \uc774\ub3d9\ud558\ub3c4\ub85d \ud558\ub294 \uc0c1\uc218\uac12\uc778\ub370, \ub9c8\uce58 \uc120\ud615 \ud68c\uadc0\ubaa8\ub378\uc5d0\uc11c \uc88c\ud45c Intercept\uc640 \uc720\uc0ac\ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098, \uc5d0\ub7ec\uac12\uc774 \uc0c1\ub2f9\ud788 \ub192\uc73c\ubbc0\ub85c \uc774 \ubaa8\ub378\ub85c \uc608\uce21\ud560 \uacbd\uc6b0 \uc0c1\ub2f9\ud788 \uc548 \uc88b\uc740 \uacb0\uacfc\ub97c \uc5bb\uac8c \ub420 \uac83\uc774\ub77c\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. 5. ANN \ubaa8\ub378\uc744 \uc774\uc6a9\ud55c \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc608\uce21 \uc138\uc6cc\uc9c4 \ubaa8\ub378\uc744 \uc774\uc6a9\ud558\uc5ec \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc758 \ubaa8\ub378 \uacb0\uacfc\ub97c \uc5bb\uc5b4\ubcf4\ub3c4\ub85d \ud569\ub2c8\ub2e4. model_results <- neuralnet :: compute ( monk_model , monk_test [ 2 : 7 ]) \uc704\uc758 \ucf54\ub4dc\uc758 \uc758\ubbf8\ub294 monk_model \uc744 \uc774\uc6a9\ud558\uc5ec monk_test[2:7] \uc5d0 \ub300\ud55c \uc608\uce21 \ubaa8\ub378 \uacb0\uacfc\ub97c \uc5bb\ub294 \uac83\uc785\ub2c8\ub2e4. monk_test[2:7] \ub294 monk_test[1] \uc778 Class \ud53c\uccd0\uc5d0 \ub300\ud55c \ubaa8\ub378 \uacb0\uacfc\ub97c \uc5bb\uae30 \uc704\ud558\uc5ec \ub098\uba38\uc9c0 \ud53c\uccd0\uc778 a1~a6\ub97c \uc774\uc6a9\ud55c\ub2e4\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4. model_results \uac00 \uac00\uc9c0\uace0 \uc788\ub294 \ub370\uc774\ud130 \uc774\ub984\ub97c \uc0b4\ud3b4\ubcf4\uba74, > names ( model_results ) [ 1 ] \"neurons\" \"net.result\" \uc778\ub370, neurons \ub294 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uac01 \ub808\uc774\uc5b4\uc758 \ub274\ub7f0 \ucd9c\ub825\uac12\ub4e4\uc774\uba70, net.result \ub294 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc804\uccb4 \uacb0\uacfc\ub97c \ud589\ub82c \ud615\ud0dc\ub85c \uc800\uc7a5\ud55c \uac12(\ud604\uc7ac \uc6b0\ub9ac\uac00 \ud480\uace0 \uc788\ub294 \ubb38\uc81c\uc5d0\uc11c\ub294 \ubca1\ud130)\uc785\ub2c8\ub2e4. net.result \uc774 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \ubd84\ub958 \uacb0\uacfc\uc785\ub2c8\ub2e4. \uc774 \uac12\uc744 \uc608\uce21 \uacb0\uacfc\uac12\uc774\ub77c\ub294 \ub2e4\ub978 \ubcc0\uc218\uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4. predicted_monk <- model_results $ net.result \uac12\uc744 \uba87 \uac1c \uc0b4\ud3b4\ubcf4\uba74, > head ( predicted_monk ) [, 1 ] [ 1 ,] 1.0102054821 [ 2 ,] 0.3010884442 [ 3 ,] 0.3014953569 [ 4 ,] 0.3010585095 [ 5 ,] 0.3010585096 [ 6 ,] 0.3010585095 \uccab\ubc88\uc9f8 \uac12\uc744 \ubcfc \uc218 \uc788\ub4ef\uc774 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc5d0\uc11c class\uc758 \uac12\uc740 0\uacfc 1\uc0ac\uc774\uc600\ub294\ub370 1\uc744 \uc0b4\uc9dd \ub118\ub294 \uac12\ub3c4 \ubcf4\uc785\ub2c8\ub2e4. \uc989, \uacc4\uc0b0\uc774 \ucda9\ubd84\ud788 \uc815\ud655\ud558\uc9c0 \uc54a\uc74c\uc744 \ub2e4\uc2dc \ud55c \ubc88 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\uba74 \uc2e4\uc81c \ub370\uc774\ud130\uc758 class\uc640 ANN\uc744 \ud1b5\ud574 \uc608\uce21\ub41c \uac12\uc758 \uc624\ucc28\ub97c \ud655\uc778\ud574 \ubcf4\ub3c4\ub85d \ud569\ub2c8\ub2e4. \uc774\ub97c \ud655\uc778\ud558\ub824\uba74 \ub450 \uac12 \uc0ac\uc774\uc758 \uc758\uc874\uc131\uc744 \ubd84\uc11d\ud558\uba74 \ub418\ub294\ub370, \uc774\uac83\uc744 \uc0c1\uad00\uad00\uacc4(Correlation) \ubd84\uc11d\uc774\ub77c\uace0 \ud558\uba70 \ub300\ud45c\uc801\uc778 \uac83\uc73c\ub85c \ud53c\uc5b4\uc2a8(Pearson), \ucf04\ub2ec(Kendall), \uc2a4\ud53c\uc5b4\ub9cc(Spearman) \uc0c1\uad00\uacc4\uc218 \ub4f1\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc640 ANN\uc744 \ud1b5\ud574 \uc608\uce21\ub41c \ub370\uc774\ud130\uc640\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \uacc4\uc0b0\ud574 \ubcf4\ub3c4\ub85d \ud569\ub2c8\ub2e4: > stats :: cor ( predicted_monk , monk_test $ class ) [, 1 ] [ 1 ,] 0.5479135178 \uc0c1\uad00\uad00\uacc4 \uacb0\uacfc\uac12\uc740 [-1,1] \ubc94\uc704\ub97c \uac16\ub294\ub370, -1\uc740 \uc74c\uc758 \uc644\uc804\uc0c1\uad00\uad00\uacc4, 0\uc740 \uc0c1\uad00\uad00\uacc4\uac00 \ud558\ub098\ub3c4 \uc5c6\ub294 \uac83\uc774\uba70, 1\uc740 \uc591\uc758 \uc644\uc804\uc0c1\uad00\uad00\uacc4\uc785\ub2c8\ub2e4. \uac12\uc774 0.5 \uadfc\ucc98\ub85c \ub450 \uac12 \uc0ac\uc774\uc5d0 \uc0c1\uad00\uad00\uacc4\ub294 \uc788\uae34 \ud558\uc9c0\ub9cc \ud06c\uc9c0 \uc54a\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc989, \uacc4\uc0b0 \uacb0\uacfc\uac00 \uadf8\ub9ac \ub9cc\uc871\uc2a4\ub7fd\uc9c0 \ubabb\ud558\uba70, \uc2e4\uc81c \uc5d0\ub7ec\ub3c4 \ucef8\uc74c\uc744 \uc54c \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. 6. ANN \ubaa8\ub378 \uc131\ub2a5 \uac1c\uc120 \uc740\ub2c9 \ub808\uc774\uc5b4\ub97c \ub2e8\uc9c0 1\uac1c\ub9cc \uc0ac\uc6a9\ud55c \uacbd\uc6b0, \uacb0\uacfc\uac00 \uc369 \ub9cc\uc871\uc2a4\ub7fd\uc9c0 \ubabb\ud588\uc2b5\ub2c8\ub2e4. \uc740\ub2c9 \ub808\uc774\uc5b4\ub97c \ucd94\uac00\ud560 \uc218\ub85d \ud574\uac00 \uc870\uae08\uc529 \uac1c\uc120\ub420 \uac83\uc774\uc9c0\ub9cc \uacc4\uc0b0\ub7c9\uc774 \ub9e4\uc6b0 \ub298\uc5b4\ub0a0 \uac83\uc785\ub2c8\ub2e4. \uacc4\uc18d\ud574\uc11c \uc740\ub2c9 \ub808\uc774\uc5b4\ub97c \ucd94\uac00\ud558\ub2e4\ubcf4\uba74 \uacb0\uacfc\ub294 \ub354\uc774\uc0c1 \ub208\uc5d0 \ub744\uac8c \uac1c\uc120\ub418\uc9c0 \uc54a\uc744 \uc218 \uc788\ub294\ub370 \ud574\uac00 \uc218\ub834\ub418\uc5c8\ub2e4\uace0 \ubcfc \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4. \ub610\ud55c \uc740\ub2c9 \ub808\uc774\uc5b4\ub97c \ub108\ubb34 \ub9ce\uc774 \ucd94\uac00\ud558\ub2e4\ubcf4\uba74 \uc624\ud788\ub824 \uacb0\uacfc\uac00 \ub354 \uc548 \uc88b\uc544\uc9c0\ub294 \uacbd\uc6b0\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc5b4\uca0c\ub4e0 \uc740\ub2c9 \ub808\uc774\uc5b4\ub97c 2\ub85c \uc9c0\uc815\ud574\uc11c \uacb0\uacfc\ub97c \ud655\uc778\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. set.seed ( 12345 ) monk_model <- neuralnet :: neuralnet ( formula = class ~ a1 + a2 + a3 + a4 + a5 + a6 , data = monk_train , hidden = 2 ) graphics :: plot ( monk_model ) model_results <- neuralnet :: compute ( monk_model , monk_test [ 2 : 7 ]) predicted_monk <- model_results $ net.result \uc774 \ub54c\uc758 \uacb0\uacfc\ub294, > stats :: cor ( predicted_monk , monk_test $ class ) [, 1 ] [ 1 ,] 0.5604624596 \uc774\uba70, \uc740\ub2c9 \ub808\uc774\uc5b4\uac00 1\uac1c\uc778 \uacbd\uc6b0\ubcf4\ub2e4 \uacb0\uacfc\uac00 \uc57d\uac04 \uac1c\uc120 \ub418\uc5c8\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc740\ub2c9 \ub808\uc774\uc5b4\ub97c 5\uac1c\uae4c\uc9c0 \ub298\ub9ac\uba74\uc11c \ud14c\uc2a4\ud2b8 \ud574 \ubcf4\uba74, No. of Hidden Layers Error Steps Correlation Coefficient 1 10.858 2523 0.54791 2 6.829 3884 0.50605 3 0.024 4553 0.99862 4 4.2716 8082 0.67534 5 0.018 7760 0.99712 \uc640 \uac19\uc740\ub370, \uc740\ub2c9 \ub808\uc774\uc5b4\uac00 3\uac1c \uc0ac\uc6a9\ub41c \uacbd\uc6b0 \uadf9\uc801\uc73c\ub85c \uacb0\uacfc\uac00 \uc88b\uc544\uc84c\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098, 3\uac1c \uc0ac\uc6a9\ub41c \uacbd\uc6b0\uc5d0 \ube44\ud574 4\uac1c \uc0ac\uc6a9\ub418\ub294 \uacbd\uc6b0 \uacc4\uc0b0\ub7c9\uc740 2\uac1c \uac00\uae4c\uc774 \ub9ce\uc544\uc84c\ub294\ub370 \uacb0\uacfc\ub294 \uc624\ud788\ub824 \ub354 \uc548 \uc88b\uc544\uc84c\uc73c\uba70, 5\uac1c \uc0ac\uc6a9\ub41c \uacbd\uc6b0 \uacb0\uacfc\ub294 \ub2e4\uc2dc \uc88b\uc544\uc84c\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc704\uc758 \uc774\ubbf8\uc9c0\ub294 \uc2dc\ud5d8\uc0bc\uc544 \uc740\ub2c9 \ub808\uc774\uc5b4\ub97c 10\uac1c \uc0ac\uc6a9\ud55c \uacbd\uc6b0\uc778\ub370 \ub208\uc774 \ub3cc\uc544\uac08 \uc815\ub3c4\ub85c \ubcf5\uc7a1\ud574 \ubcf4\uc785\ub2c8\ub2e4. UCI Machine Learning Repository\uc758 \ubabd\ud06c \ubb38\uc81c(Monk's Problem) \ub370\uc774\ud130 \uc5d0\uc11c \ub370\uc774\ud130\uc14b 2\uc640 3\uc5d0 \ub300\ud574\uc11c\ub3c4 \uc5f0\uc2b5\uc0bc\uc544 \uc704\uc758 \uacfc\uc815\uc744 \ud14c\uc2a4\ud2b8\ud574 \ubcf4\uae38 \ubc14\ub78d\ub2c8\ub2e4. \uc774\ub85c\uc368 R\uc758 ANN \ud328\ud0a4\uc9c0\uc778 neuralnet\uc744 \uc774\uc6a9\ud558\uc5ec \ubd84\ub958 \ubb38\uc81c\ub97c \ud478\ub294 \ubc29\ubc95\uc5d0 \ub300\ud574\uc11c \uc54c\uc544\ubcf4\uc558\uc2b5\ub2c8\ub2e4.","title":"Introduction to Artificial Neural Network Part 2."},{"location":"posts/deep-learning/2019-02-07-IntroductionToArtificialNeuralNetworksPart2/#1","text":"ANN\uc744 \uc774\uc6a9\ud558\uc5ec \ubd84\ub958\ud560 \ud559\uc2b5 \ub370\uc774\ud130\uc640 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. \ub300\ud45c\uc801\uc778 Machine Learning \uc800\uc7a5\uc18c\uc778 UCI Machine Learning Data Repository \uc5d0\uc11c \ub370\uc774\ud130\ub97c \ud68d\ub4dd\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4. \uc774 \uc911 \ubabd\ud06c \ubb38\uc81c(Monk's Problem) \ub370\uc774\ud130\ub97c \uc774\uc6a9\ud558\uae30\ub85c \ud558\uaca0\uc2b5\ub2c8\ub2e4. \ubabd\ud06c \ubb38\uc81c\ub294 \ucd5c\ucd08\uc758 \ud559\uc2b5 \uc54c\uace0\ub9ac\uc998 \ube44\uad50\ub97c \uc704\ud55c \uae30\ucd08\ubb38\uc81c\uc785\ub2c8\ub2e4. \uba3c\uc800 \ubabd\ud06c \ubb38\uc81c\uc758 \ud559\uc2b5 \ub370\uc774\ud130\ub97c \ub2e4\uc6b4\ubc1b\ub3c4\ub85d \ud569\ub2c8\ub2e4: \ubabd\ud06c \ubb38\uc81c \ud559\uc2b5 \ub370\uc774\ud130 \ub610\ud55c \ubabd\ud06c \ubb38\uc81c\uc758 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \ub2e4\uc6b4\ubc1b\ub3c4\ub85d \ud569\ub2c8\ub2e4: \ubabd\ud06c \ubb38\uc81c \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \ub2e4\uc6b4\ubc1b\uc740 \ud30c\uc77c\ub4e4\uc758 \ud655\uc7a5\uc790\ub97c \ubaa8\ub450 .csv\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4. \ub9cc\uc57d \uc704\uc758 \uacfc\uc815\uc774 \ubc88\uac70\ub85c\uc6b8 \uacbd\uc6b0 \ub2e4\uc74c CSV \ud30c\uc77c\uc744 \ub2e4\uc6b4 \ubc1b\uc2b5\ub2c8\ub2e4: monk_train_1.csv monk_test_1.csv","title":"1. \ub370\uc774\ud130 \ud68d\ub4dd"},{"location":"posts/deep-learning/2019-02-07-IntroductionToArtificialNeuralNetworksPart2/#2","text":"\uc774\uc81c \ub370\uc774\ud130\ub97c \ubd88\ub7ec\uc624\uace0 \uc0b4\ud3b4\ubcf4\ub3c4\ub85d \ud569\ub2c8\ub2e4. > utils::head(monk_train) X X1 X1.1 X1.2 X1.3 X1.4 X3 X1.5 data_5 1 NA 1 1 1 1 1 3 2 data_6 2 NA 1 1 1 1 3 2 1 data_19 3 NA 1 1 1 1 3 3 2 data_22 4 NA 1 1 1 2 1 2 1 data_27 5 NA 1 1 1 2 1 2 2 data_28 6 NA 1 1 1 2 2 3 1 data_37 \uacfc \uac19\uc740\ub370, \uac01 \ud53c\uccd0(Feature)\uc758 \uc774\ub984\uc744 \uc815\ud574\ub193\uc9c0 \uc54a\uc558\uae30 \ub54c\ubb38\uc5d0 \uc790\ub3d9\uc73c\ub85c \uc0dd\uc131\ub418\uc5b4 \uc788\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc6b0\uc120 X\uc5f4 \uc744 \uc0ad\uc81c\ud569\ub2c8\ub2e4. monk_train$X <- NULL \ub2e4\uc2dc \ub370\uc774\ud130 \uba87 \uac1c\ub97c \uc0b4\ud3b4\ubcf4\uba74, > utils::head(monk_train) X1 X1.1 X1.2 X1.3 X1.4 X3 X1.5 data_5 1 1 1 1 1 1 3 2 data_6 2 1 1 1 1 3 2 1 data_19 3 1 1 1 1 3 3 2 data_22 4 1 1 1 2 1 2 1 data_27 5 1 1 1 2 1 2 2 data_28 6 1 1 1 2 2 3 1 data_37 \uccab\ubc88\uc9f8 \uc5f4\uc774\uc5c8\ub358 X \ud53c\uccd0\uac00 \uc0ad\uc81c\ub418\uc5c8\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uc81c \ud53c\uccd0\ub4e4\uc758 \uc774\ub984\uc744 \uc9c0\uc815\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4. UCI Machine Learning Repository\uc758 \ubabd\ud06c \ubb38\uc81c \uc0ac\uc774\ud2b8\ub97c \uc0b4\ud3b4\ubcf4\uba74, Attribute Information\uc5d0\uc11c \uac01 \ud53c\uccd0\uc758 \uc774\ub984\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4: Attribute Information: 1. class: 0, 1 2. a1: 1, 2, 3 3. a2: 1, 2, 3 4. a3: 1, 2 5. a4: 1, 2, 3 6. a5: 1, 2, 3, 4 7. a6: 1, 2 8. Id: (A unique symbol for each instance) \ucd1d 8\uac1c\uc758 \ud53c\uccd0\uac00 \uc788\uace0 \uc774\ub984\uc740 \uc704\uc640 \uac19\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c, \uc704\uc640 \uac19\uc774 \ud53c\uccd0\uc758 \uc774\ub984\uc744 \ubd80\uc5ec\ud558\uace0, base::names(monk_train) <- c(\"class\",\"a1\",\"a2\",\"a3\",\"a4\",\"a5\",\"a6\",\"id\") \ub2e4\uc2dc \ub370\uc774\ud130\ub97c \uba87 \uac1c \uc0b4\ud3b4\ubcf4\uba74, > utils::head(monk_train) class a1 a2 a3 a4 a5 a6 id 1 1 1 1 1 1 3 2 data_6 2 1 1 1 1 3 2 1 data_19 3 1 1 1 1 3 3 2 data_22 4 1 1 1 2 1 2 1 data_27 5 1 1 1 2 1 2 2 data_28 6 1 1 1 2 2 3 1 data_37 \uc774 \uc911 \uc0ac\uc2e4 id\ub294 \ud544\uc694\uac00 \uc5c6\uc73c\ubbc0\ub85c, \ub2e4\uc2dc \uc774 \ud53c\uccd0\ub97c \uc0ad\uc81c\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4: monk_train $ id <- NULL \uc774\uc81c id \ud53c\uccd0\uac00 \uc0ad\uc81c\ub418\uc5c8\uc2b5\ub2c8\ub2e4: > utils :: head ( monk_train ) class a1 a2 a3 a4 a5 a6 1 1 1 1 1 1 3 2 2 1 1 1 1 3 2 1 3 1 1 1 1 3 3 2 4 1 1 1 2 1 2 1 5 1 1 1 2 1 2 2 6 1 1 1 2 2 3 1 \uc774\uc81c \uc804\uccb4\uc801\uc73c\ub85c \ub370\uc774\ud130\ub97c \uc0b4\ud3b4\ubcf4\uba74, > utils::str(monk_train) 'data.frame': 123 obs. of 7 variables: $ class: int 1 1 1 1 1 1 1 1 1 0 ... $ a1 : int 1 1 1 1 1 1 1 1 1 1 ... $ a2 : int 1 1 1 1 1 1 1 1 2 2 ... $ a3 : int 1 1 1 2 2 2 2 2 1 1 ... $ a4 : int 1 3 3 1 1 2 2 3 1 1 ... $ a5 : int 3 2 3 2 2 3 4 1 1 2 ... $ a6 : int 2 1 2 1 2 1 1 2 2 1 ... monk_train \uc740 7\uac1c\uc758 \ud53c\uccd0\ub97c \uac16\ub294 \ucd1d 123\uac1c\uc758 \ub370\uc774\ud130\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud559\uc2b5 \ub370\uc774\ud130\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c, \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \ub610\ud55c \ub3d9\uc77c\ud55c \ubc29\uc2dd\uc73c\ub85c \uac00\uacf5\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4: monk_test <- utils :: read.csv ( file = \"monk_test_1.csv\" , sep = \" \" ) monk_test $ X <- NULL base :: names ( monk_test ) <- c ( \"class\" , \"a1\" , \"a2\" , \"a3\" , \"a4\" , \"a5\" , \"a6\" , \"id\" ) monk_test $ id <- NULL utils :: str ( monk_test ) \ud53c\uccd0\ub9c8\ub2e4 \uac12\uc758 \ubc94\uc704\uac00 \uc81c\uac01\uac01\uc774\uae30 \ub54c\ubb38\uc5d0 \uc774\ub97c \uc815\uaddc\ud654(Normalization)\ud560 \ud544\uc694\uac00 \uc788\uc73c\ubbc0\ub85c, \uc815\uaddc\ud654 \ud568\uc218\ub97c \uc815\uc758\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4. \uc815\uaddc\ud654 \ud568\uc218\ub294 \ubca1\ud130\uc758 \uac12\uc5d0\uc11c \ud574\ub2f9 \ubca1\ud130\uc758 \ucd5c\uc18c\uac12\uc744 \ube80 \uac12\uc744 \ucd5c\ub300\uac12\uacfc \ucd5c\uc18c\uac12\uacfc\uc758 \ucc28\uc774\ub85c \ub098\ub208 \uac83\uc785\ub2c8\ub2e4: normalize <- function ( x ) { return (( x - min ( x )) / ( max ( x ) - min ( x ))) } \ub530\ub77c\uc11c, \uc704\uc758 \ud568\uc218\ub97c \uc774\uc6a9\ud558\uba74, \uc785\ub825\ub41c \uac12\uc5d0 [0,1] \uc758 \ubc94\uc704\ub85c \ubcc0\ud658\ub429\ub2c8\ub2e4. lapply \ud568\uc218\ub97c \uc774\uc6a9\ud558\uc5ec monk_train \uc758 \uac01 \uc5f4\uc5d0 normalize() \ud568\uc218\ub97c \uc801\uc6a9\ud558\uace0, \uc774\ub97c Data Frame\uc73c\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4: monk_train_norm <- base :: as.data.frame ( base :: lapply ( monk_train , normalize )) \uadf8\ub7ec\ub098, class \ud53c\uccd0\ub294 \uc815\uaddc\ud654 \ub418\uc9c0 \uc54a\uae30\ub97c \uc6d0\ud558\uae30 \ub54c\ubb38\uc5d0 \uc774 \ud53c\uccd0\uc5d0 \ub300\ud574\uc11c\ub294 \ub2e4\uc2dc \uc6d0\ub798 \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4: (\uc0ac\uc2e4 class \ud53c\uccd0\uac12\ub4e4\uc740 0 \uc544\ub2c8\uba74 1\uc774\ubbc0\ub85c \uad73\uc774 \ub370\uc774\ud130\ub97c \ub418\ub3cc\ub9b4 \ud544\uc694\ub294 \uc5c6\uc9c0\ub9cc, \ubabd\ud06c \ubb38\uc81c\uac00 \uc544\ub2cc \ub2e4\ub978 \ub370\uc774\ud130\uc778 \uacbd\uc6b0\uc5d0\ub294 \uc774 \uacfc\uc815\uc774 \ubc18\ub4dc\uc2dc \ud544\uc694\ud569\ub2c8\ub2e4.) monk_train_norm $ class <- monk_train $ class \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc5d0 \ub300\ud574\uc11c\ub3c4 \ub3d9\uc77c\ud55c \uacfc\uc815\uc744 \uc218\ud589\ud569\ub2c8\ub2e4: monk_test_norm <- base :: as.data.frame ( base :: lapply ( monk_test , normalize )) monk_test_norm $ class <- monk_test $ class","title":"2. \ub370\uc774\ud130 \uad00\ucc30 \ubc0f \uac00\uacf5"},{"location":"posts/deep-learning/2019-02-07-IntroductionToArtificialNeuralNetworksPart2/#3-nuralnet","text":"\uc774\uc81c R\uc758 \uc778\uacf5\uc2e0\uacbd\ub9dd \ud328\ud0a4\uc9c0 \uc911 \ud558\ub098\uc778 neuralnet \uc744 \ub2e4\uc6b4 \ubc1b\uc2b5\ub2c8\ub2e4: > install.packages ( \"neuralnet\" ) \uadf8\ub9ac\uace0 \uc774 \ud328\ud0a4\uc9c0\ub97c \ub85c\ub529\ud569\ub2c8\ub2e4: base::library(neuralnet)","title":"3. nuralnet \ud328\ud0a4\uc9c0 \uc124\uce58"},{"location":"posts/deep-learning/2019-02-07-IntroductionToArtificialNeuralNetworksPart2/#4-ann","text":"\uc740\ub2c9 \ub808\uc774\uc5b4\ub97c 1\uac1c\ub9cc \uac16\ub294 \uac04\ub2e8\ud55c ANN \ubaa8\ub378\uc744 \uc138\uc6c1\ub2c8\ub2e4: monk_model <- neuralnet :: neuralnet ( formula = class ~ a1 + a2 + a3 + a4 + a5 + a6 , data = monk_train , hidden = 1 ) \uc774\uc81c \uc138\uc6cc\uc9c4 ANN \ubaa8\ub378\uc5d0 \ub300\ud55c \ub124\ud2b8\uc6cc\ud06c \ud1a0\ud3f4\ub85c\uc9c0\ub97c \uac00\uc2dc\ud654\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. > graphics :: plot ( monk_model ) \ubaa8\ub378 \uc544\ud0a4\ud14d\uccd0 \uad6c\uc131\ub41c \ub178\ub4dc \ubc0f \ub808\uc774\uc5b4\uc640 \ub178\ub4dc \uac00\uc911\uce58\ub97c \ud55c \ub208\uc5d0 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc0c1\uae30 \uc774\ubbf8\uc9c0\uc758 \ud30c\ub780\uc0c9 \ub178\ub4dc\ub294 \ud3b8\ud5a5(Bias)\uac12\uc744 \ub098\ud0c0\ub0b4\uba70, \uc774 \uac12\uc740 \ub178\ub4dc\uc758 \uac12\uc774 \uc774\ub3d9\ud558\ub3c4\ub85d \ud558\ub294 \uc0c1\uc218\uac12\uc778\ub370, \ub9c8\uce58 \uc120\ud615 \ud68c\uadc0\ubaa8\ub378\uc5d0\uc11c \uc88c\ud45c Intercept\uc640 \uc720\uc0ac\ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098, \uc5d0\ub7ec\uac12\uc774 \uc0c1\ub2f9\ud788 \ub192\uc73c\ubbc0\ub85c \uc774 \ubaa8\ub378\ub85c \uc608\uce21\ud560 \uacbd\uc6b0 \uc0c1\ub2f9\ud788 \uc548 \uc88b\uc740 \uacb0\uacfc\ub97c \uc5bb\uac8c \ub420 \uac83\uc774\ub77c\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"4. ANN \ubaa8\ub378 \ubc0f \uac00\uc2dc\ud654"},{"location":"posts/deep-learning/2019-02-07-IntroductionToArtificialNeuralNetworksPart2/#5-ann","text":"\uc138\uc6cc\uc9c4 \ubaa8\ub378\uc744 \uc774\uc6a9\ud558\uc5ec \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc758 \ubaa8\ub378 \uacb0\uacfc\ub97c \uc5bb\uc5b4\ubcf4\ub3c4\ub85d \ud569\ub2c8\ub2e4. model_results <- neuralnet :: compute ( monk_model , monk_test [ 2 : 7 ]) \uc704\uc758 \ucf54\ub4dc\uc758 \uc758\ubbf8\ub294 monk_model \uc744 \uc774\uc6a9\ud558\uc5ec monk_test[2:7] \uc5d0 \ub300\ud55c \uc608\uce21 \ubaa8\ub378 \uacb0\uacfc\ub97c \uc5bb\ub294 \uac83\uc785\ub2c8\ub2e4. monk_test[2:7] \ub294 monk_test[1] \uc778 Class \ud53c\uccd0\uc5d0 \ub300\ud55c \ubaa8\ub378 \uacb0\uacfc\ub97c \uc5bb\uae30 \uc704\ud558\uc5ec \ub098\uba38\uc9c0 \ud53c\uccd0\uc778 a1~a6\ub97c \uc774\uc6a9\ud55c\ub2e4\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4. model_results \uac00 \uac00\uc9c0\uace0 \uc788\ub294 \ub370\uc774\ud130 \uc774\ub984\ub97c \uc0b4\ud3b4\ubcf4\uba74, > names ( model_results ) [ 1 ] \"neurons\" \"net.result\" \uc778\ub370, neurons \ub294 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uac01 \ub808\uc774\uc5b4\uc758 \ub274\ub7f0 \ucd9c\ub825\uac12\ub4e4\uc774\uba70, net.result \ub294 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc804\uccb4 \uacb0\uacfc\ub97c \ud589\ub82c \ud615\ud0dc\ub85c \uc800\uc7a5\ud55c \uac12(\ud604\uc7ac \uc6b0\ub9ac\uac00 \ud480\uace0 \uc788\ub294 \ubb38\uc81c\uc5d0\uc11c\ub294 \ubca1\ud130)\uc785\ub2c8\ub2e4. net.result \uc774 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \ubd84\ub958 \uacb0\uacfc\uc785\ub2c8\ub2e4. \uc774 \uac12\uc744 \uc608\uce21 \uacb0\uacfc\uac12\uc774\ub77c\ub294 \ub2e4\ub978 \ubcc0\uc218\uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4. predicted_monk <- model_results $ net.result \uac12\uc744 \uba87 \uac1c \uc0b4\ud3b4\ubcf4\uba74, > head ( predicted_monk ) [, 1 ] [ 1 ,] 1.0102054821 [ 2 ,] 0.3010884442 [ 3 ,] 0.3014953569 [ 4 ,] 0.3010585095 [ 5 ,] 0.3010585096 [ 6 ,] 0.3010585095 \uccab\ubc88\uc9f8 \uac12\uc744 \ubcfc \uc218 \uc788\ub4ef\uc774 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc5d0\uc11c class\uc758 \uac12\uc740 0\uacfc 1\uc0ac\uc774\uc600\ub294\ub370 1\uc744 \uc0b4\uc9dd \ub118\ub294 \uac12\ub3c4 \ubcf4\uc785\ub2c8\ub2e4. \uc989, \uacc4\uc0b0\uc774 \ucda9\ubd84\ud788 \uc815\ud655\ud558\uc9c0 \uc54a\uc74c\uc744 \ub2e4\uc2dc \ud55c \ubc88 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\uba74 \uc2e4\uc81c \ub370\uc774\ud130\uc758 class\uc640 ANN\uc744 \ud1b5\ud574 \uc608\uce21\ub41c \uac12\uc758 \uc624\ucc28\ub97c \ud655\uc778\ud574 \ubcf4\ub3c4\ub85d \ud569\ub2c8\ub2e4. \uc774\ub97c \ud655\uc778\ud558\ub824\uba74 \ub450 \uac12 \uc0ac\uc774\uc758 \uc758\uc874\uc131\uc744 \ubd84\uc11d\ud558\uba74 \ub418\ub294\ub370, \uc774\uac83\uc744 \uc0c1\uad00\uad00\uacc4(Correlation) \ubd84\uc11d\uc774\ub77c\uace0 \ud558\uba70 \ub300\ud45c\uc801\uc778 \uac83\uc73c\ub85c \ud53c\uc5b4\uc2a8(Pearson), \ucf04\ub2ec(Kendall), \uc2a4\ud53c\uc5b4\ub9cc(Spearman) \uc0c1\uad00\uacc4\uc218 \ub4f1\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc640 ANN\uc744 \ud1b5\ud574 \uc608\uce21\ub41c \ub370\uc774\ud130\uc640\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \uacc4\uc0b0\ud574 \ubcf4\ub3c4\ub85d \ud569\ub2c8\ub2e4: > stats :: cor ( predicted_monk , monk_test $ class ) [, 1 ] [ 1 ,] 0.5479135178 \uc0c1\uad00\uad00\uacc4 \uacb0\uacfc\uac12\uc740 [-1,1] \ubc94\uc704\ub97c \uac16\ub294\ub370, -1\uc740 \uc74c\uc758 \uc644\uc804\uc0c1\uad00\uad00\uacc4, 0\uc740 \uc0c1\uad00\uad00\uacc4\uac00 \ud558\ub098\ub3c4 \uc5c6\ub294 \uac83\uc774\uba70, 1\uc740 \uc591\uc758 \uc644\uc804\uc0c1\uad00\uad00\uacc4\uc785\ub2c8\ub2e4. \uac12\uc774 0.5 \uadfc\ucc98\ub85c \ub450 \uac12 \uc0ac\uc774\uc5d0 \uc0c1\uad00\uad00\uacc4\ub294 \uc788\uae34 \ud558\uc9c0\ub9cc \ud06c\uc9c0 \uc54a\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc989, \uacc4\uc0b0 \uacb0\uacfc\uac00 \uadf8\ub9ac \ub9cc\uc871\uc2a4\ub7fd\uc9c0 \ubabb\ud558\uba70, \uc2e4\uc81c \uc5d0\ub7ec\ub3c4 \ucef8\uc74c\uc744 \uc54c \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4.","title":"5. ANN \ubaa8\ub378\uc744 \uc774\uc6a9\ud55c \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc608\uce21"},{"location":"posts/deep-learning/2019-02-07-IntroductionToArtificialNeuralNetworksPart2/#6-ann","text":"\uc740\ub2c9 \ub808\uc774\uc5b4\ub97c \ub2e8\uc9c0 1\uac1c\ub9cc \uc0ac\uc6a9\ud55c \uacbd\uc6b0, \uacb0\uacfc\uac00 \uc369 \ub9cc\uc871\uc2a4\ub7fd\uc9c0 \ubabb\ud588\uc2b5\ub2c8\ub2e4. \uc740\ub2c9 \ub808\uc774\uc5b4\ub97c \ucd94\uac00\ud560 \uc218\ub85d \ud574\uac00 \uc870\uae08\uc529 \uac1c\uc120\ub420 \uac83\uc774\uc9c0\ub9cc \uacc4\uc0b0\ub7c9\uc774 \ub9e4\uc6b0 \ub298\uc5b4\ub0a0 \uac83\uc785\ub2c8\ub2e4. \uacc4\uc18d\ud574\uc11c \uc740\ub2c9 \ub808\uc774\uc5b4\ub97c \ucd94\uac00\ud558\ub2e4\ubcf4\uba74 \uacb0\uacfc\ub294 \ub354\uc774\uc0c1 \ub208\uc5d0 \ub744\uac8c \uac1c\uc120\ub418\uc9c0 \uc54a\uc744 \uc218 \uc788\ub294\ub370 \ud574\uac00 \uc218\ub834\ub418\uc5c8\ub2e4\uace0 \ubcfc \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4. \ub610\ud55c \uc740\ub2c9 \ub808\uc774\uc5b4\ub97c \ub108\ubb34 \ub9ce\uc774 \ucd94\uac00\ud558\ub2e4\ubcf4\uba74 \uc624\ud788\ub824 \uacb0\uacfc\uac00 \ub354 \uc548 \uc88b\uc544\uc9c0\ub294 \uacbd\uc6b0\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc5b4\uca0c\ub4e0 \uc740\ub2c9 \ub808\uc774\uc5b4\ub97c 2\ub85c \uc9c0\uc815\ud574\uc11c \uacb0\uacfc\ub97c \ud655\uc778\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. set.seed ( 12345 ) monk_model <- neuralnet :: neuralnet ( formula = class ~ a1 + a2 + a3 + a4 + a5 + a6 , data = monk_train , hidden = 2 ) graphics :: plot ( monk_model ) model_results <- neuralnet :: compute ( monk_model , monk_test [ 2 : 7 ]) predicted_monk <- model_results $ net.result \uc774 \ub54c\uc758 \uacb0\uacfc\ub294, > stats :: cor ( predicted_monk , monk_test $ class ) [, 1 ] [ 1 ,] 0.5604624596 \uc774\uba70, \uc740\ub2c9 \ub808\uc774\uc5b4\uac00 1\uac1c\uc778 \uacbd\uc6b0\ubcf4\ub2e4 \uacb0\uacfc\uac00 \uc57d\uac04 \uac1c\uc120 \ub418\uc5c8\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc740\ub2c9 \ub808\uc774\uc5b4\ub97c 5\uac1c\uae4c\uc9c0 \ub298\ub9ac\uba74\uc11c \ud14c\uc2a4\ud2b8 \ud574 \ubcf4\uba74, No. of Hidden Layers Error Steps Correlation Coefficient 1 10.858 2523 0.54791 2 6.829 3884 0.50605 3 0.024 4553 0.99862 4 4.2716 8082 0.67534 5 0.018 7760 0.99712 \uc640 \uac19\uc740\ub370, \uc740\ub2c9 \ub808\uc774\uc5b4\uac00 3\uac1c \uc0ac\uc6a9\ub41c \uacbd\uc6b0 \uadf9\uc801\uc73c\ub85c \uacb0\uacfc\uac00 \uc88b\uc544\uc84c\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098, 3\uac1c \uc0ac\uc6a9\ub41c \uacbd\uc6b0\uc5d0 \ube44\ud574 4\uac1c \uc0ac\uc6a9\ub418\ub294 \uacbd\uc6b0 \uacc4\uc0b0\ub7c9\uc740 2\uac1c \uac00\uae4c\uc774 \ub9ce\uc544\uc84c\ub294\ub370 \uacb0\uacfc\ub294 \uc624\ud788\ub824 \ub354 \uc548 \uc88b\uc544\uc84c\uc73c\uba70, 5\uac1c \uc0ac\uc6a9\ub41c \uacbd\uc6b0 \uacb0\uacfc\ub294 \ub2e4\uc2dc \uc88b\uc544\uc84c\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc704\uc758 \uc774\ubbf8\uc9c0\ub294 \uc2dc\ud5d8\uc0bc\uc544 \uc740\ub2c9 \ub808\uc774\uc5b4\ub97c 10\uac1c \uc0ac\uc6a9\ud55c \uacbd\uc6b0\uc778\ub370 \ub208\uc774 \ub3cc\uc544\uac08 \uc815\ub3c4\ub85c \ubcf5\uc7a1\ud574 \ubcf4\uc785\ub2c8\ub2e4. UCI Machine Learning Repository\uc758 \ubabd\ud06c \ubb38\uc81c(Monk's Problem) \ub370\uc774\ud130 \uc5d0\uc11c \ub370\uc774\ud130\uc14b 2\uc640 3\uc5d0 \ub300\ud574\uc11c\ub3c4 \uc5f0\uc2b5\uc0bc\uc544 \uc704\uc758 \uacfc\uc815\uc744 \ud14c\uc2a4\ud2b8\ud574 \ubcf4\uae38 \ubc14\ub78d\ub2c8\ub2e4. \uc774\ub85c\uc368 R\uc758 ANN \ud328\ud0a4\uc9c0\uc778 neuralnet\uc744 \uc774\uc6a9\ud558\uc5ec \ubd84\ub958 \ubb38\uc81c\ub97c \ud478\ub294 \ubc29\ubc95\uc5d0 \ub300\ud574\uc11c \uc54c\uc544\ubcf4\uc558\uc2b5\ub2c8\ub2e4.","title":"6. ANN \ubaa8\ub378 \uc131\ub2a5 \uac1c\uc120"},{"location":"posts/deep-learning/2019-02-09-object-detection-using-rcnn/","text":"Written by Alex Choi, Feb. 09, 2019. \uc774\ubc88 \ud3ec\uc2a4\ud305\uc5d0\uc11c\ub294 Object Detection\uc758 \ucd08\uae30 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc778 R-CNN\uc5d0 \ub300\ud558\uc5ec \uac04\ub2e8\ud788 \uc54c\uc544\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. Introduction R-CNN\uc740 Regional Convolutional Neural Networks\ub97c \uc758\ubbf8\ud558\ub294 \uac83\uc73c\ub85c, Jitendra Malik \uad50\uc218\uac00 \uc774\ub044\ub294 UC Berkley\uc758 \uc5f0\uad6c\uc790\ub4e4(Ross Girshick, Jeff Donahue, Trevor Darrell)\uc5d0 \uc758\ud574 \uc5f0\uad6c \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uad00\ub828 \ub17c\ubb38\uc740 \uc544\ub798 \ub9c1\ud06c\ub97c \ucc38\uace0\ud558\uc2dc\uba74 \ub418\uaca0\uc2b5\ub2c8\ub2e4: Rich feature hierarchies for accurate object detection and semantic segmentation, 2014 R-CNN\uc744 \uad6c\uccb4\uc801\uc73c\ub85c \uc124\uba85\ud558\uae30 \uc804\uc5d0, \uc6b0\uc120 Object Detection\uc774 \ubb34\uc5c7\uc778\uc9c0 \uc54c\uc544\ubcf4\uace0\uc790 \ud569\ub2c8\ub2e4. Object Detection\uc774\ub780, \uc8fc\uc5b4\uc9c4 \uc774\ubbf8\uc9c0 \ub0b4\uc5d0 \uc5b4\ub290 \uc601\uc5ed\uc5d0 \uc624\ube0c\uc81d\ud2b8\uac00 \uc874\uc7ac\ud558\ub294\uc9c0 \uc54c\uc544\ub0b4\uace0, \ub9cc\uc57d \ud574\ub2f9 \uc601\uc5ed\uc5d0 \uc624\ube0c\uc81d\ud2b8\uac00 \uc874\uc7ac\ud55c\ub2e4\uba74 \uadf8 \uc624\ube0c\uc81d\ud2b8\uc758 \uc885\ub958\uac00 \ubb34\uc5c7\uc778\uc9c0(Classfication) \uc54c\uc544\ub0b4\ub294 \ubc29\ubc95\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. Jitendra Malik \uad50\uc218 \ud300\uc740, 2012\ub144\uc5d0 ILSVRC \uc5d0\uc11c \uc6b0\uc2b9\ud55c Toronto \ub300\ud559\uad50\uc758 Hinton \uad50\uc218 \uc5f0\uad6c\ud300\uc758 Alex Krizhevsky\uac00 \ubc1c\ud45c\ud55c AlexNet \uc5d0 \uc601\uac10\uc744 \ubc1b\uace0 \"CNN\uc744 Object Detection\uc5d0 \ud65c\uc6a9\ud560 \uc218 \uc788\uc744\uae4c?\"\ub77c\ub294 \uc9c8\ubb38\uc73c\ub85c \uc5f0\uad6c\ub97c \uc2dc\uc791\ud588\ub2e4\uace0 \ud569\ub2c8\ub2e4. \uc774 \uc9c8\ubb38\uc5d0 \ub2f5\ud558\uace0\uc790, Jitendra Malik \uad50\uc218 \ud300\uc740 R-CNN\uc744 \uace0\uc548\ud558\uc5ec \uc774\ub97c PASCAL VOC \ub370\uc774\ud130\uc138\ud2b8\uc5d0 \uc801\uc6a9\ud558\uc600\uc73c\uba70 CNN\uc774 Object Detection \uc601\uc5ed\uc5d0\uc11c\ub3c4 \uae30\uc874 HoG \ub4f1\uacfc \uac19\uc740 Feature\uc5d0 \ube44\ud574 \ub6f0\uc5b4\ub09c \uc131\ub2a5\uc744 \ubcf4\uc774\ub294 \uac83\uc744 \ud655\uc778\ud558\uc600\uc2b5\ub2c8\ub2e4. R-CNN \uc774\ud574\ud558\uae30 \uadf8\ub7fc \ubcf8\uaca9\uc801\uc73c\ub85c R-CNN\uc5d0 \ub300\ud558\uc5ec \uc774\ud574\ud574 \ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. R-CNN\uc758 \uc785\ub825\uacfc \ucd9c\ub825\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: * \uc785\ub825: \uc774\ubbf8\uc9c0 * \ucd9c\ub825: \ubc14\uc6b4\ub529 \ubc15\uc2a4\ub4e4(Bounding Boxes), \uac01 \ubc14\uc6b4\ub529 \ubc15\uc2a4 \ub0b4\uc758 \uc624\ube0c\uc81d\ud2b8\uc758 \uc885\ub958(Label) \uadf8\ub7ec\uba74, \ubc14\uc6b4\ub529 \ubc15\uc2a4\ub97c \uc5b4\ub5bb\uac8c \uacb0\uc815\ud560 \uc218 \uc788\uc744\uae4c\uc694? Region Proposal \uac00\uc7a5 \ub2e8\uc21c\ud558\uace0 \uc9c1\uad00\uc801\uc73c\ub85c \uc0dd\uac01\ud558\uba74, \ub2e4\uc591\ud55c \ud06c\uae30\uc640 \ub2e4\uc591\ud55c \uc885\ud6a1\ube44(Aspect Ratio)\ub97c \uac16\ub294 Windows\ub97c \uc124\uc815\ud558\uc5ec \uc774\ubbf8\uc9c0\ub97c \ucb48\uc6b1 \ud6d1\uc5b4\uac00\uba70 \uc624\ube0c\uc81d\ud2b8\uc758 \uc720\ubb34 \ubc0f \uc885\ub958\ub97c \uc54c\uc544\ub0b4\ub294 \ubc29\ubc95\uc774 \uc788\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub97c Sliding Window \uae30\ubc95\uc774\ub77c\uace0 \ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098, \uc774\ubbf8\uc9c0 \ub0b4\uc758 \uc624\ube0c\uc81d\ud2b8\uac00 \uc5b4\ub5a4 \ud06c\uae30\ub85c \uc5b4\ub5a4 \uc885\ud6a1\ube44\ub97c \uac16\ub294\uc9c0 \uc54c \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \ub9e4\uc6b0 \ub9ce\uc740 \uc885\ub958\uc758 WIndows\ub97c \uc0dd\uc131\ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc5d0 \ub9e4\uc6b0 \ube44\ud6a8\uc728\uc801\uc778 \ubc29\ubc95\uc774\ub77c\uace0 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Sliding Window\ub97c \uc774\uc6a9\ud55c Object Detection \uc608\uc2dc - Image from pyimagesearch.com \uc624\ube0c\uc81d\ud2b8\uac00 \uc874\uc7ac\ud560 \uac83 \uac19\uc740 \uc601\uc5ed\uc744 \uc81c\uc548\ud558\ub294 \uac83\uc744 Region Proposals\ub77c\uace0 \ud558\ub294\ub370, Sliding Window\uc758 \uc774\ub7ec\ud55c \ube44\ud6a8\uc728\uc131 \ub54c\ubb38\uc5d0 \ubcf8 \ub17c\ubb38\uc5d0\uc11c\ub294 Region Proposals\ub85c\uc11c Selective Search \uae30\ubc95\uc744 \uc774\uc6a9\ud569\ub2c8\ub2e4. Selective Search\ub294 Object Detection\uc744 \uc704\ud55c Region Proposal \uc54c\uace0\ub9ac\uc998\uc73c\ub85c \ud53d\uc140 \uac04\uc758 \uceec\ub7ec, \ud14d\uc2a4\uccd0, \ud06c\uae30, \ubaa8\uc591 \ub4f1\uc758 \uc720\uc0ac\uc131\uc744 \uae30\ubc18\uc73c\ub85c \uc601\uc5ed\uc744 \ub113\ud600\uac00\uba70 Segnmentation(\ub610\ub294 Grouping)\ud558\ub294 \uae30\ubc95\uc785\ub2c8\ub2e4. Selective Search \uc608\uc2dc - Image from learnopencv.com R-CNN \uad6c\uc870 \ub17c\ubb38\uc5d0 \uc81c\uc2dc\ub41c R-CNN\uc758 \uad6c\uc870\ub294 \uc544\ub798 \uc774\ubbf8\uc9c0\uc640 \uac19\uc2b5\ub2c8\ub2e4. \uc6b0\uc120, \uc785\ub825 \uc774\ubbf8\uc9c0(Input Image)\ub85c\ubd80\ud130 \ucd5c\ub300 2000(~2k)\uac1c\uc758 Region Proposals\ub97c \ucd94\ucd9c\ud569\ub2c8\ub2e4. \uac01 \ucd94\ucd9c\ub41c Region\uc744 \uc815\ud574\uc9c4 \ud574\uc0c1\ub3c4\ub85c \ub9de\ucd94\ub294\ub370 \uc774\ub97c Warping\uc774\ub77c\uace0 \ud569\ub2c8\ub2e4. \uc774\ub294, CNN\uc774 \uc815\ud574\uc9c4 \ud574\uc0c1\ub3c4\ub85c \uc785\ub825\uc744 \ubc1b\uc544\uc57c \ud558\uae30 \ub54c\ubb38\uc5d0 \uac00\ub85c-\uc138\ub85c \ube44\uc728\uc744 \uc815\ud574\uc9c4 \uc785\ub825 \ud574\uc0c1\ub3c4\ub85c \ub9de\ucd94\ub294 \uacfc\uc815\uc5d0\uc11c \uc774\ubbf8\uc9c0\uc758 \ube44\uc728\uc744 \ube44\ud2b8\ub294(Warp) \uacfc\uc815\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. Warp\ub41c \uc601\uc5ed\uc744 AlexNet \ub4f1\uacfc \uac19\uc740 CNN\uc744 \ud1b5\ud574(\ub17c\ubb38\uc5d0\uc11c\ub294 AlexNet\uc744 \uc774\uc6a9\ud558\uc600\uc9c0\ub9cc, \uadf8 \ud6c4\uc5d0 \ubc1c\ud45c\ub41c ResNet, GoogLeNet \ub4f1\uc744 \uc774\uc6a9\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4) Feature Map\uc744 \uc5bb\uc2b5\ub2c8\ub2e4. \uc5bb\uc5b4\uc9c4 Feature Map\uc744 Support Vector Machine(SVM) \uc744 \uc774\uc6a9\ud558\uc5ec \uac01 Region\uc744 \ubd84\ub958\ud569\ub2c8\ub2e4. VOC 2007\uc758 Warp\ub41c \ud559\uc2b5 \uc0d8\ud50c\ub4e4 \ubc14\uc6b4\ub529 \ubc15\uc2a4 \uac1c\uc120 \ub9c8\uc9c0\ub9c9 \uc9c8\ubb38\uc740, \"\ubc14\uc6b4\ub529 \ubc15\uc2a4\ub97c \uc2e4\uc81c \uc624\ube0c\uc81d\ud2b8 \uc601\uc5ed\uc5d0 \ubc00\uc811\ud558\uac8c \ucc3e\uc544\ub0bc \uc218 \uc788\uc744 \uac83\uc778\uac00?\"\uc785\ub2c8\ub2e4. \uc774\ub294, Linear Regression \uae30\ubc95\uc744 \uc774\uc6a9\ud558\uc5ec \uac00\ub2a5\ud569\ub2c8\ub2e4. \ubc14\uc6b4\ub529 \ubc15\uc2a4\uc758 \ubcc0\uc218\ub97c \uc911\uc2ec\uc88c\ud45c, \ub113\uc774 \ubc0f \ub192\uc774\uc758 4\uac1c\ub85c \ud45c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \\[ (C_x, C_y, W, H) \\] \uc5ec\uae30\uc11c, \\((C_x, C_y)\\) \ub294 \ubc14\uc6b4\ub529 \ubc15\uc2a4\uc758 \uc911\uc2ec\uc88c\ud45c\ub97c, \\(W\\) , \\(H\\) \ub294 \uac01\uac01 \ubc14\uc6b4\ub529 \ubc15\uc2a4\uc758 \ub112\uc774, \ub192\uc774\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. \ubcf8 \ub17c\ubb38\uc5d0\uc11c\ub294, \uc774\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud574 \\(N\\) \uac1c\uc758 \ubc14\uc6b4\ub529 \ubc15\uc2a4 \ud559\uc2b5 \ub370\uc774\ud130\ub97c \uc774\uc6a9\ud569\ub2c8\ub2e4. \uc989, \\[ \\{ (P^i, G^i) \\}, i=1,...,N \\] \uc5ec\uae30\uc11c, \\(P^i\\) \ub294 \ubc14\uc6b4\ub529 \ubc15\uc2a4 Proposal\uc758 \\(i\\) \ubc88\uc9f8 \ub370\uc774\ud130\ub97c, \\(G^i\\) \ub294 Ground Truth\uc758 \\(i\\) \ubc88\uc9f8 \ud559\uc2b5 \ub370\uc774\ud130\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c, \\(P^i\\) \uac00 \\(G^i\\) \uc5d0 \uadfc\uc811\ud560 \uc218 \uc788\ub3c4\ub85d \uc801\uc808\ud55c Loss\ub97c \uc815\uc758\ud558\uc5ec \uc774\ub97c \ucd5c\uc18c\ud654\ud558\ub3c4\ub85d \ud559\uc2b5\uc744 \ud569\ub2c8\ub2e4. \uc774\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \ub17c\ubb38\uc758 [C. Bounding-box regression] \ubd80\ubd84\uc744 \ucc38\uace0\ud558\uc2dc\uba74 \ub418\uaca0\uc2b5\ub2c8\ub2e4. \uc544\ub798 \uc774\ubbf8\uc9c0\ub4e4\uc740 R-CNN\uc744 \uc774\uc6a9\ud558\uc5ec Object Detection\ud55c \uacb0\uacfc\ub4e4\uc785\ub2c8\ub2e4. \uc694\uc57d \uc9c0\uae08\uae4c\uc9c0 R-CNN\uc5d0 \ub300\ud558\uc5ec \uc54c\uc544\ubcf4\uc558\uc2b5\ub2c8\ub2e4. R-CNN \ubc29\ubc95\uc744 \uc694\uc57d\ud558\uc790\uba74, \uc785\ub825 \uc774\ubbf8\uc9c0\ub97c \ubc1b\ub294\ub2e4. Selective Search\ub97c \uc774\uc6a9\ud558\uc5ec Region Proposals\ub97c \ucd5c\ub300 2,000\uac1c \uc0dd\uc131\ud55c\ub2e4. \uc0dd\uc131\ub41c \uac01 Region Proposal\uc744 Warping\ud55c \ud6c4, \uc774\ub97c CNN\uc744 \uc774\uc6a9\ud558\uc5ec Feature Map\uc744 \uc0dd\uc131\ud55c\ub2e4. \uc0dd\uc131\ub41c Feature Map\uc744 SVM\uc744 \uc774\uc6a9\ud558\uc5ec \ubd84\ub958\ud55c\ub2e4. \ubc14\uc6b4\ub529 \ubc15\uc2a4\uc5d0 \ub300\ud558\uc5ec Linear Regression(Bounding-box Regressor)\ub97c \ud1b5\ud574 \uc624\ube0c\uc81d\ud2b8\uc758 \uc704\uce58\uc5d0 \uadfc\uc811\ud558\ub3c4\ub85d \ub9de\ucd98\ub2e4. \ub2e4\uc74c \ud3ec\uc2a4\ud305\uc5d0\uc11c\ub294 R-CNN\uc758 \uc18d\ub3c4\ub97c \uac1c\uc120\ud55c Fast R-CNN\uc5d0 \ub300\ud558\uc5ec \uc54c\uc544\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","title":"Object Detection Using R-CNN"},{"location":"posts/deep-learning/2019-02-09-object-detection-using-rcnn/#introduction","text":"R-CNN\uc740 Regional Convolutional Neural Networks\ub97c \uc758\ubbf8\ud558\ub294 \uac83\uc73c\ub85c, Jitendra Malik \uad50\uc218\uac00 \uc774\ub044\ub294 UC Berkley\uc758 \uc5f0\uad6c\uc790\ub4e4(Ross Girshick, Jeff Donahue, Trevor Darrell)\uc5d0 \uc758\ud574 \uc5f0\uad6c \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uad00\ub828 \ub17c\ubb38\uc740 \uc544\ub798 \ub9c1\ud06c\ub97c \ucc38\uace0\ud558\uc2dc\uba74 \ub418\uaca0\uc2b5\ub2c8\ub2e4: Rich feature hierarchies for accurate object detection and semantic segmentation, 2014 R-CNN\uc744 \uad6c\uccb4\uc801\uc73c\ub85c \uc124\uba85\ud558\uae30 \uc804\uc5d0, \uc6b0\uc120 Object Detection\uc774 \ubb34\uc5c7\uc778\uc9c0 \uc54c\uc544\ubcf4\uace0\uc790 \ud569\ub2c8\ub2e4. Object Detection\uc774\ub780, \uc8fc\uc5b4\uc9c4 \uc774\ubbf8\uc9c0 \ub0b4\uc5d0 \uc5b4\ub290 \uc601\uc5ed\uc5d0 \uc624\ube0c\uc81d\ud2b8\uac00 \uc874\uc7ac\ud558\ub294\uc9c0 \uc54c\uc544\ub0b4\uace0, \ub9cc\uc57d \ud574\ub2f9 \uc601\uc5ed\uc5d0 \uc624\ube0c\uc81d\ud2b8\uac00 \uc874\uc7ac\ud55c\ub2e4\uba74 \uadf8 \uc624\ube0c\uc81d\ud2b8\uc758 \uc885\ub958\uac00 \ubb34\uc5c7\uc778\uc9c0(Classfication) \uc54c\uc544\ub0b4\ub294 \ubc29\ubc95\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. Jitendra Malik \uad50\uc218 \ud300\uc740, 2012\ub144\uc5d0 ILSVRC \uc5d0\uc11c \uc6b0\uc2b9\ud55c Toronto \ub300\ud559\uad50\uc758 Hinton \uad50\uc218 \uc5f0\uad6c\ud300\uc758 Alex Krizhevsky\uac00 \ubc1c\ud45c\ud55c AlexNet \uc5d0 \uc601\uac10\uc744 \ubc1b\uace0 \"CNN\uc744 Object Detection\uc5d0 \ud65c\uc6a9\ud560 \uc218 \uc788\uc744\uae4c?\"\ub77c\ub294 \uc9c8\ubb38\uc73c\ub85c \uc5f0\uad6c\ub97c \uc2dc\uc791\ud588\ub2e4\uace0 \ud569\ub2c8\ub2e4. \uc774 \uc9c8\ubb38\uc5d0 \ub2f5\ud558\uace0\uc790, Jitendra Malik \uad50\uc218 \ud300\uc740 R-CNN\uc744 \uace0\uc548\ud558\uc5ec \uc774\ub97c PASCAL VOC \ub370\uc774\ud130\uc138\ud2b8\uc5d0 \uc801\uc6a9\ud558\uc600\uc73c\uba70 CNN\uc774 Object Detection \uc601\uc5ed\uc5d0\uc11c\ub3c4 \uae30\uc874 HoG \ub4f1\uacfc \uac19\uc740 Feature\uc5d0 \ube44\ud574 \ub6f0\uc5b4\ub09c \uc131\ub2a5\uc744 \ubcf4\uc774\ub294 \uac83\uc744 \ud655\uc778\ud558\uc600\uc2b5\ub2c8\ub2e4.","title":"Introduction"},{"location":"posts/deep-learning/2019-02-09-object-detection-using-rcnn/#r-cnn","text":"\uadf8\ub7fc \ubcf8\uaca9\uc801\uc73c\ub85c R-CNN\uc5d0 \ub300\ud558\uc5ec \uc774\ud574\ud574 \ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. R-CNN\uc758 \uc785\ub825\uacfc \ucd9c\ub825\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: * \uc785\ub825: \uc774\ubbf8\uc9c0 * \ucd9c\ub825: \ubc14\uc6b4\ub529 \ubc15\uc2a4\ub4e4(Bounding Boxes), \uac01 \ubc14\uc6b4\ub529 \ubc15\uc2a4 \ub0b4\uc758 \uc624\ube0c\uc81d\ud2b8\uc758 \uc885\ub958(Label) \uadf8\ub7ec\uba74, \ubc14\uc6b4\ub529 \ubc15\uc2a4\ub97c \uc5b4\ub5bb\uac8c \uacb0\uc815\ud560 \uc218 \uc788\uc744\uae4c\uc694?","title":"R-CNN \uc774\ud574\ud558\uae30"},{"location":"posts/deep-learning/2019-02-09-object-detection-using-rcnn/#region-proposal","text":"\uac00\uc7a5 \ub2e8\uc21c\ud558\uace0 \uc9c1\uad00\uc801\uc73c\ub85c \uc0dd\uac01\ud558\uba74, \ub2e4\uc591\ud55c \ud06c\uae30\uc640 \ub2e4\uc591\ud55c \uc885\ud6a1\ube44(Aspect Ratio)\ub97c \uac16\ub294 Windows\ub97c \uc124\uc815\ud558\uc5ec \uc774\ubbf8\uc9c0\ub97c \ucb48\uc6b1 \ud6d1\uc5b4\uac00\uba70 \uc624\ube0c\uc81d\ud2b8\uc758 \uc720\ubb34 \ubc0f \uc885\ub958\ub97c \uc54c\uc544\ub0b4\ub294 \ubc29\ubc95\uc774 \uc788\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub97c Sliding Window \uae30\ubc95\uc774\ub77c\uace0 \ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098, \uc774\ubbf8\uc9c0 \ub0b4\uc758 \uc624\ube0c\uc81d\ud2b8\uac00 \uc5b4\ub5a4 \ud06c\uae30\ub85c \uc5b4\ub5a4 \uc885\ud6a1\ube44\ub97c \uac16\ub294\uc9c0 \uc54c \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \ub9e4\uc6b0 \ub9ce\uc740 \uc885\ub958\uc758 WIndows\ub97c \uc0dd\uc131\ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc5d0 \ub9e4\uc6b0 \ube44\ud6a8\uc728\uc801\uc778 \ubc29\ubc95\uc774\ub77c\uace0 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Sliding Window\ub97c \uc774\uc6a9\ud55c Object Detection \uc608\uc2dc - Image from pyimagesearch.com \uc624\ube0c\uc81d\ud2b8\uac00 \uc874\uc7ac\ud560 \uac83 \uac19\uc740 \uc601\uc5ed\uc744 \uc81c\uc548\ud558\ub294 \uac83\uc744 Region Proposals\ub77c\uace0 \ud558\ub294\ub370, Sliding Window\uc758 \uc774\ub7ec\ud55c \ube44\ud6a8\uc728\uc131 \ub54c\ubb38\uc5d0 \ubcf8 \ub17c\ubb38\uc5d0\uc11c\ub294 Region Proposals\ub85c\uc11c Selective Search \uae30\ubc95\uc744 \uc774\uc6a9\ud569\ub2c8\ub2e4. Selective Search\ub294 Object Detection\uc744 \uc704\ud55c Region Proposal \uc54c\uace0\ub9ac\uc998\uc73c\ub85c \ud53d\uc140 \uac04\uc758 \uceec\ub7ec, \ud14d\uc2a4\uccd0, \ud06c\uae30, \ubaa8\uc591 \ub4f1\uc758 \uc720\uc0ac\uc131\uc744 \uae30\ubc18\uc73c\ub85c \uc601\uc5ed\uc744 \ub113\ud600\uac00\uba70 Segnmentation(\ub610\ub294 Grouping)\ud558\ub294 \uae30\ubc95\uc785\ub2c8\ub2e4. Selective Search \uc608\uc2dc - Image from learnopencv.com","title":"Region Proposal"},{"location":"posts/deep-learning/2019-02-09-object-detection-using-rcnn/#r-cnn_1","text":"\ub17c\ubb38\uc5d0 \uc81c\uc2dc\ub41c R-CNN\uc758 \uad6c\uc870\ub294 \uc544\ub798 \uc774\ubbf8\uc9c0\uc640 \uac19\uc2b5\ub2c8\ub2e4. \uc6b0\uc120, \uc785\ub825 \uc774\ubbf8\uc9c0(Input Image)\ub85c\ubd80\ud130 \ucd5c\ub300 2000(~2k)\uac1c\uc758 Region Proposals\ub97c \ucd94\ucd9c\ud569\ub2c8\ub2e4. \uac01 \ucd94\ucd9c\ub41c Region\uc744 \uc815\ud574\uc9c4 \ud574\uc0c1\ub3c4\ub85c \ub9de\ucd94\ub294\ub370 \uc774\ub97c Warping\uc774\ub77c\uace0 \ud569\ub2c8\ub2e4. \uc774\ub294, CNN\uc774 \uc815\ud574\uc9c4 \ud574\uc0c1\ub3c4\ub85c \uc785\ub825\uc744 \ubc1b\uc544\uc57c \ud558\uae30 \ub54c\ubb38\uc5d0 \uac00\ub85c-\uc138\ub85c \ube44\uc728\uc744 \uc815\ud574\uc9c4 \uc785\ub825 \ud574\uc0c1\ub3c4\ub85c \ub9de\ucd94\ub294 \uacfc\uc815\uc5d0\uc11c \uc774\ubbf8\uc9c0\uc758 \ube44\uc728\uc744 \ube44\ud2b8\ub294(Warp) \uacfc\uc815\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. Warp\ub41c \uc601\uc5ed\uc744 AlexNet \ub4f1\uacfc \uac19\uc740 CNN\uc744 \ud1b5\ud574(\ub17c\ubb38\uc5d0\uc11c\ub294 AlexNet\uc744 \uc774\uc6a9\ud558\uc600\uc9c0\ub9cc, \uadf8 \ud6c4\uc5d0 \ubc1c\ud45c\ub41c ResNet, GoogLeNet \ub4f1\uc744 \uc774\uc6a9\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4) Feature Map\uc744 \uc5bb\uc2b5\ub2c8\ub2e4. \uc5bb\uc5b4\uc9c4 Feature Map\uc744 Support Vector Machine(SVM) \uc744 \uc774\uc6a9\ud558\uc5ec \uac01 Region\uc744 \ubd84\ub958\ud569\ub2c8\ub2e4. VOC 2007\uc758 Warp\ub41c \ud559\uc2b5 \uc0d8\ud50c\ub4e4","title":"R-CNN \uad6c\uc870"},{"location":"posts/deep-learning/2019-02-09-object-detection-using-rcnn/#_1","text":"\ub9c8\uc9c0\ub9c9 \uc9c8\ubb38\uc740, \"\ubc14\uc6b4\ub529 \ubc15\uc2a4\ub97c \uc2e4\uc81c \uc624\ube0c\uc81d\ud2b8 \uc601\uc5ed\uc5d0 \ubc00\uc811\ud558\uac8c \ucc3e\uc544\ub0bc \uc218 \uc788\uc744 \uac83\uc778\uac00?\"\uc785\ub2c8\ub2e4. \uc774\ub294, Linear Regression \uae30\ubc95\uc744 \uc774\uc6a9\ud558\uc5ec \uac00\ub2a5\ud569\ub2c8\ub2e4. \ubc14\uc6b4\ub529 \ubc15\uc2a4\uc758 \ubcc0\uc218\ub97c \uc911\uc2ec\uc88c\ud45c, \ub113\uc774 \ubc0f \ub192\uc774\uc758 4\uac1c\ub85c \ud45c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \\[ (C_x, C_y, W, H) \\] \uc5ec\uae30\uc11c, \\((C_x, C_y)\\) \ub294 \ubc14\uc6b4\ub529 \ubc15\uc2a4\uc758 \uc911\uc2ec\uc88c\ud45c\ub97c, \\(W\\) , \\(H\\) \ub294 \uac01\uac01 \ubc14\uc6b4\ub529 \ubc15\uc2a4\uc758 \ub112\uc774, \ub192\uc774\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. \ubcf8 \ub17c\ubb38\uc5d0\uc11c\ub294, \uc774\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud574 \\(N\\) \uac1c\uc758 \ubc14\uc6b4\ub529 \ubc15\uc2a4 \ud559\uc2b5 \ub370\uc774\ud130\ub97c \uc774\uc6a9\ud569\ub2c8\ub2e4. \uc989, \\[ \\{ (P^i, G^i) \\}, i=1,...,N \\] \uc5ec\uae30\uc11c, \\(P^i\\) \ub294 \ubc14\uc6b4\ub529 \ubc15\uc2a4 Proposal\uc758 \\(i\\) \ubc88\uc9f8 \ub370\uc774\ud130\ub97c, \\(G^i\\) \ub294 Ground Truth\uc758 \\(i\\) \ubc88\uc9f8 \ud559\uc2b5 \ub370\uc774\ud130\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c, \\(P^i\\) \uac00 \\(G^i\\) \uc5d0 \uadfc\uc811\ud560 \uc218 \uc788\ub3c4\ub85d \uc801\uc808\ud55c Loss\ub97c \uc815\uc758\ud558\uc5ec \uc774\ub97c \ucd5c\uc18c\ud654\ud558\ub3c4\ub85d \ud559\uc2b5\uc744 \ud569\ub2c8\ub2e4. \uc774\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \ub17c\ubb38\uc758 [C. Bounding-box regression] \ubd80\ubd84\uc744 \ucc38\uace0\ud558\uc2dc\uba74 \ub418\uaca0\uc2b5\ub2c8\ub2e4. \uc544\ub798 \uc774\ubbf8\uc9c0\ub4e4\uc740 R-CNN\uc744 \uc774\uc6a9\ud558\uc5ec Object Detection\ud55c \uacb0\uacfc\ub4e4\uc785\ub2c8\ub2e4.","title":"\ubc14\uc6b4\ub529 \ubc15\uc2a4 \uac1c\uc120"},{"location":"posts/deep-learning/2019-02-09-object-detection-using-rcnn/#_2","text":"\uc9c0\uae08\uae4c\uc9c0 R-CNN\uc5d0 \ub300\ud558\uc5ec \uc54c\uc544\ubcf4\uc558\uc2b5\ub2c8\ub2e4. R-CNN \ubc29\ubc95\uc744 \uc694\uc57d\ud558\uc790\uba74, \uc785\ub825 \uc774\ubbf8\uc9c0\ub97c \ubc1b\ub294\ub2e4. Selective Search\ub97c \uc774\uc6a9\ud558\uc5ec Region Proposals\ub97c \ucd5c\ub300 2,000\uac1c \uc0dd\uc131\ud55c\ub2e4. \uc0dd\uc131\ub41c \uac01 Region Proposal\uc744 Warping\ud55c \ud6c4, \uc774\ub97c CNN\uc744 \uc774\uc6a9\ud558\uc5ec Feature Map\uc744 \uc0dd\uc131\ud55c\ub2e4. \uc0dd\uc131\ub41c Feature Map\uc744 SVM\uc744 \uc774\uc6a9\ud558\uc5ec \ubd84\ub958\ud55c\ub2e4. \ubc14\uc6b4\ub529 \ubc15\uc2a4\uc5d0 \ub300\ud558\uc5ec Linear Regression(Bounding-box Regressor)\ub97c \ud1b5\ud574 \uc624\ube0c\uc81d\ud2b8\uc758 \uc704\uce58\uc5d0 \uadfc\uc811\ud558\ub3c4\ub85d \ub9de\ucd98\ub2e4. \ub2e4\uc74c \ud3ec\uc2a4\ud305\uc5d0\uc11c\ub294 R-CNN\uc758 \uc18d\ub3c4\ub97c \uac1c\uc120\ud55c Fast R-CNN\uc5d0 \ub300\ud558\uc5ec \uc54c\uc544\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","title":"\uc694\uc57d"},{"location":"posts/deep-learning/2019-02-10-object-detection-using-fast-rcnn/","text":"Written by Alex Choi, Feb. 10, 2019. \uc774\ubc88 \ud3ec\uc2a4\ud305\uc5d0\uc11c\ub294 Object Detection\uc758 \ucd08\uae30 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc778 R-CNN\uc758 \uc18d\ub3c4\uc640 \uc815\ud655\ub3c4\ub97c \uac1c\uc120\ud55c Fast R-CNN\uc5d0 \ub300\ud558\uc5ec \uac04\ub2e8\ud558\uac8c \uc54c\uc544\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. R-CNN\uc758 \ub2e8\uc810 \uadf8\ub7ec\uba74 \uc6b0\uc120 \uae30\uc874\uc758 R-CNN\uc774 \uac00\uc9c0\uace0 \uc788\ub294 \ub2e8\uc810\uc774 \ubb34\uc5c7\uc778\uc9c0 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. R-CNN\uc5d0\uc11c\ub294 \ud558\ub098\uc758 \uc774\ubbf8\uc9c0\uc5d0\uc11c Selective Search\ub97c \ud1b5\ud558\uc5ec \ucd5c\ub300 2,000\uac1c\uc758 Region Proposals\ub97c \uc0dd\uc131\ud558\uace0 \uac01\uac01\uc5d0 \ub300\ud558\uc5ec ConvNet(\uac00\ub839, AlexNet)\uc5d0 \ub300\ud55c Forward Pass\ub97c \uc5f0\uc0b0\ud569\ub2c8\ub2e4. \uc774\ub294 \ud559\uc2b5\uc2dc\uac04\ub3c4 \uc0c1\ub2f9\ud55c \uc2dc\uac04\uc774 \uc694\uad6c\ub418\uc9c0\ub9cc Runtime\uc5d0\uc11c\ub294 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uc218\uc900\uc774 \ub418\uc9c0 \ubabb\ud569\ub2c8\ub2e4. R-CNN\uc5d0\uc11c\ub294 \uc138 \uac1c\uc758 \ubaa8\ub378\uc744 \ubcc4\ub3c4\ub85d \ud559\uc2b5\uc2dc\ud0b5\ub2c8\ub2e4: Image Features\ub97c \ucd94\ucd9c\ud558\uae30 \uc704\ud55c CNN Model \uc774\ubbf8\uc9c0\ub97c \ubd84\ub958\ud558\uae30 \uc704\ud55c Classifier \ubc14\uc6b4\ub529 \ubc15\uc2a4\ub97c \uc2e4\uc81c \uc624\ube0c\uc81d\ud2b8 \uc704\uce58\uc5d0 \uc815\ud569\ud558\uae30 \uc704\ud55c Bounding Regressor \uadf8\ub7f0\ub370, \uc774 3\uac1c\uc758 \ubaa8\ub378\uc744 \ubcc4\ub3c4\ub85c \ud559\uc2b5\uc2dc\ud0a4\ub294 \uac83\uc740 \ud6a8\uc728\uc801\uc774\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. Fast R-CNN\uc758 \ub4f1\uc7a5 \uc704\uc5d0 \uc5b8\uae09\ub41c R-CNN\uc758 \ub2e8\uc810\uc744 \uadf9\ubcf5\ud558\uae30 \uc704\ud574 R-CNN \ub17c\ubb38\uc758 \uc800\uc790\uc778 Roos Girshick\uc740 2015\ub144\uc5d0 \uc544\ub798\uc640 \uac19\uc740 \uc0c8\ub85c\uc6b4 \ub17c\ubb38\uc744 \ubc1c\ud45c\ud569\ub2c8\ub2e4: Fast R-CNN, Ross Girshick, 2015 \uc704 \ub17c\ubb38\uc758 2\uac00\uc9c0 \ud575\uc2ec \uc544\uc774\ub514\uc5b4 \ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. Idea 1: RoI Pooling R-CNN\uc740 \uc774\ubbf8\uc9c0 \uc0c1\uc5d0\uc11c Region Proposals\ub97c \uc0dd\uc131 \uc2dc, \uc774\ub4e4\uc758 \uc601\uc5ed\uc774 \uc11c\ub85c \uacb9\uce58\ub294 \uacbd\uc6b0\uac00 \ub9ce\uc544 \ubd88\ud544\uc694\ud558\uac8c CNN\uc758 \ubc18\ubcf5\uc801\uc778 Forward \uacc4\uc0b0(\ucd5c\ub300 2,000\ubc88)\uc73c\ub85c \uacc4\uc0b0 \ud6a8\uc728\uc131\uc744 \ub5a8\uc5b4\ub728\ub9bd\ub2c8\ub2e4. Ross\uac00 \uc81c\uc548\ud55c \uc544\uc774\ub514\uc5b4\ub294 \uc774\ubbf8\uc9c0 \uc0c1\uc774 \uc544\ub2cc CNN\uc758 Feature Map \uc0c1\uc5d0\uc11c RoI(Region of Interest)\ub97c \ucd94\ucd9c\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uc989, CNN\uc758 Forward Pass\ub294 \ud558\ub098\uc758 \uc774\ubbf8\uc9c0\uc5d0 \ub300\ud558\uc5ec \ub531 \ud55c \ubc88\ub9cc \uc218\ud589\ud558\uc5ec Feature Map\uc744 \uc5bb\uace0, \ucd5c\ub300 2,000\uac1c\uc758 Region Proposals \uac04\uc5d0 Fearue Map\uc744 \uc11c\ub85c \uacf5\uc720\ud560 \uc218 \uc788\ub3c4\ub85d \ud558\ub294 \uac83\uc785\ub2c8\ub2e4. RoI Pooling, Image from Stanford\u2019s CS231N \uc2ac\ub77c\uc774\ub4dc \uc704\uc758 \uc774\ubbf8\uc9c0\ub294 \uc785\ub825 \uc774\ubbf8\uc9c0\ub85c\ubd80\ud130 CNN\uc5d0 \ub300\ud558\uc5ec Forward Pass\ud558\uc5ec Conv Feature Map\uc744 \uc5bb\uace0, Region Proposal \uc601\uc5ed\uc744 Feature Map \uc0c1\uc5d0 \ud22c\uc601(Projection)\ud55c \ud6c4, \uc774\ub97c \uc815\ud574\uc9c4 \ucc28\uc6d0(Dimension, \uac00\ub85c-\uc138\ub85c \ud574\uc0c1\ub3c4)\ub85c \uc601\uc5ed\uc744 \ubd84\ud560\ud569\ub2c8\ub2e4. \uac00\ub839, 3 \u00d7 800 \u00d7 600(\ucc44\ub110 \uc218 = 3, \ub192\uc774 = 800, \ub113\uc774 = 600)\uc758 \uc785\ub825 \uc774\ubbf8\uc9c0\ub97c CNN\uc5d0 Forward Pass\ud558\uc5ec \uc5bb\ub294 Conv Feature Map\uc758 \uc0c1\uc5d0 \ud22c\uc601\ub41c Region Proposal \uc601\uc5ed\uc758 \ucc28\uc6d0\uc774 \\(C \u00d7 h \u00d7 w\\) \ub77c\uace0 \ud558\uba74, \uc774 \uc601\uc5ed\uc744 \uac01 \ucc44\ub110\uc5d0 \ub300\ud558\uc5ec \\(H \u00d7 W\\) \uac1c\uc218\ub85c \ubd84\ud560\ud569\ub2c8\ub2e4( \\(H\\) \uc640 \\(W\\) \ub97c Layer Hyper-parameters\ub77c\uace0 \ud569\ub2c8\ub2e4). RoI Max-pooling\uc740 \\(h \u00d7 w\\) \ud06c\uae30\uc758 RoI Windows\ub97c \\(H \u00d7 W\\) \uac1c\uc218\ub9cc\ud07c\uc758 Sub-window\ub85c \ubd84\ud560\ud558\ubbc0\ub85c \uac01 Sub-window\uc758 \ud06c\uae30\ub294 \ub300\ub7b5 \\(h/H \u00d7 w/W\\) \uc774 \ub418\uba70, \uac01 Sub-window \ub0b4\uc758 \uac12\ub4e4\uc744 Max-pooling\ud558\uc5ec Grid Cell\ub85c \ucd9c\ub825\ud569\ub2c8\ub2e4. Idea 2: \ud558\ub098\uc758 \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \ubaa8\ub450 \ud2b8\ub808\uc774\ub2dd Fast R-CNN\uc758 \ub450\ubc88\uc9f8 \ud575\uc2ec \uc544\uc774\ub514\uc5b4\ub294, (1) Feature \ud559\uc2b5\uc744 \uc704\ud55c CNN, (2) \ubd84\ub958\ub97c \uc704\ud55c Classifier(SVM), (3) \ubc14\uc6b4\ub529 \ubc15\uc2a4\ub97c \uc624\ube0c\uc81d\ud2b8\uc5d0 \uc815\ud569\uc2dc\ud0a4\ub294 Regression (Linear Regressor)\uc744 \uac01\uac01 \ud2b8\ub808\uc774\ub2dd\ud558\ub294 R-CNN\uacfc\ub294 \ub2ec\ub9ac, Fast R-CNN\uc740 \uc774 \uc138\uac00\uc9c0\ub97c \ud558\ub098\uc758 \ub124\ud2b8\uc6cc\ud06c \ub0b4\uc5d0\uc11c \ud559\uc2b5\uc2dc\ud0b5\ub2c8\ub2e4. Fast R-CNN \uc544\ud0a4\ud14d\uccd0 \ubc0f \uad6c\uc870 \uc704\uc758 \uc774\ubbf8\uc9c0\ub97c \uc790\uc138\ud558\uac8c \uc0b4\ud3b4\ubcf4\uba74 \ub2e4\uc74c\uacfc \uc694\uc57d\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \uc785\ub825 \uc774\ubbf8\uc9c0\ub97c CNN\uc5d0 \ub300\ud558\uc5ec Forward Pass\ud558\uc5ec Conv Feature Map\uc744 \uc5bb\uace0, Max-pooling Layer\ub97c \uc5bb\uc2b5\ub2c8\ub2e4. \ud504\ub85c\uc81d\uc158 \ub41c \uac01\uac01\uc758 RoI\uc5d0 \ub300\ud558\uc5ec Pooling Layer\ub294 Conv Feature Map\uc73c\ub85c\ubd80\ud130 \uace0\uc815\ub41c \ud06c\uae30\uc758 Feature Vector\ub97c \ucd94\ucd9c\ud569\ub2c8\ub2e4. \uac01\uac01\uc758 Feature Vector\ub294 \uc77c\ub828\uc758 Fully Connected(FC) Layer\ub97c \uac70\uccd0\uc11c \\(K\\) \uac1c\uc758 \ud074\ub798\uc2a4 + \ubc30\uacbd \ud074\ub798\uc2a4\uc5d0 \ub300\ud55c Softmax \ud655\ub960\uc744 \uad6c\ud569\ub2c8\ub2e4. \uac01\uac01\uc758 \\(K\\) \uac1c\uc758 \uc624\ube0c\uc81d\ud2b8 \ud074\ub798\uc2a4\uc5d0 \ub300\ud55c 4\uac1c\uc758 \ubcc0\uc218 - \\((r,c,w,h)\\) - \ubc14\uc6b4\ub529 \ubc15\uc2a4\uc758 \uc67c\ucabd \uc0c1\ub2e8 \ubaa8\uc11c\ub9ac \uc88c\ud45c \\((r,c)\\) \ubc0f \ud06c\uae30 \\((w,h)\\) - \ub97c \ucd9c\ub825\ud569\ub2c8\ub2e4. \uc9c0\uae08\uae4c\uc9c0 Fast R-CNN\uc744 \uc774\uc6a9\ud55c Object Detection\uc5d0 \ub300\ud558\uc5ec \uc54c\uc544\ubcf4\uc558\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \ud3ec\uc2a4\ud305\uc5d0\uc11c\ub294 Faster R-CNN\uc744 \uc774\uc6a9\ud55c Object Detection\uc5d0 \ub300\ud558\uc5ec \uc54c\uc544\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","title":"Object Detection Using Fast R-CNN"},{"location":"posts/deep-learning/2019-02-10-object-detection-using-fast-rcnn/#r-cnn","text":"\uadf8\ub7ec\uba74 \uc6b0\uc120 \uae30\uc874\uc758 R-CNN\uc774 \uac00\uc9c0\uace0 \uc788\ub294 \ub2e8\uc810\uc774 \ubb34\uc5c7\uc778\uc9c0 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. R-CNN\uc5d0\uc11c\ub294 \ud558\ub098\uc758 \uc774\ubbf8\uc9c0\uc5d0\uc11c Selective Search\ub97c \ud1b5\ud558\uc5ec \ucd5c\ub300 2,000\uac1c\uc758 Region Proposals\ub97c \uc0dd\uc131\ud558\uace0 \uac01\uac01\uc5d0 \ub300\ud558\uc5ec ConvNet(\uac00\ub839, AlexNet)\uc5d0 \ub300\ud55c Forward Pass\ub97c \uc5f0\uc0b0\ud569\ub2c8\ub2e4. \uc774\ub294 \ud559\uc2b5\uc2dc\uac04\ub3c4 \uc0c1\ub2f9\ud55c \uc2dc\uac04\uc774 \uc694\uad6c\ub418\uc9c0\ub9cc Runtime\uc5d0\uc11c\ub294 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uc218\uc900\uc774 \ub418\uc9c0 \ubabb\ud569\ub2c8\ub2e4. R-CNN\uc5d0\uc11c\ub294 \uc138 \uac1c\uc758 \ubaa8\ub378\uc744 \ubcc4\ub3c4\ub85d \ud559\uc2b5\uc2dc\ud0b5\ub2c8\ub2e4: Image Features\ub97c \ucd94\ucd9c\ud558\uae30 \uc704\ud55c CNN Model \uc774\ubbf8\uc9c0\ub97c \ubd84\ub958\ud558\uae30 \uc704\ud55c Classifier \ubc14\uc6b4\ub529 \ubc15\uc2a4\ub97c \uc2e4\uc81c \uc624\ube0c\uc81d\ud2b8 \uc704\uce58\uc5d0 \uc815\ud569\ud558\uae30 \uc704\ud55c Bounding Regressor \uadf8\ub7f0\ub370, \uc774 3\uac1c\uc758 \ubaa8\ub378\uc744 \ubcc4\ub3c4\ub85c \ud559\uc2b5\uc2dc\ud0a4\ub294 \uac83\uc740 \ud6a8\uc728\uc801\uc774\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.","title":"R-CNN\uc758 \ub2e8\uc810"},{"location":"posts/deep-learning/2019-02-10-object-detection-using-fast-rcnn/#fast-r-cnn","text":"\uc704\uc5d0 \uc5b8\uae09\ub41c R-CNN\uc758 \ub2e8\uc810\uc744 \uadf9\ubcf5\ud558\uae30 \uc704\ud574 R-CNN \ub17c\ubb38\uc758 \uc800\uc790\uc778 Roos Girshick\uc740 2015\ub144\uc5d0 \uc544\ub798\uc640 \uac19\uc740 \uc0c8\ub85c\uc6b4 \ub17c\ubb38\uc744 \ubc1c\ud45c\ud569\ub2c8\ub2e4: Fast R-CNN, Ross Girshick, 2015 \uc704 \ub17c\ubb38\uc758 2\uac00\uc9c0 \ud575\uc2ec \uc544\uc774\ub514\uc5b4 \ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.","title":"Fast R-CNN\uc758 \ub4f1\uc7a5"},{"location":"posts/deep-learning/2019-02-10-object-detection-using-fast-rcnn/#idea-1-roi-pooling","text":"R-CNN\uc740 \uc774\ubbf8\uc9c0 \uc0c1\uc5d0\uc11c Region Proposals\ub97c \uc0dd\uc131 \uc2dc, \uc774\ub4e4\uc758 \uc601\uc5ed\uc774 \uc11c\ub85c \uacb9\uce58\ub294 \uacbd\uc6b0\uac00 \ub9ce\uc544 \ubd88\ud544\uc694\ud558\uac8c CNN\uc758 \ubc18\ubcf5\uc801\uc778 Forward \uacc4\uc0b0(\ucd5c\ub300 2,000\ubc88)\uc73c\ub85c \uacc4\uc0b0 \ud6a8\uc728\uc131\uc744 \ub5a8\uc5b4\ub728\ub9bd\ub2c8\ub2e4. Ross\uac00 \uc81c\uc548\ud55c \uc544\uc774\ub514\uc5b4\ub294 \uc774\ubbf8\uc9c0 \uc0c1\uc774 \uc544\ub2cc CNN\uc758 Feature Map \uc0c1\uc5d0\uc11c RoI(Region of Interest)\ub97c \ucd94\ucd9c\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uc989, CNN\uc758 Forward Pass\ub294 \ud558\ub098\uc758 \uc774\ubbf8\uc9c0\uc5d0 \ub300\ud558\uc5ec \ub531 \ud55c \ubc88\ub9cc \uc218\ud589\ud558\uc5ec Feature Map\uc744 \uc5bb\uace0, \ucd5c\ub300 2,000\uac1c\uc758 Region Proposals \uac04\uc5d0 Fearue Map\uc744 \uc11c\ub85c \uacf5\uc720\ud560 \uc218 \uc788\ub3c4\ub85d \ud558\ub294 \uac83\uc785\ub2c8\ub2e4. RoI Pooling, Image from Stanford\u2019s CS231N \uc2ac\ub77c\uc774\ub4dc \uc704\uc758 \uc774\ubbf8\uc9c0\ub294 \uc785\ub825 \uc774\ubbf8\uc9c0\ub85c\ubd80\ud130 CNN\uc5d0 \ub300\ud558\uc5ec Forward Pass\ud558\uc5ec Conv Feature Map\uc744 \uc5bb\uace0, Region Proposal \uc601\uc5ed\uc744 Feature Map \uc0c1\uc5d0 \ud22c\uc601(Projection)\ud55c \ud6c4, \uc774\ub97c \uc815\ud574\uc9c4 \ucc28\uc6d0(Dimension, \uac00\ub85c-\uc138\ub85c \ud574\uc0c1\ub3c4)\ub85c \uc601\uc5ed\uc744 \ubd84\ud560\ud569\ub2c8\ub2e4. \uac00\ub839, 3 \u00d7 800 \u00d7 600(\ucc44\ub110 \uc218 = 3, \ub192\uc774 = 800, \ub113\uc774 = 600)\uc758 \uc785\ub825 \uc774\ubbf8\uc9c0\ub97c CNN\uc5d0 Forward Pass\ud558\uc5ec \uc5bb\ub294 Conv Feature Map\uc758 \uc0c1\uc5d0 \ud22c\uc601\ub41c Region Proposal \uc601\uc5ed\uc758 \ucc28\uc6d0\uc774 \\(C \u00d7 h \u00d7 w\\) \ub77c\uace0 \ud558\uba74, \uc774 \uc601\uc5ed\uc744 \uac01 \ucc44\ub110\uc5d0 \ub300\ud558\uc5ec \\(H \u00d7 W\\) \uac1c\uc218\ub85c \ubd84\ud560\ud569\ub2c8\ub2e4( \\(H\\) \uc640 \\(W\\) \ub97c Layer Hyper-parameters\ub77c\uace0 \ud569\ub2c8\ub2e4). RoI Max-pooling\uc740 \\(h \u00d7 w\\) \ud06c\uae30\uc758 RoI Windows\ub97c \\(H \u00d7 W\\) \uac1c\uc218\ub9cc\ud07c\uc758 Sub-window\ub85c \ubd84\ud560\ud558\ubbc0\ub85c \uac01 Sub-window\uc758 \ud06c\uae30\ub294 \ub300\ub7b5 \\(h/H \u00d7 w/W\\) \uc774 \ub418\uba70, \uac01 Sub-window \ub0b4\uc758 \uac12\ub4e4\uc744 Max-pooling\ud558\uc5ec Grid Cell\ub85c \ucd9c\ub825\ud569\ub2c8\ub2e4.","title":"Idea 1: RoI Pooling"},{"location":"posts/deep-learning/2019-02-10-object-detection-using-fast-rcnn/#idea-2","text":"Fast R-CNN\uc758 \ub450\ubc88\uc9f8 \ud575\uc2ec \uc544\uc774\ub514\uc5b4\ub294, (1) Feature \ud559\uc2b5\uc744 \uc704\ud55c CNN, (2) \ubd84\ub958\ub97c \uc704\ud55c Classifier(SVM), (3) \ubc14\uc6b4\ub529 \ubc15\uc2a4\ub97c \uc624\ube0c\uc81d\ud2b8\uc5d0 \uc815\ud569\uc2dc\ud0a4\ub294 Regression (Linear Regressor)\uc744 \uac01\uac01 \ud2b8\ub808\uc774\ub2dd\ud558\ub294 R-CNN\uacfc\ub294 \ub2ec\ub9ac, Fast R-CNN\uc740 \uc774 \uc138\uac00\uc9c0\ub97c \ud558\ub098\uc758 \ub124\ud2b8\uc6cc\ud06c \ub0b4\uc5d0\uc11c \ud559\uc2b5\uc2dc\ud0b5\ub2c8\ub2e4. Fast R-CNN \uc544\ud0a4\ud14d\uccd0 \ubc0f \uad6c\uc870 \uc704\uc758 \uc774\ubbf8\uc9c0\ub97c \uc790\uc138\ud558\uac8c \uc0b4\ud3b4\ubcf4\uba74 \ub2e4\uc74c\uacfc \uc694\uc57d\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \uc785\ub825 \uc774\ubbf8\uc9c0\ub97c CNN\uc5d0 \ub300\ud558\uc5ec Forward Pass\ud558\uc5ec Conv Feature Map\uc744 \uc5bb\uace0, Max-pooling Layer\ub97c \uc5bb\uc2b5\ub2c8\ub2e4. \ud504\ub85c\uc81d\uc158 \ub41c \uac01\uac01\uc758 RoI\uc5d0 \ub300\ud558\uc5ec Pooling Layer\ub294 Conv Feature Map\uc73c\ub85c\ubd80\ud130 \uace0\uc815\ub41c \ud06c\uae30\uc758 Feature Vector\ub97c \ucd94\ucd9c\ud569\ub2c8\ub2e4. \uac01\uac01\uc758 Feature Vector\ub294 \uc77c\ub828\uc758 Fully Connected(FC) Layer\ub97c \uac70\uccd0\uc11c \\(K\\) \uac1c\uc758 \ud074\ub798\uc2a4 + \ubc30\uacbd \ud074\ub798\uc2a4\uc5d0 \ub300\ud55c Softmax \ud655\ub960\uc744 \uad6c\ud569\ub2c8\ub2e4. \uac01\uac01\uc758 \\(K\\) \uac1c\uc758 \uc624\ube0c\uc81d\ud2b8 \ud074\ub798\uc2a4\uc5d0 \ub300\ud55c 4\uac1c\uc758 \ubcc0\uc218 - \\((r,c,w,h)\\) - \ubc14\uc6b4\ub529 \ubc15\uc2a4\uc758 \uc67c\ucabd \uc0c1\ub2e8 \ubaa8\uc11c\ub9ac \uc88c\ud45c \\((r,c)\\) \ubc0f \ud06c\uae30 \\((w,h)\\) - \ub97c \ucd9c\ub825\ud569\ub2c8\ub2e4. \uc9c0\uae08\uae4c\uc9c0 Fast R-CNN\uc744 \uc774\uc6a9\ud55c Object Detection\uc5d0 \ub300\ud558\uc5ec \uc54c\uc544\ubcf4\uc558\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \ud3ec\uc2a4\ud305\uc5d0\uc11c\ub294 Faster R-CNN\uc744 \uc774\uc6a9\ud55c Object Detection\uc5d0 \ub300\ud558\uc5ec \uc54c\uc544\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","title":"Idea 2: \ud558\ub098\uc758 \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \ubaa8\ub450 \ud2b8\ub808\uc774\ub2dd"},{"location":"posts/deep-learning/2020-10-08-setting-up-pytorch-centernet-dev-env/","text":"Written by Alex Choi, Oct. 8, 2020. Basic Environment Anaconda Git Creating CONDA Environment Run a command line tool, i.e. Anaconda Prompt and type the following command: conda create -n centernet python=3.7 NOTE: Python 3.8 not tested yet. But you can try if you want. Activate centernet Anaconda environment: conda activate centernet Installing Python Packages Install pytorch(ver.1.4) and torchvision based on your cudatoolkit version. conda install pytorch=1.4 torchvision cudatoolkit=10.1 -c pytorch NOTE: CenterNet build didn't work with pytorch version 1.5 or 1.6. NOTE: cudatoolkit version 10.2 not tested yet. Install necessary python packages: python -m pip install opencv-python Cython numba progress matplotlib easydict scipy Building cocoapi Tools Clone cocoapi tools git repository to any path where you want git clone https://github.com/cocodataset/cocoapi.git Open cocoapi/PythonAPI/setup.py using a text editor and modify the following line: extra_compile_args=['-Wno-cpp', '-Wno-unused-function', '-std=c99'] to extra_compile_args={'gcc': ['/Qstd=c99']}, In the command line tool move to the following path: cd cocoapi/PythonAPI Build cocoapi tools: python setup.py build_ext install Modifying cpp_extension.py Using a text editor open up C:/ProgramData/Anaconda3/envs/centernet/Lib/site-packages/torch/utils/cpp_extension.py and modify the following line: match = re.search(r'(\\d+)\\.(\\d+)\\.(\\d+)', compiler_info.decode().strip()) to match = re.search(r'(\\d+)\\.(\\d+)\\.(\\d+)', compiler_info.decode(\"utf8\", \"ignore\").strip()) Copying and Unzipping CenterNet.zip Copy \"CenterNet.zip\" file to any path you want (maybe COI project folder). Unzip the file using BandiZip or any unzipping software you want. NOTE: You can find more information from the PyTorch CenterNet official repo . Building NMS 'nms' is short for \"Non-Maximum Suppression.\" CenterNet does not usually use Non-Maximum Suppression, but it is sometimes useful. In order to avoid build error comment out the following line after opening CenterNet/src/lib/external/setup.py up using a text editor. #extra_compile_args=[\"-Wno-cpp\", \"-Wno-unused-function\"] NOTE: The line above may be already commented out actually. Build nms with the following command line: python setup.py build_ext --inplace NOTE: You can find more information about building nms here . Building DCNv2 Move to the following path in your CenterNet path: cd CenterNet/src/lib/models/networks/DCNv2/ Build DCNv2 using the following command line (this may take some time to finish building): python setup.py build develop NOTE: You can find more information about DCNv2 here . Test with Pre-trained Models Unzip \"ImageNet-Weights.zip\" and copy all the contained files (ImageNet pre-trained models) to C:\\Users\\{WINDOWS_USER_ACCOUNT_NAME}\\.cache\\torch\\checkpoints\\ . Unzip \"Centernet-Models.zip\" and copy all the contained files to CenterNet/models/ . Finally, test with some COI images using the following command line: python demo.py ctdet --demo ../data/COI/images/image_0001.jpg --load_model ../exp/ctdet/COI/model_best.pth python demo.py ctdet --demo ../data/COI/images/image_0002.jpg --load_model ../exp/ctdet/COI/model_best.pth python demo.py ctdet --demo ../data/COI/images/image_0003.jpg --load_model ../exp/ctdet/COI/model_best.pth Simple Trial for Training If you are using CenterNet.zip you can find the training information for COI from CenterNet/exp/ctdet/COI/ . There are 2 options for training: One is training from scratch (random initialization). python main.py ctdet --exp_id COI --batch_size 16 --lr 1.25e-4 --gpus 0 --load_model ../models/ctdet_coco_resdcn18.pth --resume False The other is resume training from pre-trained model. python main.py ctdet --exp_id COI --batch_size 16 --lr 1.25e-4 --gpus 0 --load_model ../models/ctdet_coco_resdcn18.pth --resume True Checking Training Information You can check your training information such as loss history, accuracy history and so on using TensorBoard . You can find your training information for COI from the path, CenterNet/exp/ctdet/COI/ Install tensorboard using the following command line: python -m pip install tensorboard","title":"How to Set Up PyTorch CenterNet Development Environment"},{"location":"posts/deep-learning/2020-10-08-setting-up-pytorch-centernet-dev-env/#basic-environment","text":"Anaconda Git","title":"Basic Environment"},{"location":"posts/deep-learning/2020-10-08-setting-up-pytorch-centernet-dev-env/#creating-conda-environment","text":"Run a command line tool, i.e. Anaconda Prompt and type the following command: conda create -n centernet python=3.7 NOTE: Python 3.8 not tested yet. But you can try if you want. Activate centernet Anaconda environment: conda activate centernet","title":"Creating CONDA Environment"},{"location":"posts/deep-learning/2020-10-08-setting-up-pytorch-centernet-dev-env/#installing-python-packages","text":"Install pytorch(ver.1.4) and torchvision based on your cudatoolkit version. conda install pytorch=1.4 torchvision cudatoolkit=10.1 -c pytorch NOTE: CenterNet build didn't work with pytorch version 1.5 or 1.6. NOTE: cudatoolkit version 10.2 not tested yet. Install necessary python packages: python -m pip install opencv-python Cython numba progress matplotlib easydict scipy","title":"Installing Python Packages"},{"location":"posts/deep-learning/2020-10-08-setting-up-pytorch-centernet-dev-env/#building-cocoapi-tools","text":"Clone cocoapi tools git repository to any path where you want git clone https://github.com/cocodataset/cocoapi.git Open cocoapi/PythonAPI/setup.py using a text editor and modify the following line: extra_compile_args=['-Wno-cpp', '-Wno-unused-function', '-std=c99'] to extra_compile_args={'gcc': ['/Qstd=c99']}, In the command line tool move to the following path: cd cocoapi/PythonAPI Build cocoapi tools: python setup.py build_ext install","title":"Building cocoapi Tools"},{"location":"posts/deep-learning/2020-10-08-setting-up-pytorch-centernet-dev-env/#modifying-cpp_extensionpy","text":"Using a text editor open up C:/ProgramData/Anaconda3/envs/centernet/Lib/site-packages/torch/utils/cpp_extension.py and modify the following line: match = re.search(r'(\\d+)\\.(\\d+)\\.(\\d+)', compiler_info.decode().strip()) to match = re.search(r'(\\d+)\\.(\\d+)\\.(\\d+)', compiler_info.decode(\"utf8\", \"ignore\").strip())","title":"Modifying cpp_extension.py"},{"location":"posts/deep-learning/2020-10-08-setting-up-pytorch-centernet-dev-env/#copying-and-unzipping-centernetzip","text":"Copy \"CenterNet.zip\" file to any path you want (maybe COI project folder). Unzip the file using BandiZip or any unzipping software you want. NOTE: You can find more information from the PyTorch CenterNet official repo .","title":"Copying and Unzipping CenterNet.zip"},{"location":"posts/deep-learning/2020-10-08-setting-up-pytorch-centernet-dev-env/#building-nms","text":"'nms' is short for \"Non-Maximum Suppression.\" CenterNet does not usually use Non-Maximum Suppression, but it is sometimes useful. In order to avoid build error comment out the following line after opening CenterNet/src/lib/external/setup.py up using a text editor. #extra_compile_args=[\"-Wno-cpp\", \"-Wno-unused-function\"] NOTE: The line above may be already commented out actually. Build nms with the following command line: python setup.py build_ext --inplace NOTE: You can find more information about building nms here .","title":"Building NMS"},{"location":"posts/deep-learning/2020-10-08-setting-up-pytorch-centernet-dev-env/#building-dcnv2","text":"Move to the following path in your CenterNet path: cd CenterNet/src/lib/models/networks/DCNv2/ Build DCNv2 using the following command line (this may take some time to finish building): python setup.py build develop NOTE: You can find more information about DCNv2 here .","title":"Building DCNv2"},{"location":"posts/deep-learning/2020-10-08-setting-up-pytorch-centernet-dev-env/#test-with-pre-trained-models","text":"Unzip \"ImageNet-Weights.zip\" and copy all the contained files (ImageNet pre-trained models) to C:\\Users\\{WINDOWS_USER_ACCOUNT_NAME}\\.cache\\torch\\checkpoints\\ . Unzip \"Centernet-Models.zip\" and copy all the contained files to CenterNet/models/ . Finally, test with some COI images using the following command line: python demo.py ctdet --demo ../data/COI/images/image_0001.jpg --load_model ../exp/ctdet/COI/model_best.pth python demo.py ctdet --demo ../data/COI/images/image_0002.jpg --load_model ../exp/ctdet/COI/model_best.pth python demo.py ctdet --demo ../data/COI/images/image_0003.jpg --load_model ../exp/ctdet/COI/model_best.pth","title":"Test with Pre-trained Models"},{"location":"posts/deep-learning/2020-10-08-setting-up-pytorch-centernet-dev-env/#simple-trial-for-training","text":"If you are using CenterNet.zip you can find the training information for COI from CenterNet/exp/ctdet/COI/ . There are 2 options for training: One is training from scratch (random initialization). python main.py ctdet --exp_id COI --batch_size 16 --lr 1.25e-4 --gpus 0 --load_model ../models/ctdet_coco_resdcn18.pth --resume False The other is resume training from pre-trained model. python main.py ctdet --exp_id COI --batch_size 16 --lr 1.25e-4 --gpus 0 --load_model ../models/ctdet_coco_resdcn18.pth --resume True","title":"Simple Trial for Training"},{"location":"posts/deep-learning/2020-10-08-setting-up-pytorch-centernet-dev-env/#checking-training-information","text":"You can check your training information such as loss history, accuracy history and so on using TensorBoard . You can find your training information for COI from the path, CenterNet/exp/ctdet/COI/ Install tensorboard using the following command line: python -m pip install tensorboard","title":"Checking Training Information"},{"location":"posts/mongodb/01-starting-mongodb/","text":"\uc774\ubc88 \ud3ec\uc2a4\ud305\uc5d0\uc11c\ub294 MongoDB\uc758 \ud658\uacbd\uad6c\ucd95\uacfc \uac04\ub2e8\ud55c \uc2dc\uc791 \ubc29\ubc95\uc5d0 \ub300\ud558\uc5ec \uc54c\uc544\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \ubcf8 \ub0b4\uc6a9\uc740, Windows \ud658\uacbd\uc744 \uac00\uc815\ud558\uace0 \uc124\uba85\ub4dc\ub9ac\uace0\uc790 \ud558\ubbc0\ub85c, \ub2e4\ub978 Mac \ub610\ub294 Linux \ud658\uacbd\uc5d0 \ub300\ud574\uc11c\ub294 \uac01\uac01\uc5d0 \ub300\ud55c \ud658\uacbd\uc124\uc815 \ubb38\uc11c\ub97c \ud655\uc778\ud574 \ubcf4\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4. MongoDB \uc124\uce58 MongoDB Community Server \ub97c \uc124\uce58 \ud398\uc774\uc9c0\uc5d0 \ubc29\ubb38\ud558\uc5ec \uc790\uc2e0\uc758 MongoDB \ubc84\uc804, OS \ud658\uacbd, Package \ud615\ud0dc\ub97c \uc120\ud0dd\ud558\uc5ec \ub2e4\uc6b4\ub85c\ub4dc \ud569\ub2c8\ub2e4. MongoDB \uc124\uce58\ud30c\uc77c \ub2e4\uc6b4\ub85c\ub4dc \uc635\uc158 MongoDB \ud658\uacbd\uc124\uc815 \uc124\uce58\uac00 \uc644\ub8cc\ub418\uba74 (\uc124\uce58 \uc635\uc158\uc758 \uae30\ubcf8 \uacbd\ub85c\uc5d0 \uc124\uce58\ub418\uc5c8\ub2e4\uace0 \uac00\uc815\ud569\ub2c8\ub2e4), \uc2dc\uc2a4\ud15c \ud658\uacbd \ubcc0\uc218 \uc124\uc815\uc5d0 \uc544\ub798 \uacbd\ub85c\ub97c \ucd94\uac00\ud569\ub2c8\ub2e4. C:\\Program Files\\MongoDB\\Server\\{Installation_Version}\\bin MongoDB \ud658\uacbd\ubcc0\uc218 \ucd94\uac00 MongoDB \uc2e4\ud589 \ud14c\uc2a4\ud2b8 \uc774\uc81c MongoDB\uc758 \ub0b4\uc6a9\ubb3c\uc774 \uc800\uc7a5\ub420 \ud3f4\ub354\ub97c \ud558\ub098 \ub9cc\ub4e4\uace0, Windows Command Line Tool\uc744 \uc2e4\ud589\ud558\uc5ec \ub2e4\uc74c\uacfc \uac19\uc774 \uba85\ub839\uc904\uc744 \uc785\ub825\ud558\uc5ec MongoDB\uac00 \uc2e4\ud589\ub418\ub294\uc9c0 \ud14c\uc2a4\ud2b8 \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. mongod --dpbpath {MongoDB_\ub0b4\uc6a9\ubb3c_\uc800\uc7a5\uacbd\ub85c} MongoDB \uc2e4\ud589 \ud14c\uc2a4\ud2b8 Windows Command Line Tool\uc744 \ud558\ub098 \ub354 \uc5f4\uac70\ub098 \ud0ed\uc744 \uc9c0\uc6d0\ud558\ub294 \uacbd\uc6b0 \ud0ed\uc744 \ud558\ub098 \ub354 \uc5f4\uc5b4\uc11c \uc544\ub798\uc640 \uac19\uc774 MongoDB\uc758 Query\ub97c \uc785\ub825\ud560 \uc218 \uc788\ub294 \uba85\ub839\uc904\uc744 \uc785\ub825\ud574 \ubd05\ub2c8\ub2e4. mongo MongoDB \uc2e4\ud589 \ud14c\uc2a4\ud2b8 MongoDB Compass \ub2e4\uc6b4\ub85c\ub4dc MongoDB Compass \ub294 MongoDB\uc758 GUI \ub3c4\uad6c\uc785\ub2c8\ub2e4. MongoDB\ub97c \uc0ac\uc6a9\ud568\uc5d0 \uc788\uc5b4 \ubc18\ub4dc\uc2dc \uc788\uc5b4\uc57c \ud558\ub294 \uac83\uc740 \uc544\ub2c8\uc9c0\ub9cc \ub370\uc774\ud130\ub97c \ud655\uc778\ud558\uace0 \uac00\uacf5\ud558\ub294 \ub4f1\uc758 \uc791\uc5c5\uc5d0 \ub300\ud55c GUI \ub3c4\uad6c\ub97c \uc81c\uacf5\ud558\uae30 \ub54c\ubb38\uc5d0 MongoDB\ub97c \ud1b5\ud55c DB \uc6b4\uc601 \uc2dc \ub9e4\uc6b0 \ud3b8\ub9ac\ud55c \ub3c4\uad6c\uc774\ubbc0\ub85c \uac15\ub825\ud558\uac8c \uc124\uce58\ub97c \uad8c\uc7a5 \ub4dc\ub9bd\ub2c8\ub2e4. MongoDB Compass","title":"01. MongoDB \uc2dc\uc791\ud558\uae30"},{"location":"posts/mongodb/01-starting-mongodb/#mongodb","text":"MongoDB Community Server \ub97c \uc124\uce58 \ud398\uc774\uc9c0\uc5d0 \ubc29\ubb38\ud558\uc5ec \uc790\uc2e0\uc758 MongoDB \ubc84\uc804, OS \ud658\uacbd, Package \ud615\ud0dc\ub97c \uc120\ud0dd\ud558\uc5ec \ub2e4\uc6b4\ub85c\ub4dc \ud569\ub2c8\ub2e4. MongoDB \uc124\uce58\ud30c\uc77c \ub2e4\uc6b4\ub85c\ub4dc \uc635\uc158","title":"MongoDB \uc124\uce58"},{"location":"posts/mongodb/01-starting-mongodb/#mongodb_1","text":"\uc124\uce58\uac00 \uc644\ub8cc\ub418\uba74 (\uc124\uce58 \uc635\uc158\uc758 \uae30\ubcf8 \uacbd\ub85c\uc5d0 \uc124\uce58\ub418\uc5c8\ub2e4\uace0 \uac00\uc815\ud569\ub2c8\ub2e4), \uc2dc\uc2a4\ud15c \ud658\uacbd \ubcc0\uc218 \uc124\uc815\uc5d0 \uc544\ub798 \uacbd\ub85c\ub97c \ucd94\uac00\ud569\ub2c8\ub2e4. C:\\Program Files\\MongoDB\\Server\\{Installation_Version}\\bin MongoDB \ud658\uacbd\ubcc0\uc218 \ucd94\uac00","title":"MongoDB \ud658\uacbd\uc124\uc815"},{"location":"posts/mongodb/01-starting-mongodb/#mongodb_2","text":"\uc774\uc81c MongoDB\uc758 \ub0b4\uc6a9\ubb3c\uc774 \uc800\uc7a5\ub420 \ud3f4\ub354\ub97c \ud558\ub098 \ub9cc\ub4e4\uace0, Windows Command Line Tool\uc744 \uc2e4\ud589\ud558\uc5ec \ub2e4\uc74c\uacfc \uac19\uc774 \uba85\ub839\uc904\uc744 \uc785\ub825\ud558\uc5ec MongoDB\uac00 \uc2e4\ud589\ub418\ub294\uc9c0 \ud14c\uc2a4\ud2b8 \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. mongod --dpbpath {MongoDB_\ub0b4\uc6a9\ubb3c_\uc800\uc7a5\uacbd\ub85c} MongoDB \uc2e4\ud589 \ud14c\uc2a4\ud2b8 Windows Command Line Tool\uc744 \ud558\ub098 \ub354 \uc5f4\uac70\ub098 \ud0ed\uc744 \uc9c0\uc6d0\ud558\ub294 \uacbd\uc6b0 \ud0ed\uc744 \ud558\ub098 \ub354 \uc5f4\uc5b4\uc11c \uc544\ub798\uc640 \uac19\uc774 MongoDB\uc758 Query\ub97c \uc785\ub825\ud560 \uc218 \uc788\ub294 \uba85\ub839\uc904\uc744 \uc785\ub825\ud574 \ubd05\ub2c8\ub2e4. mongo MongoDB \uc2e4\ud589 \ud14c\uc2a4\ud2b8","title":"MongoDB \uc2e4\ud589 \ud14c\uc2a4\ud2b8"},{"location":"posts/mongodb/01-starting-mongodb/#mongodb-compass","text":"MongoDB Compass \ub294 MongoDB\uc758 GUI \ub3c4\uad6c\uc785\ub2c8\ub2e4. MongoDB\ub97c \uc0ac\uc6a9\ud568\uc5d0 \uc788\uc5b4 \ubc18\ub4dc\uc2dc \uc788\uc5b4\uc57c \ud558\ub294 \uac83\uc740 \uc544\ub2c8\uc9c0\ub9cc \ub370\uc774\ud130\ub97c \ud655\uc778\ud558\uace0 \uac00\uacf5\ud558\ub294 \ub4f1\uc758 \uc791\uc5c5\uc5d0 \ub300\ud55c GUI \ub3c4\uad6c\ub97c \uc81c\uacf5\ud558\uae30 \ub54c\ubb38\uc5d0 MongoDB\ub97c \ud1b5\ud55c DB \uc6b4\uc601 \uc2dc \ub9e4\uc6b0 \ud3b8\ub9ac\ud55c \ub3c4\uad6c\uc774\ubbc0\ub85c \uac15\ub825\ud558\uac8c \uc124\uce58\ub97c \uad8c\uc7a5 \ub4dc\ub9bd\ub2c8\ub2e4. MongoDB Compass","title":"MongoDB Compass \ub2e4\uc6b4\ub85c\ub4dc"},{"location":"posts/mongodb/02-mongodb-basic-queries/","text":"\uc774\ubc88 \ud3ec\uc2a4\ud305\uc5d0\uc11c\ub294 MongoDB\uc758 \uae30\ubcf8 Query \uba85\ub839\uc5b4\uc5d0 \ub300\ud574 \uc54c\uc544\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc6b0\uc120 \uc2dc\uc791\uc5d0 \uc55e\uc11c 01. MongoDB \uc2dc\uc791\ud558\uae30 \ub97c \ucc38\uace0\ud558\uc5ec DB\ub97c \uc2dc\uc791\ud558\uc2dc\uace0, Query \uba85\ub839\ubb38\uc744 \uc785\ub825\ud560 \uc218 \uc788\ub3c4\ub85d \uc900\ube44\ud558\uc2dc\uae30 \ubc1c\ubc14\ub2c8\ub2e4. DB \uc0dd\uc131 Mongo \ud604\uc7ac DB\uc758 \ub9ac\uc2a4\ud2b8\ub97c \ud655\uc778\ud558\ub294 \uba85\ub839\uc904\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: show dbs \uae30\ubcf8\uc801\uc740\ub85c, \uc138\uac00\uc9c0 DB\uac00 \ubbf8\ub9ac \ub4f1\ub85d\ub418\uc5b4 \uc788\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: admin config local \uc77c\ub2e8 \uc774\ub4e4\uc774 \uc5b4\ub5a4 \uc5ed\ud560\uc744 \ud558\ub294\uc9c0\ub294 \ucd94\ud6c4 \ud3ec\uc2a4\ud305\uc5d0\uc11c \uc0b4\ud3b4\ubcf4\ub3c4\ub85d \ud558\uba70, \uc9c0\uae08\uc740 DB\ub97c \ud558\ub098 \uc0dd\uc131\ud558\uaca0\uc2b5\ub2c8\ub2e4: use test Create \ub2e4\uc74c\uacfc \uac19\uc774 \"title\", \"content\", \"date\" \ud0a4\ub97c \uac16\ub294 \"post\" \ubcc0\uc218 \uc0dd\uc131\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. post = {\"title\" : \"My first blog post\", \"content\" : \"Getting started with MongDB\", \"date\" : new Date()} \uc704\uc758 \uba85\ub839\uc5d0\uc11c \uc54c \uc218 \uc788\ub4ef\uc774, MongoDB\uc758 \uc785\ucd9c\ub825 \ub3c4\ud050\uba3c\ud2b8 \ub2e8\uc704\ub294 JSON \ud615\ud0dc\ub97c \uac16\uc2b5\ub2c8\ub2e4. insert \uba85\ub839\uc744 \ud1b5\ud574 \ub4f1\ub85d\ub41c post \ubcc0\uc218\ub97c blog \ub77c\ub294 \ucf5c\ub809\uc158\uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4: > db.blog.insert(post) WriteResult({ \"nInserted\" : 1 }) \uc774\uc81c test db\uac00 \uac00\uc9c0\uace0 \uc788\ub294 \ucf5c\ub809\uc158 \ub9ac\uc2a4\ud2b8\ub97c \ud655\uc778\ud574 \ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4: > db.getCollectionNames() [ \"blog\" ] \uc785\ub825\uc774 \uc131\uacf5\ub418\uba74 WriteResult({ \"nInserted\" : 1 }) \ub77c\ub294 \ud615\ud0dc\uc758 \uba54\uc2dc\uc9c0\uac00 \ucd9c\ub825\ub420 \uac83\uc785\ub2c8\ub2e4. find \uba85\ub839\uc744 \uc785\ub825\ud558\uc5ec blog \ucf5c\ub809\uc158\uc5d0 \uc800\uc7a5\ub41c \uac12 \ud655\uc778\ud574 \ubd05\ub2c8\ub2e4: > db.blog.find() { \"_id\" : ObjectId(\"5fa5fef52bc718484524b2d2\"), \"title\" : \"My first blog post\", \"content\" : \"Getting started with MongDB\", \"date\" : ISODate(\"2020-11-07T01:53:32.663Z\") } \ud55c\uac00\uc9c0 \ud301\uc73c\ub85c .pretty() \ub97c \ucd94\uac00\ub85c \ubd99\uc774\uba74, \uc880 \ub354 \uae54\ub054\ud55c \ud615\ud0dc\ub85c \uacb0\uacfc\ub97c \ucd9c\ub825\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. > db.blog.find().pretty() \"_id\" : ObjectId(\"5fa5fef52bc718484524b2d2\"), \"title\" : \"My first blog post\", \"content\" : \"Getting started with MongDB\", \"date\" : ISODate(\"2020-11-07T01:53:32.663Z\") } .pretty()\ub97c \uc774\uc6a9\ud55c \uae54\ub054\ud55c \ucd9c\ub825 \uacb0\uacfc Update post \uceec\ub809\uc158\uc5d0 comments \ud0a4 \uc0dd\uc131\uc744 \ud569\ub2c8\ub2e4: > post.comments = [] [ ] > post { \"title\" : \"My first blog post\", \"content\" : \"Getting Started with MongoDB\", \"date\" : ISODate(\"2014-01-17T10:04:08.641Z\"), \"comments\" : [ ] } My first blog post \ub77c\ub294 \ud0c0\uc774\ud2c0\uc744 \uac00\uc9c4 post \ub85c \ub3c4\ud050\uba3c\ud2b8 \uc5c5\ub370\uc774\ud2b8\ub97c \uc5c5\ub370\uc774\ud2b8 \ud569\ub2c8\ub2e4: > db.blog.update({\"title\" : \"My first blog post\"}, post) > db.blog.findOne().pretty() { \"_id\" : ObjectId(\"52d900298d2a9dc822dd0eea\"), \"title\" : \"My first blog post\", \"content\" : \"Getting Started with MongoDB\", \"date\" : ISODate(\"2014-01-17T10:04:08.641Z\"), \"comments\" : [ ] } Delete My first blog post \uc774\ub77c\ub294 title \uc758 \uceec\ub809\uc158\uc744 \uc0ad\uc81c\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: > db.blog.remove({title : \"My first blog post\"}) > db.blog.findOne() null","title":"02. MongoDB \uae30\ubcf8 Query \uba85\ub839\ubb38 \ud14c\uc2a4\ud2b8"},{"location":"posts/mongodb/02-mongodb-basic-queries/#db","text":"Mongo \ud604\uc7ac DB\uc758 \ub9ac\uc2a4\ud2b8\ub97c \ud655\uc778\ud558\ub294 \uba85\ub839\uc904\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: show dbs \uae30\ubcf8\uc801\uc740\ub85c, \uc138\uac00\uc9c0 DB\uac00 \ubbf8\ub9ac \ub4f1\ub85d\ub418\uc5b4 \uc788\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: admin config local \uc77c\ub2e8 \uc774\ub4e4\uc774 \uc5b4\ub5a4 \uc5ed\ud560\uc744 \ud558\ub294\uc9c0\ub294 \ucd94\ud6c4 \ud3ec\uc2a4\ud305\uc5d0\uc11c \uc0b4\ud3b4\ubcf4\ub3c4\ub85d \ud558\uba70, \uc9c0\uae08\uc740 DB\ub97c \ud558\ub098 \uc0dd\uc131\ud558\uaca0\uc2b5\ub2c8\ub2e4: use test","title":"DB \uc0dd\uc131"},{"location":"posts/mongodb/02-mongodb-basic-queries/#create","text":"\ub2e4\uc74c\uacfc \uac19\uc774 \"title\", \"content\", \"date\" \ud0a4\ub97c \uac16\ub294 \"post\" \ubcc0\uc218 \uc0dd\uc131\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. post = {\"title\" : \"My first blog post\", \"content\" : \"Getting started with MongDB\", \"date\" : new Date()} \uc704\uc758 \uba85\ub839\uc5d0\uc11c \uc54c \uc218 \uc788\ub4ef\uc774, MongoDB\uc758 \uc785\ucd9c\ub825 \ub3c4\ud050\uba3c\ud2b8 \ub2e8\uc704\ub294 JSON \ud615\ud0dc\ub97c \uac16\uc2b5\ub2c8\ub2e4. insert \uba85\ub839\uc744 \ud1b5\ud574 \ub4f1\ub85d\ub41c post \ubcc0\uc218\ub97c blog \ub77c\ub294 \ucf5c\ub809\uc158\uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4: > db.blog.insert(post) WriteResult({ \"nInserted\" : 1 }) \uc774\uc81c test db\uac00 \uac00\uc9c0\uace0 \uc788\ub294 \ucf5c\ub809\uc158 \ub9ac\uc2a4\ud2b8\ub97c \ud655\uc778\ud574 \ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4: > db.getCollectionNames() [ \"blog\" ] \uc785\ub825\uc774 \uc131\uacf5\ub418\uba74 WriteResult({ \"nInserted\" : 1 }) \ub77c\ub294 \ud615\ud0dc\uc758 \uba54\uc2dc\uc9c0\uac00 \ucd9c\ub825\ub420 \uac83\uc785\ub2c8\ub2e4. find \uba85\ub839\uc744 \uc785\ub825\ud558\uc5ec blog \ucf5c\ub809\uc158\uc5d0 \uc800\uc7a5\ub41c \uac12 \ud655\uc778\ud574 \ubd05\ub2c8\ub2e4: > db.blog.find() { \"_id\" : ObjectId(\"5fa5fef52bc718484524b2d2\"), \"title\" : \"My first blog post\", \"content\" : \"Getting started with MongDB\", \"date\" : ISODate(\"2020-11-07T01:53:32.663Z\") } \ud55c\uac00\uc9c0 \ud301\uc73c\ub85c .pretty() \ub97c \ucd94\uac00\ub85c \ubd99\uc774\uba74, \uc880 \ub354 \uae54\ub054\ud55c \ud615\ud0dc\ub85c \uacb0\uacfc\ub97c \ucd9c\ub825\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. > db.blog.find().pretty() \"_id\" : ObjectId(\"5fa5fef52bc718484524b2d2\"), \"title\" : \"My first blog post\", \"content\" : \"Getting started with MongDB\", \"date\" : ISODate(\"2020-11-07T01:53:32.663Z\") } .pretty()\ub97c \uc774\uc6a9\ud55c \uae54\ub054\ud55c \ucd9c\ub825 \uacb0\uacfc","title":"Create"},{"location":"posts/mongodb/02-mongodb-basic-queries/#update","text":"post \uceec\ub809\uc158\uc5d0 comments \ud0a4 \uc0dd\uc131\uc744 \ud569\ub2c8\ub2e4: > post.comments = [] [ ] > post { \"title\" : \"My first blog post\", \"content\" : \"Getting Started with MongoDB\", \"date\" : ISODate(\"2014-01-17T10:04:08.641Z\"), \"comments\" : [ ] } My first blog post \ub77c\ub294 \ud0c0\uc774\ud2c0\uc744 \uac00\uc9c4 post \ub85c \ub3c4\ud050\uba3c\ud2b8 \uc5c5\ub370\uc774\ud2b8\ub97c \uc5c5\ub370\uc774\ud2b8 \ud569\ub2c8\ub2e4: > db.blog.update({\"title\" : \"My first blog post\"}, post) > db.blog.findOne().pretty() { \"_id\" : ObjectId(\"52d900298d2a9dc822dd0eea\"), \"title\" : \"My first blog post\", \"content\" : \"Getting Started with MongoDB\", \"date\" : ISODate(\"2014-01-17T10:04:08.641Z\"), \"comments\" : [ ] }","title":"Update"},{"location":"posts/mongodb/02-mongodb-basic-queries/#delete","text":"My first blog post \uc774\ub77c\ub294 title \uc758 \uceec\ub809\uc158\uc744 \uc0ad\uc81c\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: > db.blog.remove({title : \"My first blog post\"}) > db.blog.findOne() null","title":"Delete"},{"location":"posts/mongodb/03-mongodb-lifecycle/","text":"\uc774\ubc88 \ud3ec\uc2a4\ud305\uc5d0\uc11c\ub294 \ub2e4\uc74c \ucf54\ub4dc \uc608\uc2dc\ub97c \ud1b5\ud574 MongoDB\uc758 \ub77c\uc774\ud504\uc0ac\uc774\ud074\uc5d0 \ub300\ud558\uc5ec \uc54c\uc544\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. // user DB \"foobar\" use foobar // define user1 var user1 = {\"username\" : \"gchoi\"} user1.relationships = {\"friends\" : 100, \"enemies\" : 1} // define user2 var user2 = {\"username\" : \"tjkwak\"} user2.relationships = {\"friends\" : 50, \"enemies\" : 5} // define user3 var user3 = {\"username\" : \"jmpark\"} user3.relationships = {\"friends\" : 10, \"enemies\" : 3} // define user4 var user4 = {\"username\" : \"jhlee\"} user4.relationships = {\"friends\" : 1, \"enemies\" : 300} // insert users into \"users\" collection of DB \"foobar\" db.users.insert(user1) db.users.insert(user2) db.users.insert(user3) db.users.insert(user4) // show users collection db.users.find() // show db stats db.stats() // change username of user4 user4.username = \"hskim\" // change the numbner of friednds user4.relationships.friends = 5 // change the number of enemies user4.relationships.enemies = 500 db.users.update({\"username\" : \"jhlee\"}, user4) // show users collection db.users.find() // drop the collection \"users\" db.users.drop() // drop the current database db.dropDatabase() // show database stats - nothing to show db.stats() // shutdown the server use admin db.shutdownServer()","title":"03. MongoDB \ub77c\uc774\ud504\uc0ac\uc774\ud074"},{"location":"posts/mongodb/04-mongodb-update-operators-inc/","text":"\uc774\ubc88 \ud3ec\uc2a4\ud305\ubd80\ud130 \uba87\ucc28\ub840\uc5d0 \uac78\uccd0 MongoDB Update Operators\uc5d0 \ub300\ud558\uc5ec \uc54c\uc544\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. MongoDB Update Operators\uc5d0 \ub300\ud558\uc5ec \ubcf4\ub2e4 \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 MongoDB\uc758 \uacf5\uc2dd \uc6f9\uc0ac\uc774\ud2b8\uc758 Update Operators \ud398\uc774\uc9c0 \uc5d0\uc11c \ud655\uc778\ud558\uc2e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. DB \uc791\uc5c5\uc744 \ud558\ub2e4\ubcf4\uba74, \ud2b9\uc815 \ub3c4\ud050\uba3c\ud2b8\uc758 \uc77c\ubd80\ubd84\ub9cc \ubcc0\uacbd\ud574\uc57c \ud560 \uc0c1\ud669\uc5d0 \ucc98\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Update Operators\ub97c \uc774\uc6a9\ud558\uc5ec \ub3c4\ud050\uba3c\ud2b8\uc758 \ubcc0\uacbd, \ucd94\uac00, \uc0ad\uc81c\ub97c \ud560 \uc218 \uc788\uc73c\uba70, \uc784\ubca0\ub514\ub4dc \ub3c4\ud050\uba3c\ud2b8 \ubc0f \uc5b4\ub808\uc774(array)\uc5d0 \ub300\ud574\uc11c\ub294 \ud578\ub4e4\ub9c1 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \uc0c1\ud669\uc744 \uac00\uc815\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: \uc5ec\ub7ec\ubd84\uc774 \uc138 \uac1c\uc758 \uc6f9\ud398\uc774\uc9c0\ub97c \uad00\ub9ac\ud574\uc57c \ud558\uace0 \uc788\uc73c\uba70, \ubc29\ubb38\uc790\uac00 \ubc29\ubb38 \uc2dc DB\uc758 \ud398\uc774\uc9c0 \ubdf0 \uad00\ub828 \ub0b4\uc6a9\uc744 1\uc529 \uc99d\uac00\uc2dc\ud0a4\ub294 \uc791\uc5c5\uc744 \ud574\uc57c\ud55c\ub2e4\uace0 \uac00\uc815\ud569\ub2c8\ub2e4. \uc6b0\uc120 \ub2e4\uc74c\uacfc \uac19\uc774 \ub370\uc774\ud130\ub97c \uc900\ube44\ud569\ub2c8\ub2e4: // user DB \"foobar\" use foobar // define webpage1 var page1 = {\"url\" : \"www.gchoi.net\", \"pageviews\" : 100} // define webpage2 var page2 = {\"url\" : \"www.google.com\", \"pageviews\" : 1000} // define webpage3 var page3 = {\"url\" : \"www.apple.com\", \"pageviews\" : 500} // insert items into DB db.analytics.insert(page1) db.analytics.insert(page2) db.analytics.insert(page3) db.analytics.find() \"www.gchoi.net\" URL\uc758 \ud398\uc774\uc9c0 \ubdf0\ub97c 1\uc529 \uc99d\uac00\uc2dc\ud0b5\ub2c8\ub2e4: // increase pageviews of url \"www.gchoi.net\" by 1 db.analytics.update({\"url\" : \"www.gchoi.net\"}, {\"$inc\" : {\"pageviews\" : 1}}) db.analytics.findOne({\"url\" : \"www.gchoi.net\"})","title":"04. MongoDB Update Operators Part 1. - $inc"},{"location":"posts/mongodb/05-mongodb-update-operators-set-unset/","text":"\uc774\ubc88 \ud3ec\uc2a4\ud305\uc5d0\uc11c\ub294 $set \uacfc $unset operator\ub97c \uc774\uc6a9\ud558\uc5ec \ub3c4\ud050\uba3c\ud2b8\ub97c \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \ubc29\ubc95\uc5d0 \ub300\ud558\uc5ec \uc54c\uc544\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. $set $set operator\ub294 \ud574\ub2f9 key\uac00 \uc874\uc7ac\ud560 \uacbd\uc6b0 \uc544\uc774\ud15c\uc744 \uc0c8\ub85c \ucd94\uac00\ud558\uac70\ub098 \ub610\ub294 \ud574\ub2f9 key\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \uc0c8\ub85c \ucd94\uac00\ud569\ub2c8\ub2e4. \uc6b0\uc120 \uc544\ub798\uc640 \uac19\uc774 \ub370\uc774\ud130 \uc900\ube44\ub97c \uc900\ube44\ud569\ub2c8\ub2e4: // drop the current database db.dropDatabase() // define webpage1 var user1 = { \"username\" : \"gchoi\", \"age\" : 37, \"sex\" : \"male\" } // insert items into DB db.users.insert(user1) db.users.find() _id \ub97c \uc81c\uc678\ud558\uace0\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uc544\uc774\ud15c\ub4e4\uc774 \ucd9c\ub825\ub420 \uac83\uc785\ub2c8\ub2e4. > db.users.find().pretty() { \"_id\" : ObjectId(\"5fa7c4430a2aa59573a4d1a5\"), \"username\" : \"gchoi\", \"age\" : 37, \"sex\" : \"male\" } \uc774\uc81c favorite food key \uc0dd\uc131\ud569\ub2c8\ub2e4: // update(create \"favorite food\" key) db.users.update( {\"username\" : \"gchoi\"}, {\"$set\" : {\"favorite food\" : \"\uae40\uce58\ubcf6\uc74c\ubc25\"}} ) \uc544\ub798\uc640 \uac19\uc774 favorite food \uc544\uc774\ud15c\uc774 \ucd94\uac00\ub418\uc5c8\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4: > db.users.find() > db.users.find().pretty() { \"_id\" : ObjectId(\"5fa7c4430a2aa59573a4d1a5\"), \"username\" : \"gchoi\", \"age\" : 37, \"sex\" : \"male\", \"favorite food\" : \"\uae40\uce58\ubcf6\uc74c\ubc25\" } favorite food key\ub97c array \ud615\ud0dc\ub85c \uc785\ub825\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4: db.users.update( {\"username\" : \"gchoi\"}, {\"$set\" : {\"favorite food\" : [\"\ub3fc\uc9c0\uac08\ube44\", \"\uc0bc\uacb9\uc0b4\", \"\ub41c\uc7a5\ucc0c\uac1c\"]}} ) array \ud615\ud0dc\uc758 favorite food \uc544\uc774\ud15c\uc774 \ucd9c\ub825\ub429\ub2c8\ub2e4: > db.users.find() { \"_id\" : ObjectId(\"5fa7c4430a2aa59573a4d1a5\"), \"username\" : \"gchoi\", \"age\" : 37, \"sex\" : \"male\", \"favorite food\" : [ \"\ub3fc\uc9c0\uac08\ube44\", \"\uc0bc\uacb9\uc0b4\", \"\ub41c\uc7a5\ucc0c\uac1c\" ] } $unset \uc774\uc81c $unset operator\ub97c \uc774\uc6a9\ud558\uc5ec favorite food key\ub97c \uc81c\uac70\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. // remove \"favorite food\" db.users.update( {\"username\" : \"gchoi\"}, {\"$unset\" : {\"favorite food\" : 1}} ) \uacb0\uacfc\ub97c \ucd9c\ub825\uc744 \ud574\ubcf4\uba74 favorite food key\uac00 \uc81c\uac70\ub418\uc5c8\uc74c\uc744 \ud655\uc778\ud558\uc2e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4: > db.users.find() { \"_id\" : ObjectId(\"52dbdd7aa1c05d0be00a4b63\"), \"age\" : 37, \"sex\" : \"male\", \"username\" : \"gchoi\" }","title":"05. MongoDB Update Operators Part 2. - $set, $unset"},{"location":"posts/mongodb/05-mongodb-update-operators-set-unset/#set","text":"$set operator\ub294 \ud574\ub2f9 key\uac00 \uc874\uc7ac\ud560 \uacbd\uc6b0 \uc544\uc774\ud15c\uc744 \uc0c8\ub85c \ucd94\uac00\ud558\uac70\ub098 \ub610\ub294 \ud574\ub2f9 key\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \uc0c8\ub85c \ucd94\uac00\ud569\ub2c8\ub2e4. \uc6b0\uc120 \uc544\ub798\uc640 \uac19\uc774 \ub370\uc774\ud130 \uc900\ube44\ub97c \uc900\ube44\ud569\ub2c8\ub2e4: // drop the current database db.dropDatabase() // define webpage1 var user1 = { \"username\" : \"gchoi\", \"age\" : 37, \"sex\" : \"male\" } // insert items into DB db.users.insert(user1) db.users.find() _id \ub97c \uc81c\uc678\ud558\uace0\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uc544\uc774\ud15c\ub4e4\uc774 \ucd9c\ub825\ub420 \uac83\uc785\ub2c8\ub2e4. > db.users.find().pretty() { \"_id\" : ObjectId(\"5fa7c4430a2aa59573a4d1a5\"), \"username\" : \"gchoi\", \"age\" : 37, \"sex\" : \"male\" } \uc774\uc81c favorite food key \uc0dd\uc131\ud569\ub2c8\ub2e4: // update(create \"favorite food\" key) db.users.update( {\"username\" : \"gchoi\"}, {\"$set\" : {\"favorite food\" : \"\uae40\uce58\ubcf6\uc74c\ubc25\"}} ) \uc544\ub798\uc640 \uac19\uc774 favorite food \uc544\uc774\ud15c\uc774 \ucd94\uac00\ub418\uc5c8\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4: > db.users.find() > db.users.find().pretty() { \"_id\" : ObjectId(\"5fa7c4430a2aa59573a4d1a5\"), \"username\" : \"gchoi\", \"age\" : 37, \"sex\" : \"male\", \"favorite food\" : \"\uae40\uce58\ubcf6\uc74c\ubc25\" } favorite food key\ub97c array \ud615\ud0dc\ub85c \uc785\ub825\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4: db.users.update( {\"username\" : \"gchoi\"}, {\"$set\" : {\"favorite food\" : [\"\ub3fc\uc9c0\uac08\ube44\", \"\uc0bc\uacb9\uc0b4\", \"\ub41c\uc7a5\ucc0c\uac1c\"]}} ) array \ud615\ud0dc\uc758 favorite food \uc544\uc774\ud15c\uc774 \ucd9c\ub825\ub429\ub2c8\ub2e4: > db.users.find() { \"_id\" : ObjectId(\"5fa7c4430a2aa59573a4d1a5\"), \"username\" : \"gchoi\", \"age\" : 37, \"sex\" : \"male\", \"favorite food\" : [ \"\ub3fc\uc9c0\uac08\ube44\", \"\uc0bc\uacb9\uc0b4\", \"\ub41c\uc7a5\ucc0c\uac1c\" ] }","title":"$set"},{"location":"posts/mongodb/05-mongodb-update-operators-set-unset/#unset","text":"\uc774\uc81c $unset operator\ub97c \uc774\uc6a9\ud558\uc5ec favorite food key\ub97c \uc81c\uac70\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. // remove \"favorite food\" db.users.update( {\"username\" : \"gchoi\"}, {\"$unset\" : {\"favorite food\" : 1}} ) \uacb0\uacfc\ub97c \ucd9c\ub825\uc744 \ud574\ubcf4\uba74 favorite food key\uac00 \uc81c\uac70\ub418\uc5c8\uc74c\uc744 \ud655\uc778\ud558\uc2e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4: > db.users.find() { \"_id\" : ObjectId(\"52dbdd7aa1c05d0be00a4b63\"), \"age\" : 37, \"sex\" : \"male\", \"username\" : \"gchoi\" }","title":"$unset"},{"location":"posts/mongodb/06-mongodb-update-operators-push/","text":"\uc774\ubc88 \ud3ec\uc2a4\ud305\uc5d0\uc11c\ub294 $push operator\uc5d0 \ub300\ud574 \uc54c\uc544\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. $push operator\ub294 DB\uc5d0 item\uc744 \uacc4\uc18d \ucd94\uac00\ud558\ub294 \uba85\ub839\uc5b4\uc785\ub2c8\ub2e4. \uc6b0\uc120 \uc124\uba85\uc5d0 \uc55e\uc11c \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \uc774\uc6a9\ud558\uc5ec \ub370\uc774\ud130\ub97c \uc900\ube44\ud558\uaca0\uc2b5\ub2c8\ub2e4: use foobar var user = {\"username\" : \"gchoi\", \"age\" : 37}; db.users.insert(user); \ub2e4\uc74c\uacfc \uac19\uc740 \uacb0\uacfc\ub97c \ud655\uc778\ud560 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4: > db.users.find() { \"_id\" : ObjectId(\"52e3c2e4623bbd008840d66f\"), \"username\" : \"gchoi\", \"age\" : 37 } \uc774\uc81c $push opertor\ub97c \ud1b5\ud574 \"email\"\uc744 \ucd94\uac00\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: db.users.update({\"username\" : \"gchoi\"}, {$push : {\"email\" : \"gchoi@gmail.com\"}}); \ub2e4\uc74c\uacfc \uac19\uc774 \"email\"\uc774 \ucd94\uac00\ub41c \uac83\uc744 \ubcfc \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4: > db.users.find().pretty() { \"_id\" : ObjectId(\"52e3c2e4623bbd008840d66f\"), \"age\" : 37, \"email\" : [ \"gchoi@gmail.com\" ], \"username\" : \"gchoi\" } $push operator\ub97c \ud55c \ubc88 \ub354 \uc785\ub825\ud558\uc5ec \ub3d9\uc77c\ud55c \"email\"\uc744 \ucd94\uac00\ud558\uace0 \uacb0\uacfc\ub97c \ud655\uc778\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: > db.users.find().pretty() { \"_id\" : ObjectId(\"52e3c2e4623bbd008840d66f\"), \"age\" : 37, \"email\" : [ \"gchoi@gmail.com\", \"gchoi@gmail.com\" ], \"username\" : \"gchoi\" } \uacb0\uacfc\ub97c \ubcf4\uba74, \ub3d9\uc77c\ud55c \"email\"\uc774 \uc911\ubcf5\uc801\uc73c\ub85c \ucd94\uac00\ub418\uc5c8\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc989, $push operator\ub97c \uc0ac\uc6a9\ud558\uba74 \uc911\ubcf5\uc801\uc774\ub354\ub77c\ub3c4 \uacc4\uc18d\uc801\uc73c\ub85c \uc544\uc774\ud15c\uc774 \ucd94\uac00\ub429\ub2c8\ub2e4. \uc774\ub807\uac8c \uc911\ubcf5\uc801\uc73c\ub85c \uc544\uc774\ud15c\uc774 \ucd94\uac00\ub418\ub294 \uac83\uc744 \ubc29\uc9c0\ud558\ub824\uba74 $addToSet \uba85\ub839\uc5b4\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc774 \uba85\ub839\uc5b4\ub294 \ub2e4\uc74c \ud3ec\uc2a4\ud305\uc5d0 \uc774\uc5b4\uc11c \ub2e4\ub8e8\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","title":"06. MongoDB Update Operators Part 3. - $push"},{"location":"posts/mongodb/07-mongodb-update-operators-addToSet/","text":"\uc9c0\ub09c \ud3ec\uc2a4\ud305\uc5d0\uc11c $push operator\ub97c \ud1b5\ud574 \ub3d9\uc77c\ud55c \uc544\uc774\ud15c\uc744 \ucd94\uac00\ud560 \uacbd\uc6b0 \uc911\ubcf5\uc801\uc73c\ub85c \ucd94\uac00\ub428\uc744 \uc0b4\ud3b4 \ubcf4\uc558\uc2b5\ub2c8\ub2e4. \ub9cc\uc57d \ub3d9\uc77c\ud55c \uc544\uc774\ud15c\uc744 \ucd94\uac00\ud560 \ub54c \uc911\ubcf5\uc801\uc73c\ub85c \ucd94\uac00\ud558\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub824\uba74 $addToSet operator\ub97c \uc0ac\uc6a9\ud558\uba74 \ub429\ub2c8\ub2e4. \uc6b0\uc120 \ub2e4\uc74c\uacfc \uac19\uc774 \ub370\uc774\ud130\ub97c \uc900\ube44\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. use foobar var user = {\"username\" : \"gchoi\", \"age\" : 37}; db.users.insert(user); db.users.update( {\"username\" : \"gchoi\"}, {$push : {\"email\" : \"gchoi@gmail.com\"}} ); \uacb0\uacfc\ub97c \ud655\uc778\ud574 \ubcf4\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: > db.users.find().pretty() { \"_id\" : ObjectId(\"52e3d4dd623bbd008840d671\"), \"age\" : 37, \"email\" : [ \"gchoi@gmail.com\" ], \"username\" : \"gchoi\" } \uc774\uc81c \ub2e4\uc74c\uacfc \uac19\uc774 \uc785\ub825\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. $push \ub300\uc2e0 $addToSet operator\uac00 \uc0ac\uc6a9\ub418\uc5c8\uc74c\uc744 \uc720\uc758\ud558\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4. db.users.update( {\"username\" : \"gchoi\"}, {$addToSet : {\"email\" : \"gchoi@gmail.com\"}} ) \uacb0\uacfc\ub97c \ud655\uc778\ud574 \ubcf4\uba74 \ub3d9\uc77c\ud55c \"email\"\uc774 \ud55c \ubc88 \ub354 \ucd94\uac00\ub418\uc5c8\uc74c\uc5d0\ub3c4 \uacb0\uacfc\uc5d0\uc11c\ub294 \uc911\ubcf5\uc801\uc73c\ub85c \ucd94\uac00\ub418\uc9c0 \uc54a\uc558\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: > db.users.find().pretty() { \"_id\" : ObjectId(\"52e3d4dd623bbd008840d671\"), \"age\" : 37, \"email\" : [ \"gchoi@gmail.com\" ], \"username\" : \"gchoi\" } $addToSet \uacfc $each \ub97c \ud568\uaed8 \uc0ac\uc6a9\ud558\uba74 \uc5ec\ub7ec \uac1c\uc758 \uc544\uc774\ud15c\uc744 \ud55c\uaebc\ubc88\uc5d0 \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uac00\ub839 \uc5ec\ub7ec \uac1c\uc758 \"email\"\uc744 \ucd94\uac00\ud55c\ub2e4\uace0 \uac00\uc815\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: db.users.update( {\"username\" : \"gchoi\"}, {\"$addToSet\" : {\"email\" : {\"$each\" : [\"cinema4dr12@gmail.com\", \"cinema4d@yahoo.com\", \"cinema4d@aaa.com\"]}}} ) \uacb0\uacfc\ub97c \ud655\uc778\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc5ec\ub7ec \uac1c\uc758 \"email\"\uc774 \ud55c \ubc88\uc5d0 \ucd94\uac00\ub418\uc5c8\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4: > db.users.findOne() { \"_id\" : ObjectId(\"52e3d4dd623bbd008840d671\"), \"age\" : 37, \"email\" : [ \"gchoi@gmail.com\", \"cinema4dr12@gmail.com\", \"cinema4d@yahoo.com\", \"cinema4d@aaa.com\" ], \"username\" : \"gchoi\" }","title":"07. MongoDB Update Operators Part 4. - $addToSet"},{"location":"posts/mongodb/08-mongodb-update-operators-pop-pull/","text":"\uc774\ubc88 \ud3ec\uc2a4\ud305\uc5d0\uc11c\ub294 $pop operator\uc640 $pull operator\ub97c \uc774\uc6a9\ud558\uc5ec DB\ub85c\ubd80\ud130 \uc544\uc774\ud15c\uc744 \uc0ad\uc81c\ud558\ub294 \ubc95\uc5d0 \ub300\ud574 \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc6b0\uc120 \"$pop\" operator\ub294 \ud2b9\uc815 key\uc758 \uc544\uc774\ud15c\uc744 \uccab\ubc88\uc9f8\ubd80\ud130 \ub610\ub294 \ub9c8\uc9c0\ub9c9\ubd80\ud130 \ud558\ub098\uc529 \uc0ad\uc81c\ud558\ub294 \uba85\ub839\uc5b4\uc785\ub2c8\ub2e4. {$pop : {key : 1}} \ub294 array \uc544\uc774\ud15c\uc758 \ub9e8 \ub9c8\uc9c0\ub9c9\uc73c\ub85c\ubd80\ud130 \ud558\ub098\uc529 \uc0ad\uc81c\ud558\uba70, {$pop : {key : -1}} \ub294 \uccab\ubc88\uc9f8 \uc544\uc774\ud15c\ubd80\ud130 \ud558\ub098\uc529 \uc0ad\uc81c\ud569\ub2c8\ub2e4. \ub2e4\uc74c \uc608\ub97c \ud1b5\ud574 \uc790\uc138\ud788 \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc6b0\uc120 \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \ud1b5\ud574 \uc544\uc774\ud15c\uc744 \uc900\ube44\ud558\uaca0\uc2b5\ub2c8\ub2e4: var user = {\"username\" : \"gchoi\", \"age\" : 37}; db.users.insert(user); db.users.update({\"username\" : \"gchoi\"}, {$addToSet : {\"email\" : \"aaa@gmail.com\"}}); db.users.update({\"username\" : \"gchoi\"}, {$addToSet : {\"email\" : \"bbb@gmail.com\"}}) db.users.update({\"username\" : \"gchoi\"}, {$addToSet : {\"email\" : \"ccc@yahoo.com\"}}) db.users.update({\"username\" : \"gchoi\"}, {$addToSet : {\"email\" : \"ddd@yahoo.com\"}}) db.users.update({\"username\" : \"gchoi\"}, {$addToSet : {\"email\" : \"eee@yahoo.com\"}}) db.users.update({\"username\" : \"gchoi\"}, {$addToSet : {\"email\" : \"fff@yahoo.com\"}}) db.users.update({\"username\" : \"gchoi\"}, {$addToSet : {\"email\" : \"ggg@yahoo.com\"}}) \ub2e4\uc74c\uacfc \uac19\uc774 \uc544\uc774\ud15c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: > db.users.find() { \"_id\" : ObjectId(\"52e496754f7969df59f1148c\"), \"age\" : 37, \"email\" : [ \"aaa@gmail.com\", \"bbb@gmail.com\", \"ccc@yahoo.com\", \"ddd@yahoo.com\", \"eee@yahoo.com\", \"fff@yahoo.com\", \"ggg@yahoo.com\" ], \"username\" : \"gchoi\" } \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \ubc18\ubcf5\uc801\uc73c\ub85c \uc785\ub825\ud558\uc5ec \uc544\uc774\ud15c\uc774 \ub9e8 \ub9c8\uc9c0\ub9c9\ubd80\ud130 \uc0ad\uc81c\ub418\ub294 \uac83\uc744 \ud655\uc778\ud799\ub2c8\ub2e4: ( $pop \uc758 key \uac12\uc774 \"1\"\uc784\uc5d0 \uc8fc\ubaa9\ud569\ub2c8\ub2e4.) > db.users.update({\"username\" : \"gchoi\"}, {$pop : {\"email\" : 1}}) > db.users.find().pretty() { \"_id\" : ObjectId(\"52e4976b91525ea329493cc2\"), \"age\" : 37, \"email\" : [ \"aaa@gmail.com\", \"bbb@gmail.com\", \"ccc@yahoo.com\", \"ddd@yahoo.com\", \"eee@yahoo.com\", \"fff@yahoo.com\" ], \"username\" : \"gchoi\" } > db.users.update({\"username\" : \"gchoi\"}, {$pop : {\"email\" : 1}}) > db.users.find().pretty() { \"_id\" : ObjectId(\"52e4976b91525ea329493cc2\"), \"age\" : 37, \"email\" : [ \"aaa@gmail.com\", \"bbb@gmail.com\", \"ccc@yahoo.com\", \"ddd@yahoo.com\", \"eee@yahoo.com\" ], \"username\" : \"gchoi\" } > db.users.update({\"username\" : \"gchoi\"}, {$pop : {\"email\" : 1}}) > db.users.find().pretty() { \"_id\" : ObjectId(\"52e4976b91525ea329493cc2\"), \"age\" : 37, \"email\" : [ \"aaa@gmail.com\", \"bbb@gmail.com\", \"ccc@yahoo.com\", \"ddd@yahoo.com\" ], \"username\" : \"gchoi\" } > db.users.update({\"username\" : \"gchoi\"}, {$pop : {\"email\" : 1}}) > db.users.find().pretty() { \"_id\" : ObjectId(\"52e4976b91525ea329493cc2\"), \"age\" : 37, \"email\" : [ \"aaa@gmail.com\", \"bbb@gmail.com\", \"ccc@yahoo.com\" ], \"username\" : \"gchoi\" } > db.users.update({\"username\" : \"gchoi\"}, {$pop : {\"email\" : 1}}) > db.users.find().pretty() { \"_id\" : ObjectId(\"52e4976b91525ea329493cc2\"), \"age\" : 37, \"email\" : [ \"aaa@gmail.com\", \"bbb@gmail.com\" ], \"username\" : \"gchoi\" } > db.users.update({\"username\" : \"gchoi\"}, {$pop : {\"email\" : 1}}) > db.users.find().pretty() { \"_id\" : ObjectId(\"52e4976b91525ea329493cc2\"), \"age\" : 37, \"email\" : [\"aaa@gmail.com\"], \"username\" : \"gchoi\" } > db.users.update({\"username\" : \"gchoi\"}, {$pop : {\"email\" : 1}}) > db.users.find().pretty() { \"_id\" : ObjectId(\"52e4976b91525ea329493cc2\"), \"age\" : 37, \"email\" : [ ], \"username\" : \"gchoi\" } \uc704\uc640 \uac19\uc774 \"email\" \uc544\uc774\ud15c\uc774 \ub9e8 \ub9c8\uc9c0\ub9c9 \uc544\uc774\ud15c\ubd80\ud130 \ud558\ub098\uc529 \uc0ac\ub77c\uc9c0\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4. \uc774\ubc88\uc5d0\ub294 $pop key \uac12\uc744 \"-1\"\ub85c \ud14c\uc2a4\ud2b8\ud558\uc5ec \uc544\uc774\ud15c\uc744 \uc55e\uc5d0\uc11c\ubd80\ud130 \ud558\ub098\uc529 \uc0ad\uc81c\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc55e\uc11c \uc608\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c \uc544\uc774\ud15c\uc744 \uc900\ube44\ud558\uaca0\uc2b5\ub2c8\ub2e4 ( users \uceec\ub809\uc158 \uc911\ubcf5\uc744 \ub9c9\uae30\uc704\ud574 drop() \ud568\uc218\ub97c \uc774\uc6a9\ud558\uc5ec users \uceec\ub809\uc158\uc744 \uc0ad\uc81c\ud558\uc600\uc2b5\ub2c8\ub2e4). db.users.drop() var user = {\"username\" : \"gchoi\", \"age\" : 37}; db.users.insert(user); db.users.update({\"username\" : \"gchoi\"}, {$addToSet : {\"email\" : \"aaa@gmail.com\"}}); db.users.update({\"username\" : \"gchoi\"}, {$addToSet : {\"email\" : \"bbb@gmail.com\"}}) db.users.update({\"username\" : \"gchoi\"}, {$addToSet : {\"email\" : \"ccc@yahoo.com\"}}) db.users.update({\"username\" : \"gchoi\"}, {$addToSet : {\"email\" : \"ddd@yahoo.com\"}}) db.users.update({\"username\" : \"gchoi\"}, {$addToSet : {\"email\" : \"eee@yahoo.com\"}}) db.users.update({\"username\" : \"gchoi\"}, {$addToSet : {\"email\" : \"fff@yahoo.com\"}}) db.users.update({\"username\" : \"gchoi\"}, {$addToSet : {\"email\" : \"ggg@yahoo.com\"}}) $pop key \uac12\uc744 \"-1\"\ub85c \ud558\uc5ec \ubc18\ubcf5\uc801\uc73c\ub85c \uc2e4\ud589\ud558\uc5ec \uccab\ubc88\uc9f8 \uc544\uc774\ud15c\ubd80\ud130 \uc0ad\uc81c\ub418\ub294 \uac83\uc744 \ud655\uc778\ud574 \ubd05\ub2c8\ub2e4: > db.users.find().pretty() { \"_id\" : ObjectId(\"52e4b9274d7acd666141a744\"), \"age\" : 37, \"email\" : [ \"aaa@gmail.com\", \"bbb@gmail.com\", \"ccc@yahoo.com\", \"ddd@yahoo.com\", \"eee@yahoo.com\", \"fff@yahoo.com\", \"ggg@yahoo.com ], \"username\" : \"gchoi\" } > db.users.update({\"username\" : \"gchoi\"}, {$pop : {\"email\" : -1}}) > db.users.find().pretty() { \"_id\" : ObjectId(\"52e4b9274d7acd666141a744\"), \"age\" : 37, \"email\" : [ \"bbb@gmail.com\", \"ccc@yahoo.com\", \"ddd@yahoo.com\", \"eee@yahoo.com\", \"fff@yahoo.com\", \"ggg@yahoo.com ], \"username\" : \"gchoi\" } > db.users.update({\"username\" : \"gchoi\"}, {$pop : {\"email\" : -1}}) > db.users.find().pretty() { \"_id\" : ObjectId(\"52e4b9274d7acd666141a744\"), \"age\" : 37, \"email\" : [ \"ccc@yahoo.com\", \"ddd@yahoo.com\", \"eee@yahoo.com\", \"fff@yahoo.com\", \"ggg@yahoo.com ], \"username\" : \"gchoi\" } > db.users.update({\"username\" : \"gchoi\"}, {$pop : {\"email\" : -1}}) > db.users.find().pretty() { \"_id\" : ObjectId(\"52e4b9274d7acd666141a744\"), \"age\" : 37, \"email\" : [ \"ddd@yahoo.com\", \"eee@yahoo.com\", \"fff@yahoo.com\", \"ggg@yahoo.com\" ], \"username\" : \"gchoi\" } > db.users.update({\"username\" : \"gchoi\"}, {$pop : {\"email\" : -1}}) > db.users.find().pretty() { \"_id\" : ObjectId(\"52e4b9274d7acd666141a744\"), \"age\" : 37, \"email\" : [ \"eee@yahoo.com\", \"fff@yahoo.com\", \"ggg@yahoo.com\" ], \"username\" : \"gchoi\" } > db.users.update({\"username\" : \"gchoi\"}, {$pop : {\"email\" : -1}}) > db.users.find().pretty() { \"_id\" : ObjectId(\"52e4b9274d7acd666141a744\"), \"age\" : 37, \"email\" : [ \"fff@yahoo.com\", \"ggg@yahoo.com\" ], \"username\" : \"gchoi\" } > db.users.update({\"username\" : \"gchoi\"}, {$pop : {\"email\" : -1}}) > db.users.find().pretty() { \"_id\" : ObjectId(\"52e4b9274d7acd666141a744\"), \"age\" : 37, \"email\" : [ \"ggg@yahoo.com\" ], \"username\" : \"gchoi\" } > db.users.update({\"username\" : \"gchoi\"}, {$pop : {\"email\" : -1}}) > db.users.find().pretty() { \"_id\" : ObjectId(\"52e4b9274d7acd666141a744\"), \"age\" : 37, \"email\" : [ ], \"username\" : \"gchoi\" } \uc774\ubc88\uc5d0\ub294 $pull operator\ub97c \uc774\uc6a9\ud558\uc5ec \ud2b9\uc815 \uc544\uc774\ud15c\uc744 \uc0ad\uc81c\ud574 \ubcf4\ub3c4\ub85d \ud569\ub2c8\ub2e4. \uc5ed\uc2dc \ub9c8\ucc2c\uac00\uc9c0\ub85c \ub370\uc774\ud130\ub97c \uba3c\uc800 \uc900\ube44\ud558\uaca0\uc2b5\ub2c8\ub2e4: db.users.drop() var user = {\"username\" : \"gchoi\", \"age\" : 37}; db.users.insert(user); db.users.update({\"username\" : \"gchoi\"}, {$addToSet : {\"email\" : \"aaa@gmail.com\"}}); db.users.update({\"username\" : \"gchoi\"}, {$addToSet : {\"email\" : \"bbb@gmail.com\"}}) db.users.update({\"username\" : \"gchoi\"}, {$addToSet : {\"email\" : \"ccc@yahoo.com\"}}) db.users.update({\"username\" : \"gchoi\"}, {$addToSet : {\"email\" : \"ddd@yahoo.com\"}}) db.users.update({\"username\" : \"gchoi\"}, {$addToSet : {\"email\" : \"eee@yahoo.com\"}}) db.users.update({\"username\" : \"gchoi\"}, {$addToSet : {\"email\" : \"fff@yahoo.com\"}}) db.users.update({\"username\" : \"gchoi\"}, {$addToSet : {\"email\" : \"ggg@yahoo.com\"}}) $pull operator\ub85c\ubd80\ud130 \"email\"\uc758 \"ddd@yahoo.com\"\uc744 \uc0ad\uc81c\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \uc785\ub825\ud569\ub2c8\ub2e4: db.users.update({\"username\" : \"gchoi\"}, {$pull : {\"email\" : \"ddd@yahoo.com\"}}) \uacb0\uacfc\ub97c \ud655\uc778\ud574 \ubcf4\uba74 \"email\" \uc911 \"ddd@yahoo.com\"\uc774 \uc0ad\uc81c\ub418\uc5c8\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: > db.users.find().pretty() { \"_id\" : ObjectId(\"52e4be914d7acd666141a746\"), \"age\" : 37, \"email\" : [ \"aaa@gmail.com\", \"bbb@gmail.com\", \"ccc@yahoo.com\", \"ddd@yahoo.com\", \"eee@yahoo.com\", \"fff@yahoo.com\", \"ggg@yahoo.com\" ], \"username\" : \"gchoi\" }","title":"08. MongoDB Update Operators Part 5. - $pop, $pull"},{"location":"posts/mongodb/09-mongodb-update-operators-upsert/","text":"\uc774\ubc88 \ud3ec\uc2a4\ud305\uc5d0\uc11c\ub294 upsert \uc5d0 \ub300\ud574 \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. upsert \ub294 update \uc758 \ud2b9\ubcc4\ud55c \ud615\ud0dc (\uba85\ub839\uc5b4\ub294 \uc544\ub2c8\uba70 DB\uc758 \ucee8\uc149)\uc785\ub2c8\ub2e4. update \uae30\uc900\uc5d0 \uc77c\uce58\ud558\ub294 \ub3c4\ud050\uba3c\ud2b8\uac00 \uc5c6\uc744 \uacbd\uc6b0 \uadf8 \uae30\uc900\uc744 \ud3ec\ud568\ud558\ub294 \ub3c4\ud050\uba3c\ud2b8\ub85c \uc5c5\ub370\uc774\ud2b8\ud569\ub2c8\ub2e4. \ub9cc\uc57d \uc77c\uce58\ud558\ub294 \ub3c4\ud050\uba3c\ud2b8\uac00 \uc788\uc744 \uacbd\uc6b0 \uc815\uc0c1\uc801\uc73c\ub85c \uc5c5\ub370\uc774\ud2b8 \ub429\ub2c8\ub2e4. $upsert \ub294 \uceec\ub809\uc158\uc758 \uad6c\uc870\ub97c \uc815\ud558\uace0 \uc2dc\uc791\ud560 \ud544\uc694\uac00 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \ud3b8\ub9ac\ud558\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc6b0\uc120 \ub2e4\uc74c\uacfc \uac19\uc774 \uba85\ub839\uc5b4\ub97c \uc785\ub825\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: db.math.remove() db.math.update({\"count\" : 25}, {\"$inc\" : {\"count\" : 3}}, true) \uccab\ubc88\uc9f8 \ub77c\uc778\uc744 \ud1b5\ud574 math \uceec\ub809\uc158\uc744 \uc0ad\uc81c(\uceec\ub809\uc158\uc774 \uc874\uc7ac\ud560 \uacbd\uc6b0 \"true\"\ub97c \uceec\ub809\uc158\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc744 \uacbd\uc6b0 \"false\"\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4)\ud55c \ud6c4, \ub450\ubc88\uc9f8 \ub77c\uc778\uc5d0\uc11c count \uac00 \"25\"\uc778 \uc544\uc774\ud15c\uc5d0 \"3\"\uc744 \ub354\ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098, \uccab\ubc88\uc9f8 \ub77c\uc778\uc5d0\uc11c math \uceec\ub809\uc158\uc774 \uc0ad\uc81c\ub418\uc5c8\uc73c\ubbc0\ub85c count \uac00 \"25\"\uc778 \uc544\uc774\ud15c\uc774 \uc788\uc744\ub9ac \uc5c6\uc2b5\ub2c8\ub2e4. upsert \uac1c\ub150\uc5d0 \uc758\ud574 \uc774 \uc544\uc774\ud15c\uc5d0 \ubd80\ud569\ud558\ub294 \uae30\uc900\uc774 \uc5c6\uc73c\ubbc0\ub85c \uc774 \uae30\uc900\uc758 \uc544\uc774\ud15c\uc744 \uc0dd\uc131\ud558\uace0 \"3\"\uc744 \ub354\ud569\ub2c8\ub2e4. \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: > db.math.find() { \"_id\" : ObjectId(\"52ea31953c6feb42c96ad802\"), \"count\" : 28 } count \uac00 \"25\"\ub85c \uc0dd\uc131\ub41c \ud6c4 \"3\"\uc774 \ub354\ud574\uc9c4 \uacb0\uacfc\uc785\ub2c8\ub2e4. \ub9cc\uc57d \ub3d9\uc77c\ud55c \uba85\ub839\uc744 \ud55c \ubc88 \ub354 \uc2e4\ud589\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \uc544\uc774\ud15c\uc774 \ud558\ub098 \ub354 \uc0dd\uc131\ub420 \uac83\uc785\ub2c8\ub2e4. > db.math.update({\"count\" : 25}, {\"$inc\" : {\"count\" : 3}}, true) > db.math.find() { \"_id\" : ObjectId(\"52ea31953c6feb42c96ad802\"), \"count\" : 28 } { \"_id\" : ObjectId(\"52ea37eb3c6feb42c96ad803\"), \"count\" : 28 }","title":"09. MongoDB Update Operators Part 6. - $upsert"},{"location":"posts/mongodb/10-mongodb-update-operators-updating-multiple-documents/","text":"\uc774\ubc88 \ud3ec\uc2a4\ud305\uc5d0\uc11c\ub294 \ub2e4\uc911\uc758 \ub3c4\ud050\uba3c\ud2b8\ub97c \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \ubc29\ubc95\uc5d0 \ub300\ud558\uc5ec \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. update \ucffc\ub9ac\ub294 \uae30\ubcf8\uc801\uc73c\ub85c \uae30\uc900\uc5d0 \ubd80\ud569\ud558\ub294 \uccab\ubc88\uc9f8 \ub3c4\ud050\uba3c\ud2b8\ub9cc \uc5c5\ub370\uc774\ud2b8 \ud569\ub2c8\ub2e4. \uc989 \uae30\uc900\uc5d0 \ubd80\ud569\ud558\ub294 \ub3c4\ud050\uba3c\ud2b8\uac00 \ub354 \uc788\uc744 \uacbd\uc6b0 \ubd80\ud569\ud558\ub294 \uccab\ubc88\uc9f8 \ub3c4\ud050\uba3c\ud2b8\ub97c \uc81c\uc678\ud55c \ub098\uba38\uc9c0 \ub3c4\ud050\uba3c\ud2b8\uc758 \ub0b4\uc6a9\uc740 \uadf8\ub300\ub85c \uc720\uc9c0\ub429\ub2c8\ub2e4. \ub9cc\uc57d \uae30\uc900\uc5d0 \ubd80\ud569\ud558\ub294 \ubaa8\ub4e0 \ub3c4\ud050\uba3c\ud2b8\ub97c \uc5c5\ub370\uc774\ud2b8\ud558\ub824\uba74 update \uc758 \ub124\ubc88\uc9f8 \ud30c\ub77c\ubbf8\ud130\ub97c \"true\"\ub85c \uc124\uc815\ud569\ub2c8\ub2e4. \uc6b0\uc120 \ud14c\uc2a4\ud2b8\uc6a9 \ub370\uc774\ud130\ub97c \ub2e4\uc74c\uacfc \uac19\uc774 \uc900\ube44\ud558\ub294\ub370 \uace0\uac1d\uc758 \uc774\ub984\uacfc \uc0dd\uc77c\uc744 \uc785\ub825\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: db.customers.remove() db.customers.insert({name: \"gchoi\", birthday:\"08/22\"}) db.customers.insert({name: \"jmpark\", birthday:\"04/02\"}) db.customers.insert({name: \"tjkwak\", birthday:\"11/11\"}) db.customers.insert({name: \"hskim\", birthday:\"12/08\"}) db.customers.insert({name: \"dsha\", birthday:\"04/02\"}) \uc785\ub825\ud55c \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. > db.customers.find() { \"_id\" : ObjectId(\"52ea464d5e3b86c2a7325073\"), \"name\" : \"gchoi\", \"birthday\" : \"08/22\" } { \"_id\" : ObjectId(\"52ea464d5e3b86c2a7325074\"), \"name\" : \"jmpark\", \"birthday\" : \"04/02\" } { \"_id\" : ObjectId(\"52ea464d5e3b86c2a7325075\"), \"name\" : \"tjkwak\", \"birthday\" : \"11/11\" } { \"_id\" : ObjectId(\"52ea464d5e3b86c2a7325076\"), \"name\" : \"hskim\", \"birthday\" : \"12/08\" } { \"_id\" : ObjectId(\"52ea464d5e3b86c2a7325077\"), \"name\" : \"dsha\", \"birthday\" : \"04/02\" } \uc785\ub825\ub41c \uacb0\uacfc\ub97c \ub208\uc5ec\uaca8 \ubcf4\uba74, \"jmpark\"\uacfc \"dsha\"\uc758 \uc0dd\uc77c\uc774 \ubaa8\ub450 \"04/02\"\ub85c \ub3d9\uc77c\ud568\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc0dd\uc77c\uc774 \"04/02\"\uc778 \uace0\uac1d\uc744 \uae30\uc900\uc73c\ub85c \uac80\uc0c9\ud574 \ubcf4\uba74, > db.customers.find({\"birthday\" : \"04/02\"}) { \"_id\" : ObjectId(\"52ea464d5e3b86c2a7325074\"), \"name\" : \"jmpark\", \"birthday\" : \"04/02\" } { \"_id\" : ObjectId(\"52ea464d5e3b86c2a7325077\"), \"name\" : \"dsha\", \"birthday\" : \"04/02\" } \uc608\uc0c1\ub300\ub85c \"jmpark\"\uacfc \"dsha\"\uac00 \uac80\uc0c9\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc624\ub298\uc774 4\uc6d42\uc77c\uc774\ub77c\uace0 \ud558\uace0 \uc624\ub298\uc774 \uc0dd\uc77c\uc778 \ub450 \uba85\uc758 \uace0\uac1d\uc5d0 \ub300\ud574 \"gift\" key\ub97c \uc5c5\ub370\uc774\ud2b8 \ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: db.customers.update({birthday : \"04/02\"}, {$set : {gift : \"Happy Birthday!\"}}, false, true) \ub9cc\uc57d \uc5c5\ub370\uc774\ud2b8 \ub41c \ub3c4\ud050\uba3c\ud2b8\uc5d0 \ub300\ud55c \uc815\ubcf4\ub97c \uc5bb\uace0\uc790 \ud55c\ub2e4\uba74 getLastError \uba85\ub839\uc5b4\ub97c \uc785\ub825\ud55c\ub2e4. > db.runCommand({getLastError : 1}) { \"updatedExisting\" : true, \"n\" : 2, \"connectionId\" : 1, \"err\" : null, \"ok\" : 1 } updatedExisting \uac12 true\ub294 \uc5c5\ub370\uc774\ud2b8 \ub41c \ub3c4\ud050\uba3c\ud2b8\uac00 \uc874\uc7ac\ud568\uc744 \uc758\ubbf8\ud558\uba70, n \uac12 2\ub294 \uc5c5\ub370\uc774\ud2b8 \ub41c \ub3c4\ud050\uba3c\ud2b8\uc758 \uc218\uac00 2\uac1c\uc784\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \ud604\uc7ac \uc5c5\ub370\uc774\ud2b8 \ub41c \uacb0\uacfc\ub97c \ucd9c\ub825\ud574 \ubcf4\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: > db.customers.find() { \"_id\" : ObjectId(\"52ea464d5e3b86c2a7325073\"), \"name\" : \"gchoi\", \"birthday\" : \"08/22\" } { \"_id\" : ObjectId(\"52ea464d5e3b86c2a7325075\"), \"name\" : \"tjkwak\", \"birthday\" : \"11/11\" } { \"_id\" : ObjectId(\"52ea464d5e3b86c2a7325076\"), \"name\" : \"hskim\", \"birthday\" : \"12/08\" } { \"_id\" : ObjectId(\"52ea464d5e3b86c2a7325074\"), \"birthday\" : \"04/02\", \"gift\" : \"Happy Birthday!\", \"name\" : \"jmpark\" }{ \"_id\" : ObjectId(\"52ea464d5e3b86c2a7325077\"), \"birthday\" : \"04/02\", \"gift\" : \"Happy Birthday!\", \"name\" : \"dsha\" } $set update operator\uc758 \ub124\ubc88\uc9f8 \ud30c\ub77c\ubbf8\ud130\uac00 \"true\"\ub85c \uc124\uc815\ud588\uc74c\uc744 \uc8fc\ubaa9\ud569\ub2c8\ub2e4. \uc608\uc0c1\ub300\ub85c birthday key\uac00 \"04/02\"\ub85c \ub418\uc5b4\uc788\ub294 \"jmpark\"\uacfc \"dsha\"\uc5d0 gift key\uac00 \uc0dd\uc131\ub418\uc5c8\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"10. MongoDB Update Operators Part 7. - Updating Multiple Documents"},{"location":"posts/mongodb/11-mongodb-query-find/","text":"find query\ub294 \uc9c0\uae08\uae4c\uc9c0 \ub2e4\ub8ec \ub0b4\uc6a9\uc5d0\uc11c \uac00\uc7a5 \ub9ce\uc774 \uc0ac\uc6a9\ub41c query\uc785\ub2c8\ub2e4. \uac00\uc7a5 \uae30\ubcf8\uc801\uc778 query \uc911 \ud558\ub098\ub85c\uc11c \uac80\uc0c9 \uc870\uac74\uc5d0 \ub300\ud574 \uc880 \ub354 \uc54c\uc544\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc6b0\uc120 \ub2e4\uc74c\uacfc \uac19\uc774 \ub370\uc774\ud130\ub97c \uc900\ube44\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4: > db.customers.drop() > db.customers.insert({name: \"gchoi\", age: 37, birthday: \"08/22\", email: \"cinema4dr12@gmail.com\"}) > db.customers.insert({name: \"jmpark\", age: 25, birthday: \"04/02\", email: \"raspberry@gmail.com\"}) > db.customers.insert({name: \"tjkwak\", age: 32, birthday: \"11/11\", email: \"ozerodie@gmail.com\"}) > db.customers.insert({name: \"hskim\", age: 36, birthday: \"12/08\", email: \"codeblender@gmail.com\"}) > db.customers.insert({name: \"jhlee\", age: 34, birthday: \"07/12\", email: \"ijabul@gmail.com\"}) > db.customers.insert({name: \"dwseo\", age: 33, birthday: \"05/05\", email: \"cram@gmail.com\"}) 1. include \uac80\uc0c9 \ub9cc\uc57d \uc704\uc640 \uac19\uc774 \uc900\ube44\ub41c \ub370\uc774\ud130 \uc911 name \uacfc age \ub9cc\uc744 \uac80\uc0c9 \uacb0\uacfc\ub85c \ud45c\uc2dc\ud558\uace0\uc790 \ud560 \uacbd\uc6b0\uc5d0\ub294 \uac01 \ud574\ub2f9 key\uac12\uc744 \"1\"\ub85c \uc785\ub825\ud569\ub2c8\ub2e4. \uc989, > db.customers.find({},{name: 1, age: 1}) { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d0\"), \"name\" : \"gchoi\", \"age\" : 37 } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d1\"), \"name\" : \"jmpark\", \"age\" : 25 } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d2\"), \"name\" : \"tjkwak\", \"age\" : 32 } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d3\"), \"name\" : \"hskim\", \"age\" : 36 } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d4\"), \"name\" : \"jhlee\", \"age\" : 34 } { \"_id\" : ObjectId(\"52ec746ff97299c19188c2d5\"), \"name\" : \"dwseo\", \"age\" : 33 } \uc704\uc758 \uac80\uc0c9\uacb0\uacfc\ub97c \ubcf4\uba74 name \uacfc age \ub9cc\uc73c\ub85c \uac80\uc0c9 \uacb0\uacfc\ub97c \uc5bb\uc744 \uc218 \uc788\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 2. exclude \uac80\uc0c9 include \uac80\uc0c9\uacfc \ubc18\ub300\ub85c \uc5b4\ub5a4 key\uc5d0 \ub300\ud574 \uc81c\uc678\ud558\ub294 \uacbd\uc6b0\ub294 key\uac12\uc744 \"0\"\ub85c \uc785\ub825\ud558\uba74 \ub429\ub2c8\ub2e4. \uc989, > db.customers.find({},{email: 0, age: 0}) { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d0\"), \"name\" : \"gchoi\", \"birthday\" : \"08/22\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d1\"), \"name\" : \"jmpark\", \"birthday\" : \"04/02\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d2\"), \"name\" : \"tjkwak\", \"birthday\" : \"11/11\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d3\"), \"name\" : \"hskim\", \"birthday\" : \"12/08\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d4\"), \"name\" : \"jhlee\", \"birthday\" : \"07/12\" } { \"_id\" : ObjectId(\"52ec746ff97299c19188c2d5\"), \"name\" : \"dwseo\", \"birthday\" : \"05/05\" } email \uacfc age \uac00 \uac80\uc0c9 \uacb0\uacfc\uc5d0\uc11c \uc81c\uc678\ub418\uc5c8\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4. 3. Query \uc870\uac74(Query Conditionals) \uac00\uc7a5 \uc77c\ubc18\uc801\uc73c\ub85c \ub9ce\uc774 \uc0ac\uc6a9\ub418\ub294 query \uc870\uac74\uc5d0\ub294 $lt , $lte , $gt , $gte \ub4f1\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uac01\uac01\uc740 \ubd80\ub4f1\ud638 \"<\", \"<=\", \">\", \">=\"\uc640 \ub300\uc751\ub429\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \uc55e\uc11c \uc900\ube44\ub41c \uace0\uac1d(customers) \ub370\uc774\ud130 \uc911 \ub098\uc774(age)\uac00 33 \uc774\uc0c1\uc778 \uace0\uac1d\uc744 \ucd94\ucd9c\ud55c\ub2e4\uace0 \uac00\uc815\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: > db.customers.find({\"age\" : {\"$gte\" : 33}}) { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d0\"), \"name\" : \"gchoi\", \"age\" : 37, \"birthday\" : \"08/22\", \"email\" : \"cinema4dr12@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d3\"), \"name\" : \"hskim\", \"age\" : 36, \"birthday\" : \"12/08\", \"email\" : \"codeblender@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d4\"), \"name\" : \"jhlee\", \"age\" : 34, \"birthday\" : \"07/12\", \"email\" : \"ijabul@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ff97299c19188c2d5\"), \"name\" : \"dwseo\", \"age\" : 33, \"birthday\" : \"05/05\", \"email\" : \"cram@gmail.com\" } \ub9cc\uc57d \ub098\uc774\uac00 33\uc774\uc0c1 36\uc774\ud558\uc758 \uace0\uac1d\uc744 \uac80\uc0c9\ud558\uace0\uc790 \ud55c\ub2e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 $lte \ud0a4\ub97c \uc785\ub825\ud569\ub2c8\ub2e4: > db.customers.find({\"age\" : {\"$gte\" : 33, \"$lte\": 36}}) { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d3\"), \"name\" : \"hskim\", \"age\" : 36, \"birthday\" : \"12/08\", \"email\" : \"codeblender@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d4\"), \"name\" : \"jhlee\", \"age\" : 34, \"birthday\" : \"07/12\", \"email\" : \"ijabul@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ff97299c19188c2d5\"), \"name\" : \"dwseo\", \"age\" : 33, \"birthday\" : \"05/05\", \"email\" : \"cram@gmail.com\" } \uc5b4\ub5a4 \uc870\uac74\uacfc \uc77c\uce58\ud558\uc9c0 \uc54a\ub294 \uadf8 \uc678 \uac80\uc0c9 \uacb0\uacfc\ub97c \uc5bb\uace0\ud55c\ub2e4\uba74 $ne \ud0a4\ub97c \uc785\ub825\ud569\ub2c8\ub2e4. name \uc5d0\uc11c \"gchoi\"\uac00 \uc544\ub2cc \uac80\uc0c9 \uacb0\uacfc\ub97c \uc5bb\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: > db.customers.find({name : {\"$ne\": \"gchoi\"}}) { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d1\"), \"name\" : \"jmpark\", \"age\" : 25, \"birthday\" : \"04/02\", \"email\" : \"raspberry@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d2\"), \"name\" : \"tjkwak\", \"age\" : 32, \"birthday\" : \"11/11\", \"email\" : \"ozerodie@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d3\"), \"name\" : \"hskim\", \"age\" : 36, \"birthday\" : \"12/08\", \"email\" : \"codeblender@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d4\"), \"name\" : \"jhlee\", \"age\" : 34, \"birthday\" : \"07/12\", \"email\" : \"ijabul@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ff97299c19188c2d5\"), \"name\" : \"dwseo\", \"age\" : 33, \"birthday\" : \"05/05\", \"email\" : \"cram@gmail.com\" } $in \uc740 \ud2b9\uc815 \uc870\uac74\uc774 \ud3ec\ud568\ub41c \ub3c4\ud050\uba3c\ud2b8\ub4e4\uc744 \uac80\uc0c9\ud569\ub2c8\ub2e4. \uac80\uc0c9 \uc870\uac74\uc740 \ubc18\ub4dc\uc2dc array \ud615\ud0dc\ub85c \uc785\ub825\ub418\uc5b4\uc57c \ud558\uba70 array \uc5d8\ub9ac\uba3c\ud2b8 \uc218\ub294 1\uac1c \uc774\uc0c1\uc774\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 name \uc774 \"gchoi\"\uc640 \"jmpark\"\uc744 \ud3ec\ud568\ud558\uace0 \uc788\ub294 \ub3c4\ud050\uba3c\ud2b8\ub4e4\uc744 \uac80\uc0c9\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: > db.customers.find({name : {\"$in\": [\"gchoi\", \"jmpark\"]}}) { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d0\"), \"name\" : \"gchoi\", \"age\" : 37, \"birthday\" : \"08/22\", \"email\" : \"cinema4dr12@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d1\"), \"name\" : \"jmpark\", \"age\" : 25, \"birthday\" : \"04/02\", \"email\" : \"raspberry@gmail.com\" } \uc77c\ubc18\uc801\uc73c\ub85c $in \uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \uc0c1\ud669\uc5d0 \uc720\uc6a9\ud558\uac8c \uc0ac\uc6a9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uac01 \uace0\uac1d\uc758 \ub2f9\ucca8\ubc88\ud638\uac00 6\uac1c\uc758 \uc22b\uc790\ub77c\uace0 \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. 6\uac1c\uc758 \uc22b\uc790 \uc911 2, 35, 42\uc758 \uc138 \uac1c\uc758 \uc22b\uc790\uc758 \ub2f9\ucca8\ubc88\ud638\ub97c \uac00\uc9c0\uace0 \uc788\ub294 \uace0\uac1d\uc744 \ucd94\ucca8\ud55c\ub2e4\uace0 \ud558\uba74 $in \uc744 \ud1b5\ud574 \uc774 \uc22b\uc790\ub4e4\uc744 \uac00\uc9c0\uace0 \uc788\ub294 \uace0\uac1d\uc744 \ucd94\ucd9c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. $or \uc740 \uc81c\uc2dc\ub418\ub294 \uc870\uac74\uc744 \ubaa8\ub450 \ud3ec\ud568\ud558\ub294 \ub3c4\ud050\uba3c\ud2b8\ub4e4\uc744 \uac80\uc0c9\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 name \uc774 \"ghcoi\"\uc774\uac70\ub098 age \uac00 34\uc778 \uace0\uac1d\uc744 \uac80\uc0c9\ud55c\ub2e4\uace0 \ud558\uba74, > db.customers.find({\"$or\" : [{name: \"gchoi\"},{age: 34}]}) { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d0\"), \"name\" : \"gchoi\", \"age\" : 37, \"birthday\" : \"08/22\", \"email\" : \"cinema4dr12@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d4\"), \"name\" : \"jhlee\", \"age\" : 34, \"birthday\" : \"07/12\", \"email\" : \"ijabul@gmail.com\" } \ub208\uce58\ube60\ub978 \ubd84\ub4e4\uc740 \uc608\uc0c1\ud558\uc2dc\uaca0\uc9c0\ub9cc $or \uc774 \uc788\uc73c\uba74 $and \ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc6b0\uc120 \uc774\ub97c \uc124\uba85\ud558\uae30 \uc704\ud574 \"jmpark\"\uacfc \uc0dd\uc77c\uc774 \uac19\uc740 \uace0\uac1d \ud55c \uba85\uc744 \ucd94\uac00\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4: > db.customers.insert({name: \"dsha\", age: 47, birthday: \"04/02\", email: \"hds66@gmail.com\"}) > db.customers.find() { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d0\"), \"name\" : \"gchoi\", \"age\" : 37, \"birthday\" : \"08/22\", \"email\" : \"cinema4dr12@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d1\"), \"name\" : \"jmpark\", \"age\" : 25, \"birthday\" : \"04/02\", \"email\" : \"raspberry@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d2\"), \"name\" : \"tjkwak\", \"age\" : 32, \"birthday\" : \"11/11\", \"email\" : \"ozerodie@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d3\"), \"name\" : \"hskim\", \"age\" : 36, \"birthday\" : \"12/08\", \"email\" : \"codeblender@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d4\"), \"name\" : \"jhlee\", \"age\" : 34, \"birthday\" : \"07/12\", \"email\" : \"ijabul@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ff97299c19188c2d5\"), \"name\" : \"dwseo\", \"age\" : 33, \"birthday\" : \"05/05\", \"email\" : \"cram@gmail.com\" } { \"_id\" : ObjectId(\"52ec89a6f97299c19188c2d6\"), \"name\" : \"dsha\", \"age\" : 47, \"birthday\" : \"04/02\", \"email\" : \"hds66@gmail.com\" } \"jmpark\"\uacfc \"dsha\"\ub294 \ub2e4\ub978 \uac83\uc740 \ubaa8\ub450 \ub2e4\ub974\uc9c0\ub9cc \uc0dd\uc77c\uc740 \uac19\uc2b5\ub2c8\ub2e4. \ub9cc\uc57d \uc0dd\uc77c\uc774 \"04/02\"\ub97c \uae30\uc900\uc73c\ub85c \uace0\uac1d\uc744 \uac80\uc0c9\ud558\uba74 \"jmpark\"\uacfc \"dsha\"\uac00 \ubaa8\ub450 \uac80\uc0c9\ub420 \uac83\uc785\ub2c8\ub2e4. > db.customers.find({birthday: \"04/02\"}) { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d1\"), \"name\" : \"jmpark\", \"age\" : 25, \"birthday\" : \"04/02\", \"email\" : \"raspberry@gmail.com\" } { \"_id\" : ObjectId(\"52ec89a6f97299c19188c2d6\"), \"name\" : \"dsha\", \"age\" : 47, \"birthday\" : \"04/02\", \"email\" : \"hds66@gmail.com\" } \uc774\uc81c $and \uc0dd\uc77c\uc774 \"04/02\"\uc774\uace0 \ub098\uc774\uac00 25\uc778 \uace0\uac1d\uc744 \uac80\uc0c9\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. $and \ub294 \uc81c\uc2dc\ub418\ub294 \uac80\uc0c9 \uae30\uc900\uc744 \ubaa8\ub450 \ub9cc\uc871\ud558\ub294 \ub3c4\ud050\uba3c\ud2b8\ub97c \uac80\uc0c9\ud569\ub2c8\ub2e4. > db.customers.find({\"$and\" : [{birthday: \"04/02\"},{age: 25}]}) { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d1\"), \"name\" : \"jmpark\", \"age\" : 25, \"birthday\" : \"04/02\", \"email\" : \"raspberry@gmail.com\" } \uc608\uc0c1\ud588\ub358 \ubc14\uc640 \uac19\uc774 \uc0c1\uae30 \ub450 \uac00\uc9c0 \uc870\uac74\uc744 \ubaa8\ub450 \ub9cc\uc871\ud558\ub294 \"jmpark\" \ub9cc\uc774 \uac80\uc0c9 \ub418\uc5c8\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc8fc\uc758\uc0ac\ud56d : query\uc5d0\uc11c \ub3d9\uc77c\ud55c \ud0a4\ub97c \ub450 \ubc88 \ubcc0\uacbd\ud558\ub294 \uac83\uc744 \ud5c8\uc6a9\uce58 \uc54a\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 {\"$inc\" : {\"age\" : 1}, \"$set\" : {age : 40}} \uc740 \ud5c8\uc6a9\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc65c\ub0d0\ud558\uba74, age \ub97c \ub450 \ubc88 \ubcc0\uacbd\ud558\ub824\uace0 \ud558\uc600\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.","title":"11. MongoDB Query Part 1. - find"},{"location":"posts/mongodb/11-mongodb-query-find/#1-include","text":"\ub9cc\uc57d \uc704\uc640 \uac19\uc774 \uc900\ube44\ub41c \ub370\uc774\ud130 \uc911 name \uacfc age \ub9cc\uc744 \uac80\uc0c9 \uacb0\uacfc\ub85c \ud45c\uc2dc\ud558\uace0\uc790 \ud560 \uacbd\uc6b0\uc5d0\ub294 \uac01 \ud574\ub2f9 key\uac12\uc744 \"1\"\ub85c \uc785\ub825\ud569\ub2c8\ub2e4. \uc989, > db.customers.find({},{name: 1, age: 1}) { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d0\"), \"name\" : \"gchoi\", \"age\" : 37 } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d1\"), \"name\" : \"jmpark\", \"age\" : 25 } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d2\"), \"name\" : \"tjkwak\", \"age\" : 32 } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d3\"), \"name\" : \"hskim\", \"age\" : 36 } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d4\"), \"name\" : \"jhlee\", \"age\" : 34 } { \"_id\" : ObjectId(\"52ec746ff97299c19188c2d5\"), \"name\" : \"dwseo\", \"age\" : 33 } \uc704\uc758 \uac80\uc0c9\uacb0\uacfc\ub97c \ubcf4\uba74 name \uacfc age \ub9cc\uc73c\ub85c \uac80\uc0c9 \uacb0\uacfc\ub97c \uc5bb\uc744 \uc218 \uc788\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"1. include \uac80\uc0c9"},{"location":"posts/mongodb/11-mongodb-query-find/#2-exclude","text":"include \uac80\uc0c9\uacfc \ubc18\ub300\ub85c \uc5b4\ub5a4 key\uc5d0 \ub300\ud574 \uc81c\uc678\ud558\ub294 \uacbd\uc6b0\ub294 key\uac12\uc744 \"0\"\ub85c \uc785\ub825\ud558\uba74 \ub429\ub2c8\ub2e4. \uc989, > db.customers.find({},{email: 0, age: 0}) { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d0\"), \"name\" : \"gchoi\", \"birthday\" : \"08/22\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d1\"), \"name\" : \"jmpark\", \"birthday\" : \"04/02\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d2\"), \"name\" : \"tjkwak\", \"birthday\" : \"11/11\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d3\"), \"name\" : \"hskim\", \"birthday\" : \"12/08\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d4\"), \"name\" : \"jhlee\", \"birthday\" : \"07/12\" } { \"_id\" : ObjectId(\"52ec746ff97299c19188c2d5\"), \"name\" : \"dwseo\", \"birthday\" : \"05/05\" } email \uacfc age \uac00 \uac80\uc0c9 \uacb0\uacfc\uc5d0\uc11c \uc81c\uc678\ub418\uc5c8\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4.","title":"2. exclude \uac80\uc0c9"},{"location":"posts/mongodb/11-mongodb-query-find/#3-query-query-conditionals","text":"\uac00\uc7a5 \uc77c\ubc18\uc801\uc73c\ub85c \ub9ce\uc774 \uc0ac\uc6a9\ub418\ub294 query \uc870\uac74\uc5d0\ub294 $lt , $lte , $gt , $gte \ub4f1\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uac01\uac01\uc740 \ubd80\ub4f1\ud638 \"<\", \"<=\", \">\", \">=\"\uc640 \ub300\uc751\ub429\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \uc55e\uc11c \uc900\ube44\ub41c \uace0\uac1d(customers) \ub370\uc774\ud130 \uc911 \ub098\uc774(age)\uac00 33 \uc774\uc0c1\uc778 \uace0\uac1d\uc744 \ucd94\ucd9c\ud55c\ub2e4\uace0 \uac00\uc815\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: > db.customers.find({\"age\" : {\"$gte\" : 33}}) { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d0\"), \"name\" : \"gchoi\", \"age\" : 37, \"birthday\" : \"08/22\", \"email\" : \"cinema4dr12@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d3\"), \"name\" : \"hskim\", \"age\" : 36, \"birthday\" : \"12/08\", \"email\" : \"codeblender@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d4\"), \"name\" : \"jhlee\", \"age\" : 34, \"birthday\" : \"07/12\", \"email\" : \"ijabul@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ff97299c19188c2d5\"), \"name\" : \"dwseo\", \"age\" : 33, \"birthday\" : \"05/05\", \"email\" : \"cram@gmail.com\" } \ub9cc\uc57d \ub098\uc774\uac00 33\uc774\uc0c1 36\uc774\ud558\uc758 \uace0\uac1d\uc744 \uac80\uc0c9\ud558\uace0\uc790 \ud55c\ub2e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 $lte \ud0a4\ub97c \uc785\ub825\ud569\ub2c8\ub2e4: > db.customers.find({\"age\" : {\"$gte\" : 33, \"$lte\": 36}}) { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d3\"), \"name\" : \"hskim\", \"age\" : 36, \"birthday\" : \"12/08\", \"email\" : \"codeblender@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d4\"), \"name\" : \"jhlee\", \"age\" : 34, \"birthday\" : \"07/12\", \"email\" : \"ijabul@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ff97299c19188c2d5\"), \"name\" : \"dwseo\", \"age\" : 33, \"birthday\" : \"05/05\", \"email\" : \"cram@gmail.com\" } \uc5b4\ub5a4 \uc870\uac74\uacfc \uc77c\uce58\ud558\uc9c0 \uc54a\ub294 \uadf8 \uc678 \uac80\uc0c9 \uacb0\uacfc\ub97c \uc5bb\uace0\ud55c\ub2e4\uba74 $ne \ud0a4\ub97c \uc785\ub825\ud569\ub2c8\ub2e4. name \uc5d0\uc11c \"gchoi\"\uac00 \uc544\ub2cc \uac80\uc0c9 \uacb0\uacfc\ub97c \uc5bb\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: > db.customers.find({name : {\"$ne\": \"gchoi\"}}) { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d1\"), \"name\" : \"jmpark\", \"age\" : 25, \"birthday\" : \"04/02\", \"email\" : \"raspberry@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d2\"), \"name\" : \"tjkwak\", \"age\" : 32, \"birthday\" : \"11/11\", \"email\" : \"ozerodie@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d3\"), \"name\" : \"hskim\", \"age\" : 36, \"birthday\" : \"12/08\", \"email\" : \"codeblender@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d4\"), \"name\" : \"jhlee\", \"age\" : 34, \"birthday\" : \"07/12\", \"email\" : \"ijabul@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ff97299c19188c2d5\"), \"name\" : \"dwseo\", \"age\" : 33, \"birthday\" : \"05/05\", \"email\" : \"cram@gmail.com\" } $in \uc740 \ud2b9\uc815 \uc870\uac74\uc774 \ud3ec\ud568\ub41c \ub3c4\ud050\uba3c\ud2b8\ub4e4\uc744 \uac80\uc0c9\ud569\ub2c8\ub2e4. \uac80\uc0c9 \uc870\uac74\uc740 \ubc18\ub4dc\uc2dc array \ud615\ud0dc\ub85c \uc785\ub825\ub418\uc5b4\uc57c \ud558\uba70 array \uc5d8\ub9ac\uba3c\ud2b8 \uc218\ub294 1\uac1c \uc774\uc0c1\uc774\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 name \uc774 \"gchoi\"\uc640 \"jmpark\"\uc744 \ud3ec\ud568\ud558\uace0 \uc788\ub294 \ub3c4\ud050\uba3c\ud2b8\ub4e4\uc744 \uac80\uc0c9\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: > db.customers.find({name : {\"$in\": [\"gchoi\", \"jmpark\"]}}) { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d0\"), \"name\" : \"gchoi\", \"age\" : 37, \"birthday\" : \"08/22\", \"email\" : \"cinema4dr12@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d1\"), \"name\" : \"jmpark\", \"age\" : 25, \"birthday\" : \"04/02\", \"email\" : \"raspberry@gmail.com\" } \uc77c\ubc18\uc801\uc73c\ub85c $in \uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \uc0c1\ud669\uc5d0 \uc720\uc6a9\ud558\uac8c \uc0ac\uc6a9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uac01 \uace0\uac1d\uc758 \ub2f9\ucca8\ubc88\ud638\uac00 6\uac1c\uc758 \uc22b\uc790\ub77c\uace0 \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. 6\uac1c\uc758 \uc22b\uc790 \uc911 2, 35, 42\uc758 \uc138 \uac1c\uc758 \uc22b\uc790\uc758 \ub2f9\ucca8\ubc88\ud638\ub97c \uac00\uc9c0\uace0 \uc788\ub294 \uace0\uac1d\uc744 \ucd94\ucca8\ud55c\ub2e4\uace0 \ud558\uba74 $in \uc744 \ud1b5\ud574 \uc774 \uc22b\uc790\ub4e4\uc744 \uac00\uc9c0\uace0 \uc788\ub294 \uace0\uac1d\uc744 \ucd94\ucd9c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. $or \uc740 \uc81c\uc2dc\ub418\ub294 \uc870\uac74\uc744 \ubaa8\ub450 \ud3ec\ud568\ud558\ub294 \ub3c4\ud050\uba3c\ud2b8\ub4e4\uc744 \uac80\uc0c9\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 name \uc774 \"ghcoi\"\uc774\uac70\ub098 age \uac00 34\uc778 \uace0\uac1d\uc744 \uac80\uc0c9\ud55c\ub2e4\uace0 \ud558\uba74, > db.customers.find({\"$or\" : [{name: \"gchoi\"},{age: 34}]}) { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d0\"), \"name\" : \"gchoi\", \"age\" : 37, \"birthday\" : \"08/22\", \"email\" : \"cinema4dr12@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d4\"), \"name\" : \"jhlee\", \"age\" : 34, \"birthday\" : \"07/12\", \"email\" : \"ijabul@gmail.com\" } \ub208\uce58\ube60\ub978 \ubd84\ub4e4\uc740 \uc608\uc0c1\ud558\uc2dc\uaca0\uc9c0\ub9cc $or \uc774 \uc788\uc73c\uba74 $and \ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc6b0\uc120 \uc774\ub97c \uc124\uba85\ud558\uae30 \uc704\ud574 \"jmpark\"\uacfc \uc0dd\uc77c\uc774 \uac19\uc740 \uace0\uac1d \ud55c \uba85\uc744 \ucd94\uac00\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4: > db.customers.insert({name: \"dsha\", age: 47, birthday: \"04/02\", email: \"hds66@gmail.com\"}) > db.customers.find() { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d0\"), \"name\" : \"gchoi\", \"age\" : 37, \"birthday\" : \"08/22\", \"email\" : \"cinema4dr12@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d1\"), \"name\" : \"jmpark\", \"age\" : 25, \"birthday\" : \"04/02\", \"email\" : \"raspberry@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d2\"), \"name\" : \"tjkwak\", \"age\" : 32, \"birthday\" : \"11/11\", \"email\" : \"ozerodie@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d3\"), \"name\" : \"hskim\", \"age\" : 36, \"birthday\" : \"12/08\", \"email\" : \"codeblender@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d4\"), \"name\" : \"jhlee\", \"age\" : 34, \"birthday\" : \"07/12\", \"email\" : \"ijabul@gmail.com\" } { \"_id\" : ObjectId(\"52ec746ff97299c19188c2d5\"), \"name\" : \"dwseo\", \"age\" : 33, \"birthday\" : \"05/05\", \"email\" : \"cram@gmail.com\" } { \"_id\" : ObjectId(\"52ec89a6f97299c19188c2d6\"), \"name\" : \"dsha\", \"age\" : 47, \"birthday\" : \"04/02\", \"email\" : \"hds66@gmail.com\" } \"jmpark\"\uacfc \"dsha\"\ub294 \ub2e4\ub978 \uac83\uc740 \ubaa8\ub450 \ub2e4\ub974\uc9c0\ub9cc \uc0dd\uc77c\uc740 \uac19\uc2b5\ub2c8\ub2e4. \ub9cc\uc57d \uc0dd\uc77c\uc774 \"04/02\"\ub97c \uae30\uc900\uc73c\ub85c \uace0\uac1d\uc744 \uac80\uc0c9\ud558\uba74 \"jmpark\"\uacfc \"dsha\"\uac00 \ubaa8\ub450 \uac80\uc0c9\ub420 \uac83\uc785\ub2c8\ub2e4. > db.customers.find({birthday: \"04/02\"}) { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d1\"), \"name\" : \"jmpark\", \"age\" : 25, \"birthday\" : \"04/02\", \"email\" : \"raspberry@gmail.com\" } { \"_id\" : ObjectId(\"52ec89a6f97299c19188c2d6\"), \"name\" : \"dsha\", \"age\" : 47, \"birthday\" : \"04/02\", \"email\" : \"hds66@gmail.com\" } \uc774\uc81c $and \uc0dd\uc77c\uc774 \"04/02\"\uc774\uace0 \ub098\uc774\uac00 25\uc778 \uace0\uac1d\uc744 \uac80\uc0c9\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. $and \ub294 \uc81c\uc2dc\ub418\ub294 \uac80\uc0c9 \uae30\uc900\uc744 \ubaa8\ub450 \ub9cc\uc871\ud558\ub294 \ub3c4\ud050\uba3c\ud2b8\ub97c \uac80\uc0c9\ud569\ub2c8\ub2e4. > db.customers.find({\"$and\" : [{birthday: \"04/02\"},{age: 25}]}) { \"_id\" : ObjectId(\"52ec746ef97299c19188c2d1\"), \"name\" : \"jmpark\", \"age\" : 25, \"birthday\" : \"04/02\", \"email\" : \"raspberry@gmail.com\" } \uc608\uc0c1\ud588\ub358 \ubc14\uc640 \uac19\uc774 \uc0c1\uae30 \ub450 \uac00\uc9c0 \uc870\uac74\uc744 \ubaa8\ub450 \ub9cc\uc871\ud558\ub294 \"jmpark\" \ub9cc\uc774 \uac80\uc0c9 \ub418\uc5c8\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc8fc\uc758\uc0ac\ud56d : query\uc5d0\uc11c \ub3d9\uc77c\ud55c \ud0a4\ub97c \ub450 \ubc88 \ubcc0\uacbd\ud558\ub294 \uac83\uc744 \ud5c8\uc6a9\uce58 \uc54a\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 {\"$inc\" : {\"age\" : 1}, \"$set\" : {age : 40}} \uc740 \ud5c8\uc6a9\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc65c\ub0d0\ud558\uba74, age \ub97c \ub450 \ubc88 \ubcc0\uacbd\ud558\ub824\uace0 \ud558\uc600\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.","title":"3. Query \uc870\uac74(Query Conditionals)"},{"location":"posts/mongodb/12-mongodb-query-findAndModify/","text":"\uc774\ubc88 \ud3ec\uc2a4\ud305\uc5d0\uc11c\ub294 findAndModify \ub97c \uc774\uc6a9\ud558\uc5ec \ub3c4\ud050\uba3c\ud2b8\ub97c \uc5c5\ub370\uc774\ud2b8\ud558\ub294 \ubc29\ubc95\uc5d0 \ub300\ud574 \uc54c\uc544\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. findAndModify \ub294 \uc81c\uc2dc\ub41c \uae30\uc900\uc758 \uc544\uc774\ud15c\uc744 \ucc3e\uace0 \uc5c5\ub370\uc774\ud2b8\ud558\ub294 \uc77c\ub828\uc758 \uacfc\uc815\uc744 \ud55c \ubc88\uc5d0 \ucc98\ub9ac\ud560 \uc218 \uc788\ub294 \ud3b8\ub9ac\ud55c \uba85\ub839\uc785\ub2c8\ub2e4. findAndModify \uba85\ub839\uc5b4\uc758 \uc778\uc790\uc5d0\ub294 sort \uae30\ub2a5\uc774 \uc788\ub294\ub370 \uc9c0\uae08\uae4c\uc9c0 \ub2e4\ub8ec \uc801\uc774 \uc5c6\uc73c\ubbc0\ub85c \uc774 \ubd80\ubd84\uc744 \uc6b0\uc120 \uc774\ud574\ud558\uace0 \ub118\uc5b4\uac00\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc774 \ub370\uc774\ud130\ub97c \uc900\ube44\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4: db.tasks.insert({todo : \"shopping\", status : \"READY\", priority : \"4\"}) db.tasks.insert({todo : \"studying Mongo DB\", status : \"READY\", priority : \"1\"}) db.tasks.insert({todo : \"reporting the current job\", status : \"DONE\", priority : \"8\"}) db.tasks.insert({todo : \"cleaning my room\", status : \"READY\", priority : \"3\"}) db.tasks.insert({todo : \"meeting friends\", status : \"DONE\", priority : \"7\"}) db.tasks.insert({todo : \"depositing money\", status : \"RUNNING\", priority : \"6\"}) db.tasks.insert({todo : \"take a walk\", status : \"RUNNING\", priority : \"5\"}) db.tasks.insert({todo : \"sending an email\", status : \"READY\", priority : \"2\"}) todo \ub294 \"\ud574\uc57c \ud560 \uc77c\"\uc774\uba70, status \ub294 \uc9c4\ud589\uc0c1\ud0dc\uc774\uba70 \"REDAY(\uc900\ube44)\", \"(\ucc98\ub9ac \uc911)\", \"DONE(\ucc98\ub9ac\uc644\ub8cc)\"\ub85c \uad6c\ubd84\ub429\ub2c8\ub2e4. priority \ub294 \"\uc6b0\uc120\uc21c\uc704\"\uc774\uba70 \uac12\uc774 \ud074\uc218\ub85d \ub192\uc740 \uc6b0\uc120\uc21c\uc704\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. \uadf8\ub7fc status \uac00 \"REDAY\"\uc778 \uac83 \uc911\uc5d0 \uc6b0\uc120\uc21c\uc704\uac00 \ub192\uc740 \uc21c\uc11c\ub300\ub85c \uc815\ub82c(sort)\ud574 \ubcf4\uae30 \uc704\ud574 \ub2e4\uc74c\uacfc \uac19\uc774 \ud14c\uc2a4\ud2b8 \ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: > db.tasks.find({status : \"READY\"}).sort({priority : -1}) { \"_id\" : ObjectId(\"52eba10e5e3b86c2a732508c\"), \"todo\" : \"shopping\", \"status\" : \"READY\", \"priority\" : \"4\" } { \"_id\" : ObjectId(\"52eba10e5e3b86c2a732508f\"), \"todo\" : \"cleaning my room\", \"status\" : \"READY\", \"priority\" : \"3\" } { \"_id\" : ObjectId(\"52eba10e5e3b86c2a7325093\"), \"todo\" : \"sending an email\", \"status\" : \"READY\", \"priority\" : \"2\" } { \"_id\" : ObjectId(\"52eba10e5e3b86c2a732508d\"), \"todo\" : \"studying Mongo DB\", \"status\" : \"READY\", \"priority\" : \"1\" } priority \uac00 -1\uc778 \uac83\uc740 \uac12\uc744 \ub192\uc740 \uc21c\uc11c\ub300\ub85c \uc815\ub82c\ud558\uba70, \ub9cc\uc57d 1\uc778 \uacbd\uc6b0 \ubc18\ub300\ub85c \ub0ae\uc740 \uc21c\uc11c\ub85c \uc815\ub82c\ub429\ub2c8\ub2e4 (\uc9c1\uc811 \ud14c\uc2a4\ud2b8 \ud574 \ubcf4\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4). \uc774\uc81c \ubcf8\uaca9\uc801\uc73c\ub85c findAndModify \ub97c \uc774\ud574\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. status \uac00 \"REDAY\"\uc778 \uac83\ub4e4 \uc911\uc5d0\uc11c priority \uac00 \uac00\uc7a5 \ub192\uc740 \uac83\uc744 \ucc3e\uc544 status \ub97c \"RUNNING\"\uc73c\ub85c \ubc14\uafb8\ub294 \uba85\ub839\uc744 \uc218\ud589\ud569\ub2c8\ub2e4. \ub2e4\uc74c \uba85\ub839\uc744 \uc785\ub825\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: db.tasks.findAndModify({ query : {status : \"READY\"}, sort : {priority : -1}, update : {\"$set\" : {status : \"RUNNING\"}} }) \uc704\uc758 \uba85\ub839\uc5d0\uc11c query \ub294 \uc5c5\ub370\uc774\ud2b8\ud560 \uc120\ud0dd \uae30\uc900\uc744, sort \ub294 \uc815\ub82c\uc758 \uae30\uc900\uc744, update \ub294 \uc120\ud0dd\ub41c \ub3c4\ud050\uba3c\ud2b8\ub97c \uc5c5\ub370\uc774\ud2b8 \ud560 \ub0b4\uc6a9\uc744 \uc785\ub825\ud569\ub2c8\ub2e4. \uc774\uc678\uc5d0 findAndModify \uc758 \uc785\ub825 \ud30c\ub77c\ubbf8\ud130\ub4e4\uc5d0 \ub300\ud574\uc11c\ub294 \ub4b7\ubd80\ubd84\uc5d0\uc11c \uc880 \ub354 \uc790\uc138\ud788 \uc124\uba85\ud558\uae30\ub85c \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc218\ud589\ud55c \uba85\ub839\uc5d0 \ub300\ud55c \uacb0\uacfc\ub97c \uc0b4\ud3b4\ubcf4\uba74, > db.tasks.find() { \"_id\" : ObjectId(\"52eba10e5e3b86c2a732508c\"), \"priority\" : \"4\", \"status\" : \"RUNNING\", \"todo\" : \"shopping\" } { \"_id\" : ObjectId(\"52eba10e5e3b86c2a732508d\"), \"todo\" : \"studying Mongo DB\", \"status\" : \"READY\", \"priority\" : \"1\" } { \"_id\" : ObjectId(\"52eba10e5e3b86c2a732508e\"), \"todo\" : \"reporting the current job\", \"status\" : \"DONE\", \"priority\" : \"8\" } { \"_id\" : ObjectId(\"52eba10e5e3b86c2a732508f\"), \"todo\" : \"cleaning my room\", \"status\" : \"READY\", \"priority\" : \"3\" } { \"_id\" : ObjectId(\"52eba10e5e3b86c2a7325090\"), \"todo\" : \"meeting friends\", \"status\" : \"DONE\", \"priority\" : \"7\" } { \"_id\" : ObjectId(\"52eba10e5e3b86c2a7325091\"), \"todo\" : \"depositing money\", \"status\" : \"RUNNING\", \"priority\" : \"6\" } { \"_id\" : ObjectId(\"52eba10e5e3b86c2a7325092\"), \"todo\" : \"take a walk\", \"status\" : \"RUNNING\", \"priority\" : \"5\" } { \"_id\" : ObjectId(\"52eba10e5e3b86c2a7325093\"), \"todo\" : \"sending an email\", \"status\" : \"READY\", \"priority\" : \"2\" } \uc778\ub370, \uc608\uc0c1\ub300\ub85c status \uac00 \"READY\"\uc600\ub358 \uac83 \uc911 \uac00\uc7a5 \uc6b0\uc120\uc21c\uc704\uac00 \ub192\uc558\ub358 \"shopping\"\uc758 status \uac00 \"RUNNING\"\uc73c\ub85c \ubc14\ub00c\uc5c8\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uba85\ub839\uc744 \ubc18\ubcf5\uc801\uc73c\ub85c \uc218\ud589\ud558\uba74 \uc6b0\uc120\uc21c\uc704\uac00 \ub192\uc740 \uc21c\uc11c\ub300\ub85c \"RUNNING\"\uc73c\ub85c \ubc14\ub00c\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4. \ub9cc\uc57d \ub354 \uc774\uc0c1 \uc5c5\ub370\uc774\ud2b8 \ud560 \uac83\uc774 \uc5c6\uc73c\uba74 \"null\"\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4. findAndModify \uc758 \uc8fc\uc694 \uc785\ub825 \ud30c\ub77c\ubbf8\ud130\ub97c \uc815\ub9ac\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4 (\ubcf4\ub2e4 \uc790\uc138\ud55c \ud30c\ub77c\ubbf8\ud130\uc5d0 \ub300\ud55c \ub0b4\uc6a9\uc744 \ud655\uc778\ud558\ub824\uba74 \uc774 \uacf3 \uc744 \ucc38\uace0\ud558\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4). query : document \uc5c5\ub370\uc774\ud2b8 \ud560 \ub3c4\ud050\uba3c\ud2b8\uc758 \uc120\ud0dd \uae30\uc900. \ud55c\ubc88\uc5d0 \ud558\ub098\uc758 \ub3c4\ud050\uba3c\ud2b8\ub9cc \uc5c5\ub370\uc774\ud2b8 \uac00\ub2a5\ud568. sort : document \uc5c5\ub370\uc774\ud2b8 \ud560 \ub3c4\ud050\uba3c\ud2b8 \uc120\ud0dd. \ub3c4\ud050\uba3c\ud2b8\uc758 \uc815\ub82c \uc21c\uc11c\ub97c \uc815\ud568. update : document update \ub610\ub294 remove \ub458 \uc911 \ud558\ub098\ub294 \ubc18\ub4dc\uc2dc \uba85\uc2dc\ub418\uc5b4\uc57c \ud568. \ub450 \uac1c\ub97c \ub3d9\uc2dc\uc5d0 \uba85\uc2dc\ud560 \uc218\ub294 \uc5c6\uc74c. field: value \ud615\ud0dc\ub85c \uc5c5\ub370\uc774\ud2b8. remove : boolean \"update\" \ub610\ub294 \"remove\" \ub458 \uc911 \ud558\ub098\ub294 \ubc18\ub4dc\uc2dc \uba85\uc2dc\ub418\uc5b4\uc57c \ud568. \ub450 \uac1c\ub97c \ub3d9\uc2dc\uc5d0 \uba85\uc2dc\ud560 \uc218\ub294 \uc5c6\uc74c. update field\uc5d0 \uba85\uc2dc\ub41c \ub3c4\ud050\uba3c\ud2b8\ub97c \uc81c\uac70. \ub3c4\ud050\uba3c\ud2b8\ub97c \uc81c\uac70\ud558\ub824\uba74 \"true\"\ub85c \uc124\uc815\ud568. \uae30\ubcf8\uac12\uc740 \"false\"\uc784. new : boolean \"true\"\ub85c \uc124\uc815\ub420 \uacbd\uc6b0 \uc6d0\ubcf8\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uac83\uc774 \uc544\ub2cc \uc0c8\ub85c\uc6b4 \ubb38\uc11c\ub85c \uc0dd\uc131\ud558\uc5ec \uc5c5\ub370\uc774\ud2b8 \ub428. \uc774\ubc88\uc5d0\ub294 \ub2e4\uc74c\uc744 \uc785\ub825\ud558\uc5ec \ub3c4\ud050\uba3c\ud2b8\ub97c \uc81c\uac70\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ud604\uc7ac DB \ub0b4\uc6a9\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. > db.tasks.find() { \"_id\" : ObjectId(\"52ebb9fe5e3b86c2a73250ac\"), \"priority\" : \"4\", \"status\" : \"RUNNING\", \"todo\" : \"shopping\" } { \"_id\" : ObjectId(\"52ebb9fe5e3b86c2a73250ad\"), \"todo\" : \"studying Mongo DB\", \"status\" : \"READY\", \"priority\" : \"1\" } { \"_id\" : ObjectId(\"52ebb9fe5e3b86c2a73250ae\"), \"todo\" : \"reporting the current job\", \"status\" : \"DONE\", \"priority\" : \"8\" } { \"_id\" : ObjectId(\"52ebb9fe5e3b86c2a73250af\"), \"todo\" : \"cleaning my room\", \"status\" : \"READY\", \"priority\" : \"3\" } { \"_id\" : ObjectId(\"52ebb9fe5e3b86c2a73250b0\"), \"todo\" : \"meeting friends\", \"status\" : \"DONE\", \"priority\" : \"7\" } { \"_id\" : ObjectId(\"52ebb9fe5e3b86c2a73250b1\"), \"todo\" : \"depositing money\", \"status\" : \"RUNNING\", \"priority\" : \"6\" } { \"_id\" : ObjectId(\"52ebb9fe5e3b86c2a73250b2\"), \"todo\" : \"take a walk\", \"status\" : \"RUNNING\", \"priority\" : \"5\" } { \"_id\" : ObjectId(\"52ebb9ff5e3b86c2a73250b3\"), \"todo\" : \"sending an email\", \"status\" : \"READY\", \"priority\" : \"2\" } \ud604\uc7ac \uc644\ub8cc\ub41c(\"status\" : \"DONE\") \ub3c4\ud050\uba3c\ud2b8 \uc911 \uc6b0\uc120\uc21c\uc704\uac00 \uac00\uc7a5 \ub0ae\uc740 \uc544\uc774\ud15c\uc744 \uc0ad\uc81c\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: db.tasks.findAndModify({ query : {status : \"DONE\"}, sort : {priority : 1}, remove : true }) \uacb0\uacfc\ub97c \uc0b4\ud3b4\ubcf4\uba74, > db.tasks.find() { \"_id\" : ObjectId(\"52ebb9fe5e3b86c2a73250ac\"), \"priority\" : \"4\", \"status\" : \"RUNNING\", \"todo\" : \"shopping\" } { \"_id\" : ObjectId(\"52ebb9fe5e3b86c2a73250ad\"), \"todo\" : \"studying Mongo DB\", \"status\" : \"READY\", \"priority\" : \"1\" } { \"_id\" : ObjectId(\"52ebb9fe5e3b86c2a73250ae\"), \"todo\" : \"reporting the current job\", \"status\" : \"DONE\", \"priority\" : \"8\" } { \"_id\" : ObjectId(\"52ebb9fe5e3b86c2a73250af\"), \"todo\" : \"cleaning my room\", \"status\" : \"READY\", \"priority\" : \"3\" } { \"_id\" : ObjectId(\"52ebb9fe5e3b86c2a73250b1\"), \"todo\" : \"depositing money\", \"status\" : \"RUNNING\", \"priority\" : \"6\" } { \"_id\" : ObjectId(\"52ebb9fe5e3b86c2a73250b2\"), \"todo\" : \"take a walk\", \"status\" : \"RUNNING\", \"priority\" : \"5\" } { \"_id\" : ObjectId(\"52ebb9ff5e3b86c2a73250b3\"), \"todo\" : \"sending an email\", \"status\" : \"READY\", \"priority\" : \"2\" } \uc774\uba70, \uc608\uc0c1\ub300\ub85c \uce5c\uad6c\ub97c \ub9cc\ub098\ub294(meeting friends) \uc77c\uc774 \uc0ad\uc81c\ub418\uc5c8\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4. findAndModify \uac00 update \uba85\ub839\uc5d0 \ube44\ud574 \ub5a8\uc5b4\uc9c0\ub294 \uc810\uc740 \uc18d\ub3c4\uc785\ub2c8\ub2e4. findAndModify \uac00 \uc57d\uac04 \ub354 \ub290\ub9bd\ub2c8\ub2e4.","title":"12. MongoDB Query Part 2. - findAndModify"},{"location":"posts/mongodb/13-mongodb-query-all/","text":"\uc774\ubc88 \ud3ec\uc2a4\ud305\uc5d0\uc11c\ub294 find query\uc758 $all key\ub97c \uc774\uc6a9\ud55c \uac80\uc0c9\uc5d0 \ub300\ud558\uc5ec \uc54c\uc544\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc6b0\uc120 \ub2e4\uc74c\uacfc \uac19\uc774 food \uceec\ub809\uc158\uc5d0 array \ud0c0\uc785\uc73c\ub85c \ub3c4\ud050\uba3c\ud2b8\ub97c \ucd94\uac00\ud569\ub2c8\ub2e4: > db.food.drop() > db.food.insert({\"_id\" : 1, \"fruit\" : [\"apple\", \"banana\", \"peach\"]}) > db.food.insert({\"_id\" : 2, \"fruit\" : [\"apple\", \"kumquat\", \"orange\"]}) > db.food.insert({\"_id\" : 3, \"fruit\" : [\"cherry\", \"banana\", \"apple\"]}) \"apple\"\uacfc \"banana\" \ubaa8\ub450\ub97c \ud3ec\ud568\ud558\ub294 \ub3c4\ud050\uba3c\ud2b8\ub294 ID 1\uacfc ID 3\uc785\ub2c8\ub2e4. $all key\ub97c \ud1b5\ud574 \uc774 \ub450 \uac00\uc9c0 \ubaa8\ub450\ub97c \ud3ec\ud568\ud558\ub294 \ub3c4\ud050\uba3c\ud2b8\ub97c \uac80\uc0c9\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: > db.food.find({fruit : {$all : [\"apple\", \"banana\"]}}) { \"_id\" : 1, \"fruit\" : [ \"apple\", \"banana\", \"peach\" ] } { \"_id\" : 3, \"fruit\" : [ \"cherry\", \"banana\", \"apple\" ] } \uc608\uc0c1\ub300\ub85c ID 1\uacfc 3\uc774 \uac80\uc0c9 \ub418\uc5c8\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"13. MongoDB Query Part 3. - $all"},{"location":"posts/mongodb/14-mongodb-query-size/","text":"\uc774\ubc88 \ud3ec\uc2a4\ud305\uc5d0\uc11c\ub294 find query\uc758 $size key\ub97c \uc774\uc6a9\ud55c \uac80\uc0c9\uc5d0 \ub300\ud558\uc5ec \uc54c\uc544\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. $size \ub294 array\uc758 \ud06c\uae30\ub97c \uc774\uc6a9\ud558\uc5ec \uac80\uc0c9\ud560 \uc218 \uc788\ub294 \uc624\ud37c\ub808\uc774\ud130\uc785\ub2c8\ub2e4. \uc6b0\uc120 \ub2e4\uc74c\uacfc \uac19\uc774 \uc544\uc774\ud15c\uc744 \uc900\ube44\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4: > db.food.drop() > db.food.insert({\"_id\" : 1, \"fruit\" : [\"apple\", \"banana\", \"peach\"]}) > db.food.insert({\"_id\" : 2, \"fruit\" : [\"apple\", \"kumquat\", \"orange\"]}) > db.food.insert({\"_id\" : 3, \"fruit\" : [\"cherry\", \"banana\", \"apple\"]}) > db.food.insert({\"_id\" : 4, \"fruit\" : [\"pineapple\", \"plum\"]}) ID 1, 2, 3\uc5d0 \ub300\ud574\uc11c\ub294 \"fruit\"\uc758 array \uc0ac\uc774\uc988\uac00 \ubaa8\ub450 3\uc785\ub2c8\ub2e4 (\uc989 array\uc758 \uc544\uc774\ud15c\uc774 3\uac1c\uc774\ub2e4). \uc774\uc5d0 \ubc18\ud574\uc11c ID 4\ub294 \"fruit\"\uc5d0 \ub300\ud55c array\uc758 \uc0ac\uc774\uc988\uac00 2\uc785\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc774 \uc785\ub825\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: > db.food.find({\"fruit\" : {\"$size\" : 2}}) { \"_id\" : 4, \"fruit\" : [ \"pineapple\", \"plum\" ] } \"fruit\"\uc758 array \ud06c\uae30\uac00 2\uc778 \uac83\uc744 \uac80\uc0c9\ud588\uc73c\ubbc0\ub85c ID 4\ub9cc\uc774 \uac80\uc0c9\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ub9cc\uc57d array \ud06c\uae30\uac00 3 \uc774\uc0c1\uc758 \ub3c4\ud050\uba3c\ud2b8\ub97c \uac80\uc0c9\ud558\ub824\uba74 \ub2e4\uc74c\uc744 \uc774\uc6a9\ud569\ub2c8\ub2e4: > db.food.find({\"size\" : {\"$gt\" : 3}})","title":"14. MongoDB Query Part 4. - $size"},{"location":"posts/mongodb/15-mongodb-query-slice/","text":"\uc774\ubc88 \ud3ec\uc2a4\ud305\uc5d0\uc11c\ub294 $slice keyword\ub97c \uc774\uc6a9\ud55c \uac80\uc0c9 \uc870\uac74\uc5d0 \ub300\ud558\uc5ec \uc54c\uc544\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. $slice \ub294 \ud2b9\uc815 key\uc758 array \uc544\uc774\ud15c\ub4e4 \uc911 \uc77c\ubd80\ubd84\uc744 \ucd94\ucd9c\ud558\ub294\ub370 \uc0ac\uc6a9\ub41c\ub2e4. \uac00\ub839, \ub2e4\uc74c\uacfc \uac19\uc774 \uc544\uc774\ud15c\uc774 \uc788\ub2e4\uace0 \ud558\uc790. > db.food.drop() > db.food.insert({ \"fruit\": [ \"apple\", \"orange\", \"plum\", \"banana\", \"peach\", \"mango\", \"pineapple\", \"grape\", \"melon\", \"water melon\", \"cherry\", \"kiwi\", \"strawberry\" ] }) \"fruit\" \uc911 \ucc98\uc74c \ub2e4\uc12f\uac1c\uc758 \uc544\uc774\ud15c\uc744 \ucd94\ucd9c\ud558\ub824\uba74 \ub2e4\uc74c\uacfc \uac19\uc740 \uc785\ub825\ud569\ub2c8\ub2e4. > db.food.find( {}, { fruit: { $slice: 5 } } ) { \"_id\" : ObjectId(\"52ece5ebf97299c19188c2da\"), \"fruit\" : [ \"apple\", \"orange\", \"plum\", \"banana\", \"peach\" ] } \ubc18\ub300\ub85c \ub9c8\uc9c0\ub9c9 \ub2e4\uc12f\uac1c\uc758 \uc544\uc774\ud15c\uc744 \ucd94\ucd9c\ud558\ub824\uba74 $slice \uac12\uc744 5\ub300\uc2e0 -5\ub85c \uc785\ub825\ud569\ub2c8\ub2e4. > db.food.find( {}, { fruit: { $slice: -5 } } ) { \"_id\" : ObjectId(\"52ece5ebf97299c19188c2da\"), \"fruit\" : [ \"melon\", \"water melon\", \"cherry\", \"kiwi\", \"strawberry\" ] } \uc774\ubc88\uc5d0\ub294 skip & limit \uc5d0 \ub300\ud574 \uc54c\uc544\ubcf4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \ub54c\ub54c\ub85c \uba87\uac00\uc9c0 \uc544\uc774\ud15c\uc744 \uc2a4\ud0b5\ud55c \ud6c4 \uc544\uc774\ud15c\uc744 \ucd94\ucd9c\ud560 \ud544\uc694\uac00 \uc788\ub294 \uacbd\uc6b0\uac00 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uc744 \uc785\ub825\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: > db.food.findOne() { \"_id\" : ObjectId(\"52ece5ebf97299c19188c2da\"), \"fruit\" : [ \"apple\", \"orange\", \"plum\", \"banana\", \"peach\", \"mango\", \"pineapple\", \"grape\", \"melon\", \"water melon\", \"cherry\", \"kiwi\", \"strawberry\" ] } \uc704\ub294 \uacfc\uc77c \uc774\ub984\uc744 \uc21c\uc11c\ub300\ub85c \uc798 \ubcfc \uc218 \uc788\uae30 \uc704\ud574 \uc785\ub825\ud55c \uac83\uc785\ub2c8\ub2e4. \ucc98\uc74c 3\uac1c\uc758 \uc544\uc774\ud15c\uc744 \uc2a4\ud0b5\ud558\uace0 5\uac1c\uc758 \uc544\uc774\ud15c\uc744 \ucd94\ucd9c\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: > db.food.findOne( {}, { fruit: { $slice: [3, 5] } } ) { \"_id\" : ObjectId(\"52ece5ebf97299c19188c2da\"), \"fruit\" : [ \"banana\", \"peach\", \"mango\", \"pineapple\", \"grape\" ] } \ub9c8\ucc2c\uac00\uc9c0\ub85c \ub4a4\uc5d0\uc11c\ubd80\ud130 7\uac1c\uc758 \uc544\uc774\ud15c\uc744 \uc2a4\ud0b5\ud558\uace0 \uadf8 \uc704\uce58\ub85c\ubd80\ud130 2\uac1c\uc758 \uc544\uc774\ud15c\uc744 \ucd94\ucd9c\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \uc785\ub825\ud569\ub2c8\ub2e4: > db.food.findOne( {}, { fruit: { $slice: [-7, 2] } } ) { \"_id\" : ObjectId(\"52ece5ebf97299c19188c2da\"), \"fruit\" : [ \"pineapple\", \"grape\" ] } \uc989, \ub4a4\uc5d0\uc11c\ubd80\ud130 7\ubc88\uc9f8 \uc704\uce58\ub85c \uc774\ub3d9\ud55c \ud6c4( fruit: \"pineapple\" ) \uc774 \uc704\uce58\ub85c\ubd80\ud130 2\uac1c\uc758 \uc544\uc774\ud15c( fruit: [\"pineapple\", \"grape\"] )\uc744 \uc120\ud0dd\ud569\ub2c8\ub2e4.","title":"15. MongoDB Query Part 5. - $slice"},{"location":"posts/mongodb/16-mongodb-query-where/","text":"\uc774\ubc88 \ud3ec\uc2a4\ud305\uc5d0\uc11c\ub294 $where key\ub97c \uc774\uc6a9\ud55c \uac80\uc0c9\uc5d0 \ub300\ud574 \uc54c\uc544\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. $where \ub294 JavaScript\uc758 \ud45c\ud604\uc2dd \ub610\ub294 JavaScript \ud568\uc218 \uc804\uccb4\ub97c query\uc5d0 \uc804\ub2ec\ud560 \uc218 \uc788\ub294 \uc624\ud37c\ub808\uc774\ud130\uc785\ub2c8\ub2e4. \uc124\uba85\uc744 \uc704\ud574 \uc6b0\uc120 \ub2e4\uc74c \ub370\uc774\ud130\ub97c \uc900\ube44\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4: db.grade.insert({student_id : \"01\", korean : \"A\", english: \"B\", maths : \"A+\", science : \"A\" }) db.grade.insert({student_id : \"02\", korean : \"B\", english: \"B\", maths : \"A+\", science : \"B\" }) db.grade.insert({student_id : \"03\", korean : \"C\", english: \"A+\", maths : \"A+\", science : \"A\" }) \uc704\uc5d0 \uc785\ub825\ub41c \ub370\uc774\ud130\ub97c \uc0b4\ud3b4\ubcf4\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: > db.grade.find().pretty() { \"_id\" : ObjectId(\"52efaab7614cff87320cc801\"), \"student_id\" : \"01\", \"korean\" : \"A\", \"english\" : \"B\", \"maths\" : \"A+\", \"science\" : \"A\" } { \"_id\" : ObjectId(\"52efaab7614cff87320cc802\"), \"student_id\" : \"02\", \"korean\" : \"B\", \"english\" : \"B\", \"maths\" : \"A+\", \"science\" : \"B\" } { \"_id\" : ObjectId(\"52efaab8614cff87320cc803\"), \"student_id\" : \"03\", \"korean\" : \"C\", \"english\" : \"A+\", \"maths\" : \"A+\", \"science\" : \"A\" } \ucc38\uace0\ub85c, find() \uba85\ub839\uc5d0 \ub4a4\uc5d0 \uc788\ub294 pretty() \ub294 \uac80\uc0c9\ub41c \ub3c4\ud050\uba3c\ud2b8 \ub0b4\uc6a9\uc744 \uc798 \uc815\ub9ac\ud574\uc11c \ubcf4\uc5ec\uc8fc\ub294 \uba54\uc368\ub4dc\uc785\ub2c8\ub2e4. $where key\ub97c \uc774\uc6a9\ud558\uc5ec \uad6d\uc5b4(korean)\uc640 \uacfc\ud559(science) \ub4f1\uae09\uc774 \uac19\uc740 \ud559\uc0dd\uc744 \ucd94\ucd9c\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: > db.grade.find({ $where: function() { return (this.korean == this.science) }}).pretty(); { \"_id\" : ObjectId(\"52efaab7614cff87320cc801\"), \"student_id\" : \"01\", \"korean\" : \"A\", \"english\" : \"B\", \"maths\" : \"A+\", \"science\" : \"A\" } { \"_id\" : ObjectId(\"52efaab7614cff87320cc802\"), \"student_id\" : \"02\", \"korean\" : \"B\", \"english\" : \"B\", \"maths\" : \"A+\", \"science\" : \"B\" } \uad6d\uc5b4\uc640 \uacfc\ud559 \ub4f1\uae09\uc774 \uac19\uc740 \ud559\uc0dd\uc758 ID\ub294 \"01\"\uacfc \"02\"\uc785\ub2c8\ub2e4. \uc774\uc640 \uac19\uc774 $where \ub294 JavaScript \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec query\uc758 \ud655\uc7a5\uc774 \uac00\ub2a5\ud558\uac8c \ud569\ub2c8\ub2e4. this \ud0a4\uc6cc\ub4dc\uac00 \uc0ac\uc6a9\ub418\uc5c8\uc74c\uc5d0 \uc720\uc758\ud558\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4. \uc720\uc0ac\ud558\uac8c, \uc774\ubc88\uc5d0\ub294 \uc601\uc5b4(english)\uc640 \uc218\ud559(maths) \ub4f1\uae09\uc774 \uac19\uc740 \ud559\uc0dd\uc744 \ucd94\ucd9c\ud558\ub824\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \uc785\ub825\ud569\ub2c8\ub2e4: > db.grade.find({ $where: function() { return (this.english == this.maths) }}).pretty(); { \"_id\" : ObjectId(\"52efaab8614cff87320cc803\"), \"student_id\" : \"03\", \"korean\" : \"C\", \"english\" : \"A+\", \"maths\" : \"A+\", \"science\" : \"A\" } \uc601\uc5b4\uc640 \uc218\ud559 \ub4f1\uae09\uc774 \uac19\uc740 ID \"03\"\uc758 \ud559\uc0dd\uc774 \uac80\uc0c9\ub418\uc5c8\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. this \ub300\uc2e0 obj \ub97c \uc0ac\uc6a9\ud574\ub3c4 \ub3d9\uc77c\ud55c \uacb0\uacfc\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4: > db.grade.find({ $where: function() { return (obj.english == obj.maths) }}).pretty(); { \"_id\" : ObjectId(\"52efaab8614cff87320cc803\"), \"student_id\" : \"03\", \"korean\" : \"C\", \"english\" : \"A+\", \"maths\" : \"A+\", \"science\" : \"A\" } \ud568\uc218 \ud615\ud0dc\ub85c \ud45c\ud604\ub41c \uc704\uc758 \ud45c\ud604\uc740 \ubcf4\ub2e4 \uac04\ub2e8\ud558\uac8c \ub2e4\uc74c\uacfc \uac19\uc774 \ud45c\ud604\ud560 \uc218 \uc788\uc73c\uba70, \uacb0\uacfc\ub294 \ub3d9\uc77c\ud569\ub2e4. > db.grade.find( { $where: \"obj.english == obj.maths\" } ).pretty(); { \"_id\" : ObjectId(\"52efaab8614cff87320cc803\"), \"student_id\" : \"03\", \"korean\" : \"C\", \"english\" : \"A+\", \"maths\" : \"A+\", \"science\" : \"A\" } MongoDB\uc758 \uc815\uaddc \uc624\ud37c\ub808\uc774\ud130\ub85c\ub294 \ucc98\ub9ac\ud560 \uc218 \uc5c6\ub294 \uac83\ub3c4 \uc774\ub97c \uc0ac\uc6a9\ud574 \ucc98\ub9ac\uac00 \uac00\ub2a5\ud558\ubbc0\ub85c \ud655\uc7a5 \uce21\uba74\uc5d0\uc11c\ub294 \ub9e4\uc6b0 \uc720\uc6a9\ud558\ub098, \ub3d9\uc77c\ud55c \ub370\uc774\ud130 \ucc98\ub9ac\ub97c \ud558\ub294 \uc815\uaddc \uc624\ud37c\ub808\uc774\ud130\uac00 \uc874\uc7ac\ud55c\ub2e4\uba74 \uac00\uae09\uc801 \uc4f0\uc9c0 \uc54a\ub3c4\ub85d \ud569\ub2c8\ub2e4. \uc989, \uc815\ub9d0\ub85c \uaf2d \ud544\uc694\ud55c \uc0c1\ud669\uc774 \uc544\ub2c8\uba74 \uc808\ub300 \uc368\uc11c\ub294 \uc548 \ub429\ub2c8\ub2e4. \uc65c\ub0d0\ud558\uba74, \uc815\uaddc \uc624\ud37c\ub808\uc774\ud130\ubcf4\ub2e4 \ucc98\ub9ac\uc18d\ub3c4\uac00 \ud604\uc800\ud788 \ub5a8\uc5b4\uc9c0\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.","title":"16. MongoDB Query Part 6. - $where"},{"location":"posts/mongodb/17-mongodb-query-querying_embedded_documents/","text":"\uc774\ubc88 \ud3ec\uc2a4\ud305\uc5d0\uc11c\ub294 \uc784\ubca0\ub514\ub4dc \ub3c4\ud050\uba3c\ud2b8\uc758 query\uc5d0 \ub300\ud574 \uc54c\uc544\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc784\ubca0\ub4dc \ub41c \ub3c4\ud050\uba3c\ud2b8\uc5d0 \ub300\ud55c query \ubc29\ubc95\uc740 \ud06c\uac8c \ub450 \uac00\uc9c0\ub85c \uc694\uc57d\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: (1) \uc804\uccb4 \ub3c4\ud050\uba3c\ud2b8\uc5d0 \ub300\ud55c query (2) \uac1c\ubcc4 \ud0a4(key)/\uac12(value) \uc30d\uc744 \uc774\uc6a9\ud55c query \uc0c1\uae30 \ub450 \uac00\uc9c0 \ubc29\ubc95\uc5d0 \ub300\ud574 \uac01\uac01 \uc54c\uc544\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. 1. \uc804\uccb4 \ub3c4\ud050\uba3c\ud2b8\uc5d0 \ub300\ud55c Query \uc6b0\uc120, \ub2e4\uc74c \uba85\ub839\uc744 \ud1b5\ud574 \uc784\ubca0\ub4dc \ub41c \ub3c4\ud050\uba3c\ud2b8\ub97c \uc900\ube44\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4. > db.users.drop() true > db.users.insert({name: {first: \"john\", last: \"kennedy\"}}) > db.users.findOne() { \"_id\" : ObjectId(\"52edaa32f97299c19188c2dc\"), \"name\" : { \"first\" : \"john\", \"last\" : \"kennedy\" } } name \uc548\uc5d0 first (first name: \uc774\ub984)\uacfc last (last name: \uc131)\uc774 \uc784\ubca0\ub4dc \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ub9cc\uc57d \uc774\ub97c name: {first: \"john\", last: \"kennedy\"} \ub85c \uac80\uc0c9\ud55c\ub2e4\uba74: > db.users.findOne({name: {first: \"john\", last: \"kennedy\"}}) { \"_id\" : ObjectId(\"52edaa32f97299c19188c2dc\"), \"name\" : { \"first\" : \"john\", \"last\" : \"kennedy\" } } \uc81c\ub300\ub85c \ub41c \uac80\uc0c9 \uacb0\uacfc\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ubc88\uc5d0\ub294 first \uc640 last \uc21c\uc11c\ub97c \ubc14\uafd4 \uac80\uc0c9\ud574 \ubcf4\uba74: > db.users.findOne({name: {last: \"kennedy\", first:\"john\"}}) null \uac80\uc0c9 \uacb0\uacfc\uac00 \uc5c6\ub294 \uac83\uc73c\ub85c(null) \uacb0\uacfc\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. \uc989, \uc784\ubca0\ub4dc\ub41c \ub3c4\ud050\uba3c\ud2b8 \uac80\uc0c9\uc740 \uc21c\uc11c\uc5d0 \uc758\uc874\uc801(order-sensitive)\uc778 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ubc88\uc5d0\ub294 name: {first: \"john\"} \ub9cc\uc73c\ub85c \uac80\uc0c9\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: > db.users.findOne({name: {first: \"john\"}}) null \uac80\uc0c9 \uacb0\uacfc\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \ub9c8\ucc2c\uac00\uc9c0\ub85c name: {last: \"kennedy\"} \ub85c \uac80\uc0c9\ud558\ub354\ub77c\ub3c4 \uac80\uc0c9 \uacb0\uacfc\ub294 \"null\"\ub85c \ubc18\ud658\ub420 \uac83\uc785\ub2c8\ub2e4. \uacb0\ub860\uc801\uc73c\ub85c, \"\uc804\uccb4 \ub3c4\ud050\uba3c\ud2b8\uc5d0 \ub300\ud55c query\"\ub294 \ub9d0 \uadf8\ub300\ub85c \uc784\ubca0\ub4dc \ub41c \ub3c4\ud050\uba3c\ud2b8\uc5d0 \ub300\ud55c \ub0b4\uc6a9 \uc804\uccb4\ub97c \uadf8\ub300\ub85c \uac80\uc0c9\ud574\uc57c\ub9cc \uc62c\ubc14\ub978 \uac80\uc0c9 \uacb0\uacfc\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub9cc\uc57d name \uc5d0 middlename \"fitzgerald\"\ub97c \ucd94\uac00\ud588\ub2e4\uace0 \ud558\uba74, \uc774\uc81c \uc55e\uc758 \uac80\uc0c9\ubc29\ubc95\uc73c\ub85c\ub294 \uc6d0\ud558\ub294 \uac80\uc0c9\uacb0\uacfc\ub97c \uc5bb\uc744 \uc218 \uc5c6\uc744 \uac83\uc785\ub2c8\ub2e4. \uc774\ub7ec\ud55c \ub2e8\uc810\uc744 \uadf9\ubcf5\ud558\uae30 \uc704\ud574 MongoDB\ub294 \uac1c\ubcc4 key/value \uc30d\uc744 \uc774\uc6a9\ud55c query\uc778 $elemMatch \ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. 2. \uac1c\ubcc4 \ud0a4/\uac12 \uc30d\uc744 \uc774\uc6a9\ud55c query \uc774\uc81c query\ub97c \uc5d8\ub9ac\uba3c\ud2b8 \ub2e8\uc704\ub85c \uac80\uc0c9\ud560 \uc218 \uc788\ub294 $elemMatch \ub97c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc55e\uc11c \uc784\ubca0\ub4dc\ub41c \ub3c4\ud050\uba3c\ud2b8\uc758 \uc804\uccb4 \ub0b4\uc6a9\uc73c\ub85c \uac80\uc0c9\ud558\ub294 \uac83\uc5d0 \ub300\ud55c \ubd88\ud3b8\ud568\uc744 \uc0b4\ud3b4\ubcf4\uc558\uc2b5\ub2c8\ub2e4. \uc784\ubca0\ub4dc\ub41c \ub3c4\ud050\uba3c\ud2b8\uc758 \uc5d8\ub9ac\uba3c\ud2b8 key\ub85c \uac80\uc0c9\ud560 \uc218 \uc788\ub294 \ubc29\ubc95\uc740 \uc6b0\uc120 \ub3c4\ud050\uba3c\ud2b8 \uc784\ubca0\ub4dc \uc2dc \uad6c\uc870\ub97c array \ud615\ud0dc\ub85c \uad6c\uc131\ud569\ub2c8\ub2e4: \uc6b0\uc120 \ub2e4\uc74c\uacfc array \ud615\ud0dc\uc758 \ub3c4\ud050\uba3c\ud2b8\ub97c \uc784\ubca0\ub4dc \ud569\ub2c8\ub2e4: db.schools.drop() db.schools.insert( [ { _id: 1, zipcode: 63109, students: [ { name: \"john\", school: 102, age: 10 }, { name: \"jess\", school: 102, age: 11 }, { name: \"jeff\", school: 108, age: 15 } ] }, { _id: 2, zipcode: 63110, students: [ { name: \"ajax\", school: 100, age: 7 }, { name: \"achilles\", school: 100, age: 8 }, ] }, { _id: 3, zipcode: 63109, students: [ { name: \"ajax\", school: 100, age: 7 }, { name: \"achilles\", school: 100, age: 8 }, ] }, { _id: 4, zipcode: 63109, students: [ { name: \"barney\", school: 102, age: 7 }, ] } ] ) \ub2e4\uc74c\uacfc \uac19\uc740 \ub0b4\uc6a9\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4: > db.schools.find() { \"_id\" : 1, \"zipcode\" : 63109, \"students\" : [ { \"name\" : \"john\", \"school\" : 102, \"age\" : 10 }, { \"name\" : \"jess\", \"school\" : 102, \"age\" : 11 }, { \"name\" : \"jeff\", \"school\" : 108, \"age\" : 15 } ] } { \"_id\" : 2, \"zipcode\" : 63110, \"students\" : [ { \"name\" : \"ajax\", \"school\" : 100, \"age\" : 7 }, { \"name\" : \"achilles\", \"school\" : 100, \"age\" : 8 } ] } { \"_id\" : 3, \"zipcode\" : 63109, \"students\" : [ { \"name\" : \"ajax\", \"school\" : 100, \"age\" : 7 }, { \"name\" : \"achilles\", \"school\" : 100, \"age\" : 8 } ] } { \"_id\" : 4, \"zipcode\" : 63109, \"students\" : [ { \"name\" : \"barney\", \"school\" : 102, \"age\" : 7 } ] } \uc774\uc81c zipcode \uac00 63109\uc778 \uac83 \uc911, school \uc774 102\uc640 \uc694\uc18c \ub9e4\uce6d\ub418\ub294 \ub3c4\ud050\uba3c\ud2b8\ub97c \uac80\uc0c9\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: > db.schools.find( { zipcode: 63109 }, { students: { $elemMatch: { school: 102 } } } ) { \"_id\" : 1, \"students\" : [ { \"name\" : \"john\", \"school\" : 102, \"age\" : 10 } ] } { \"_id\" : 3 } { \"_id\" : 4, \"students\" : [ { \"name\" : \"barney\", \"school\" : 102, \"age\" : 7 } ] } zipcode \uac00 63109\uc778 \uac83\uc740 _id: 1, _id: 3, _id: 4\ub85c \ubaa8\ub450 3\uac1c\uc774\uba70, school \uc774 102\uc778 \uac83\uc740 _id: 1, _id: 4 \uc774\ubbc0\ub85c _id: 3 \uc5d0 \ub300\ud574\uc11c\ub294 \uc544\ubb34 \ub0b4\uc6a9\uc774 \ud45c\uc2dc\ub418\uc9c0 \uc54a\uc558\uc73c\uba70 \ub098\uba38\uc9c0 \ub450 \ub3c4\ud050\uba3c\ud2b8\uc5d0 \ub300\ud55c \ub0b4\uc6a9\uc774 \ucd9c\ub825\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc774\ubc88\uc5d0\ub294 \ub354 \uc138\ubc00\ud558\uac8c \uc55e\uc11c \uac80\uc0c9 \uc870\uac74\uc5d0 \ub367\ubd99\uc5ec \ub098\uc774(age)\uac00 8\uc0b4 \uc774\uc0c1\uc778 \ud559\uc0dd\uc774 \ud3ec\ud568\ub41c \ub3c4\ud050\uba3c\ud2b8\ub97c \uac80\uc0c9\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: > db.schools.find( { zipcode: 63109 }, { students: { $elemMatch: { school: 102, age: { $gt: 10} } } } ) { \"_id\" : 1, \"students\" : [ { \"name\" : \"jess\", \"school\" : 102, \"age\" : 11 } ] } { \"_id\" : 3 } { \"_id\" : 4 } \uac80\uc0c9\uc870\uac74\uc5d0 \ub9de\ub294 \uc62c\ubc14\ub978 \uac80\uc0c9\uacb0\uacfc\ub97c \uc5bb\uc744 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4. \ub9c8\uc9c0\ub9c9\uc73c\ub85c, zipcode \uac00 63109\uc778 \uac83 \uc911 school \uc774 102\uc640 \uc694\uc18c \ub9e4\uce6d\ub418\ub294 \ub3c4\ud050\uba3c\ud2b8\uc5d0 \ud3ec\ud568\ub41c \ud559\uc0dd \uc911 \ub098\uc774\uac00 \uc5b4\ub9b0 \uc21c\uc73c\ub85c \ubd84\ub958(sort)\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: > db.schools.find({ zipcode: 63109 }, { students: { $elemMatch: { school: 102 } } }).sort( { \"students.age\": 1 } ) { \"_id\" : 3 } { \"_id\" : 4, \"students\" : [ { \"name\" : \"barney\", \"school\" : 102, \"age\" : 7 } ] } { \"_id\" : 1, \"students\" : [ { \"name\" : \"john\", \"school\" : 102, \"age\" : 10 } ] } \uc9c0\uae08\uae4c\uc9c0 \uc784\ubca0\ub4dc \ub41c \ub3c4\ud050\uba3c\ud2b8\uc5d0 \ub300\ud55c query \ubc29\ubc95\uc5d0 \ub300\ud574 \uc54c\uc544 \ubcf4\uc558\uc2b5\ub2c8\ub2e4. \ube44\uc815\ud615\uad6c\uc870\uc758 \ub370\uc774\ud130\ubca0\uc774\uc2a4(NoSQL)\uc5d0\uc11c \ub3c4\ud050\uba3c\ud2b8\uac00 \uc784\ubca0\ub4dc \ub418\ub294 \uacbd\uc6b0\uac00 \ub9ce\uc73c\uba70 \uc784\ubca0\ub4dc \ub41c \ub3c4\ud050\uba3c\ud2b8\uc758 \uc694\uc18c(elemenet)\ub85c \ub9e4\uce6d \uc870\uac74\uc744 \uac80\uc0c9\ud558\ub294 \uc77c\uc740 \uc790\uc8fc \ubc1c\uc0dd\ud558\ubbc0\ub85c \ubc18\ub4dc\uc2dc \uc775\ud600\uc57c \ud560 \uc8fc\uc81c\ub77c \uc0dd\uac01\ub429\ub2c8\ub2e4.","title":"17. MongoDB Query Part 7. - querying_embedded_documents"},{"location":"posts/mongodb/17-mongodb-query-querying_embedded_documents/#1-query","text":"\uc6b0\uc120, \ub2e4\uc74c \uba85\ub839\uc744 \ud1b5\ud574 \uc784\ubca0\ub4dc \ub41c \ub3c4\ud050\uba3c\ud2b8\ub97c \uc900\ube44\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4. > db.users.drop() true > db.users.insert({name: {first: \"john\", last: \"kennedy\"}}) > db.users.findOne() { \"_id\" : ObjectId(\"52edaa32f97299c19188c2dc\"), \"name\" : { \"first\" : \"john\", \"last\" : \"kennedy\" } } name \uc548\uc5d0 first (first name: \uc774\ub984)\uacfc last (last name: \uc131)\uc774 \uc784\ubca0\ub4dc \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ub9cc\uc57d \uc774\ub97c name: {first: \"john\", last: \"kennedy\"} \ub85c \uac80\uc0c9\ud55c\ub2e4\uba74: > db.users.findOne({name: {first: \"john\", last: \"kennedy\"}}) { \"_id\" : ObjectId(\"52edaa32f97299c19188c2dc\"), \"name\" : { \"first\" : \"john\", \"last\" : \"kennedy\" } } \uc81c\ub300\ub85c \ub41c \uac80\uc0c9 \uacb0\uacfc\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ubc88\uc5d0\ub294 first \uc640 last \uc21c\uc11c\ub97c \ubc14\uafd4 \uac80\uc0c9\ud574 \ubcf4\uba74: > db.users.findOne({name: {last: \"kennedy\", first:\"john\"}}) null \uac80\uc0c9 \uacb0\uacfc\uac00 \uc5c6\ub294 \uac83\uc73c\ub85c(null) \uacb0\uacfc\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. \uc989, \uc784\ubca0\ub4dc\ub41c \ub3c4\ud050\uba3c\ud2b8 \uac80\uc0c9\uc740 \uc21c\uc11c\uc5d0 \uc758\uc874\uc801(order-sensitive)\uc778 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ubc88\uc5d0\ub294 name: {first: \"john\"} \ub9cc\uc73c\ub85c \uac80\uc0c9\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: > db.users.findOne({name: {first: \"john\"}}) null \uac80\uc0c9 \uacb0\uacfc\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \ub9c8\ucc2c\uac00\uc9c0\ub85c name: {last: \"kennedy\"} \ub85c \uac80\uc0c9\ud558\ub354\ub77c\ub3c4 \uac80\uc0c9 \uacb0\uacfc\ub294 \"null\"\ub85c \ubc18\ud658\ub420 \uac83\uc785\ub2c8\ub2e4. \uacb0\ub860\uc801\uc73c\ub85c, \"\uc804\uccb4 \ub3c4\ud050\uba3c\ud2b8\uc5d0 \ub300\ud55c query\"\ub294 \ub9d0 \uadf8\ub300\ub85c \uc784\ubca0\ub4dc \ub41c \ub3c4\ud050\uba3c\ud2b8\uc5d0 \ub300\ud55c \ub0b4\uc6a9 \uc804\uccb4\ub97c \uadf8\ub300\ub85c \uac80\uc0c9\ud574\uc57c\ub9cc \uc62c\ubc14\ub978 \uac80\uc0c9 \uacb0\uacfc\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub9cc\uc57d name \uc5d0 middlename \"fitzgerald\"\ub97c \ucd94\uac00\ud588\ub2e4\uace0 \ud558\uba74, \uc774\uc81c \uc55e\uc758 \uac80\uc0c9\ubc29\ubc95\uc73c\ub85c\ub294 \uc6d0\ud558\ub294 \uac80\uc0c9\uacb0\uacfc\ub97c \uc5bb\uc744 \uc218 \uc5c6\uc744 \uac83\uc785\ub2c8\ub2e4. \uc774\ub7ec\ud55c \ub2e8\uc810\uc744 \uadf9\ubcf5\ud558\uae30 \uc704\ud574 MongoDB\ub294 \uac1c\ubcc4 key/value \uc30d\uc744 \uc774\uc6a9\ud55c query\uc778 $elemMatch \ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4.","title":"1. \uc804\uccb4 \ub3c4\ud050\uba3c\ud2b8\uc5d0 \ub300\ud55c Query"},{"location":"posts/mongodb/17-mongodb-query-querying_embedded_documents/#2-query","text":"\uc774\uc81c query\ub97c \uc5d8\ub9ac\uba3c\ud2b8 \ub2e8\uc704\ub85c \uac80\uc0c9\ud560 \uc218 \uc788\ub294 $elemMatch \ub97c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc55e\uc11c \uc784\ubca0\ub4dc\ub41c \ub3c4\ud050\uba3c\ud2b8\uc758 \uc804\uccb4 \ub0b4\uc6a9\uc73c\ub85c \uac80\uc0c9\ud558\ub294 \uac83\uc5d0 \ub300\ud55c \ubd88\ud3b8\ud568\uc744 \uc0b4\ud3b4\ubcf4\uc558\uc2b5\ub2c8\ub2e4. \uc784\ubca0\ub4dc\ub41c \ub3c4\ud050\uba3c\ud2b8\uc758 \uc5d8\ub9ac\uba3c\ud2b8 key\ub85c \uac80\uc0c9\ud560 \uc218 \uc788\ub294 \ubc29\ubc95\uc740 \uc6b0\uc120 \ub3c4\ud050\uba3c\ud2b8 \uc784\ubca0\ub4dc \uc2dc \uad6c\uc870\ub97c array \ud615\ud0dc\ub85c \uad6c\uc131\ud569\ub2c8\ub2e4: \uc6b0\uc120 \ub2e4\uc74c\uacfc array \ud615\ud0dc\uc758 \ub3c4\ud050\uba3c\ud2b8\ub97c \uc784\ubca0\ub4dc \ud569\ub2c8\ub2e4: db.schools.drop() db.schools.insert( [ { _id: 1, zipcode: 63109, students: [ { name: \"john\", school: 102, age: 10 }, { name: \"jess\", school: 102, age: 11 }, { name: \"jeff\", school: 108, age: 15 } ] }, { _id: 2, zipcode: 63110, students: [ { name: \"ajax\", school: 100, age: 7 }, { name: \"achilles\", school: 100, age: 8 }, ] }, { _id: 3, zipcode: 63109, students: [ { name: \"ajax\", school: 100, age: 7 }, { name: \"achilles\", school: 100, age: 8 }, ] }, { _id: 4, zipcode: 63109, students: [ { name: \"barney\", school: 102, age: 7 }, ] } ] ) \ub2e4\uc74c\uacfc \uac19\uc740 \ub0b4\uc6a9\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4: > db.schools.find() { \"_id\" : 1, \"zipcode\" : 63109, \"students\" : [ { \"name\" : \"john\", \"school\" : 102, \"age\" : 10 }, { \"name\" : \"jess\", \"school\" : 102, \"age\" : 11 }, { \"name\" : \"jeff\", \"school\" : 108, \"age\" : 15 } ] } { \"_id\" : 2, \"zipcode\" : 63110, \"students\" : [ { \"name\" : \"ajax\", \"school\" : 100, \"age\" : 7 }, { \"name\" : \"achilles\", \"school\" : 100, \"age\" : 8 } ] } { \"_id\" : 3, \"zipcode\" : 63109, \"students\" : [ { \"name\" : \"ajax\", \"school\" : 100, \"age\" : 7 }, { \"name\" : \"achilles\", \"school\" : 100, \"age\" : 8 } ] } { \"_id\" : 4, \"zipcode\" : 63109, \"students\" : [ { \"name\" : \"barney\", \"school\" : 102, \"age\" : 7 } ] } \uc774\uc81c zipcode \uac00 63109\uc778 \uac83 \uc911, school \uc774 102\uc640 \uc694\uc18c \ub9e4\uce6d\ub418\ub294 \ub3c4\ud050\uba3c\ud2b8\ub97c \uac80\uc0c9\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: > db.schools.find( { zipcode: 63109 }, { students: { $elemMatch: { school: 102 } } } ) { \"_id\" : 1, \"students\" : [ { \"name\" : \"john\", \"school\" : 102, \"age\" : 10 } ] } { \"_id\" : 3 } { \"_id\" : 4, \"students\" : [ { \"name\" : \"barney\", \"school\" : 102, \"age\" : 7 } ] } zipcode \uac00 63109\uc778 \uac83\uc740 _id: 1, _id: 3, _id: 4\ub85c \ubaa8\ub450 3\uac1c\uc774\uba70, school \uc774 102\uc778 \uac83\uc740 _id: 1, _id: 4 \uc774\ubbc0\ub85c _id: 3 \uc5d0 \ub300\ud574\uc11c\ub294 \uc544\ubb34 \ub0b4\uc6a9\uc774 \ud45c\uc2dc\ub418\uc9c0 \uc54a\uc558\uc73c\uba70 \ub098\uba38\uc9c0 \ub450 \ub3c4\ud050\uba3c\ud2b8\uc5d0 \ub300\ud55c \ub0b4\uc6a9\uc774 \ucd9c\ub825\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc774\ubc88\uc5d0\ub294 \ub354 \uc138\ubc00\ud558\uac8c \uc55e\uc11c \uac80\uc0c9 \uc870\uac74\uc5d0 \ub367\ubd99\uc5ec \ub098\uc774(age)\uac00 8\uc0b4 \uc774\uc0c1\uc778 \ud559\uc0dd\uc774 \ud3ec\ud568\ub41c \ub3c4\ud050\uba3c\ud2b8\ub97c \uac80\uc0c9\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: > db.schools.find( { zipcode: 63109 }, { students: { $elemMatch: { school: 102, age: { $gt: 10} } } } ) { \"_id\" : 1, \"students\" : [ { \"name\" : \"jess\", \"school\" : 102, \"age\" : 11 } ] } { \"_id\" : 3 } { \"_id\" : 4 } \uac80\uc0c9\uc870\uac74\uc5d0 \ub9de\ub294 \uc62c\ubc14\ub978 \uac80\uc0c9\uacb0\uacfc\ub97c \uc5bb\uc744 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4. \ub9c8\uc9c0\ub9c9\uc73c\ub85c, zipcode \uac00 63109\uc778 \uac83 \uc911 school \uc774 102\uc640 \uc694\uc18c \ub9e4\uce6d\ub418\ub294 \ub3c4\ud050\uba3c\ud2b8\uc5d0 \ud3ec\ud568\ub41c \ud559\uc0dd \uc911 \ub098\uc774\uac00 \uc5b4\ub9b0 \uc21c\uc73c\ub85c \ubd84\ub958(sort)\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: > db.schools.find({ zipcode: 63109 }, { students: { $elemMatch: { school: 102 } } }).sort( { \"students.age\": 1 } ) { \"_id\" : 3 } { \"_id\" : 4, \"students\" : [ { \"name\" : \"barney\", \"school\" : 102, \"age\" : 7 } ] } { \"_id\" : 1, \"students\" : [ { \"name\" : \"john\", \"school\" : 102, \"age\" : 10 } ] } \uc9c0\uae08\uae4c\uc9c0 \uc784\ubca0\ub4dc \ub41c \ub3c4\ud050\uba3c\ud2b8\uc5d0 \ub300\ud55c query \ubc29\ubc95\uc5d0 \ub300\ud574 \uc54c\uc544 \ubcf4\uc558\uc2b5\ub2c8\ub2e4. \ube44\uc815\ud615\uad6c\uc870\uc758 \ub370\uc774\ud130\ubca0\uc774\uc2a4(NoSQL)\uc5d0\uc11c \ub3c4\ud050\uba3c\ud2b8\uac00 \uc784\ubca0\ub4dc \ub418\ub294 \uacbd\uc6b0\uac00 \ub9ce\uc73c\uba70 \uc784\ubca0\ub4dc \ub41c \ub3c4\ud050\uba3c\ud2b8\uc758 \uc694\uc18c(elemenet)\ub85c \ub9e4\uce6d \uc870\uac74\uc744 \uac80\uc0c9\ud558\ub294 \uc77c\uc740 \uc790\uc8fc \ubc1c\uc0dd\ud558\ubbc0\ub85c \ubc18\ub4dc\uc2dc \uc775\ud600\uc57c \ud560 \uc8fc\uc81c\ub77c \uc0dd\uac01\ub429\ub2c8\ub2e4.","title":"2. \uac1c\ubcc4 \ud0a4/\uac12 \uc30d\uc744 \uc774\uc6a9\ud55c query"},{"location":"posts/scientific-computing/2012-02-09-realtime-fluid-simulation-using-cuda/","text":"Written by Alex Choi, Feb. 09, 2012. This is one of our researches done in CJ POWERCAST, which is dedicated from the members of our team, T.J. Kwak and J.M. Park and G.Choi. INTORUDUCTION GPU (Graphics Process Unit) has been traditionally used only for display of graphical contents with graphics acceleration. Because of the characteristics of display that represent pixels as a massive array, memory and processing architectures of GPU are structured in parallel in order to process the massive graphical data in a short period. Some pioneers have used these features for parallel computation as well as displaying computer graphics. Consequently GPU manufacturers realized their needs of general purposes of GPU. FIG 1. Comparsion of Processor Structures: CPU VS GPU As shown in FIG 1., GPU has a huge number of ALUs, which are in charge of arithmetic operations, enabling massively parallel processing. With this background, GPGPU ( General Purpose Graphics Process Unit ) comes into the world and aims to process massively parallel computations not only for computer graphics but for general fields such as prediction of stock, weather, science, etc. Most of the simulations in computer graphics are based on natural phenomena and tend to need massive computations to mimic the real nature. Our research team has expected that GPGPU technology would be used for wider fields of our related research works. IMPLEMENTATION The goal of this research is, as a preceding research, to apply the GPU technology to a realtime fluid simulation that needs to solve the natural phonomenon called \"Navier-Stokes equation\" with parallel processing. To this end we adopted the algorhithms from the simplified version of Navier-Stokes equation( Jos Stam, Real-Time Fluid Dynamics for Games, 2003 Game Development Conference ) and modified the processing structures in order for GPUs to perform the massive calculation in parallel. The simplified Navier-Stokes equation for a realtime calculation used in this research looks like: \\[ \\frac{\\partial \\mathrm{u}}{\\partial t} = -(\\mathrm{u} \\cdot \\nabla) \\mathrm{u} + \\nu \\nabla^2 \\mathrm{u} + \\mathrm{f} \\] \\[ \\frac{\\partial \\rho}{\\partial t} = -(\\mathrm{u} \\cdot \\nabla) \\rho + \\kappa \\nabla^2 \\rho + S \\] The above equation describes that the state of fluid at a given instant of time is modeled as a velocity field: a function that assigns a velocity vector to every point in space. Following this equation we designed the processing structure from Jos Stam's algorithms. FIG 2. Fluid Simulation Processing Flow of CPU Sequential Processing and GPU Parallel Processing Since this simulation performs calculations on each point within a specific area, it is a good case to verify massively parallel computation performance by GPGPU. We implemented for two cases, one carries out computation by CPU and the other the same by GPU to compare between their performances. As a result the simulation from CPU shows a good performance if the resolution is less than 128 X 128. However, if not the case, the performance is very poor. RESULTS As you can see the results on the video below, the simulation on 512 x 512 resolution goes terribly slow since CPU does sequential computations while the GPU simulation shows a nice result on the same resolution. The performance table of frame rates by testing the same simulation between CPU and GPU is given. [TABLE 1. Comparison of results between from CPU and from GPU for realtime fluid simulation] Resolution 128 \u00d7128 256\u00d7256 512\u00d7128 Framerates from CPU Processing 60 fps 30 fps 0.7 fps Framerates from GPU Processing - - 60 fps The simulation on CPU is performed for three different resolutions while that on GPU only for one resolution, 512 \u00d7 512, which is sufficient to verify the performance since running on CPU is very slow on 512 \u00d7 512 resolution. The test is run with Intel Xeon CPU 3.07Ghz 12 cores, 12GB RAM and NVIDIA Quadro 5000. In conclusion this research inspires us with the potential of GPU usage for general computation purposes. By theses reasons we should keep up with GPGPU technology corresponding to real-time simulations with massive computation. Why? Because the technology world requires us more and more massive computations.","title":"Realtime Fluid Simulation Using CUDA"},{"location":"posts/scientific-computing/2012-02-09-realtime-fluid-simulation-using-cuda/#intoruduction","text":"GPU (Graphics Process Unit) has been traditionally used only for display of graphical contents with graphics acceleration. Because of the characteristics of display that represent pixels as a massive array, memory and processing architectures of GPU are structured in parallel in order to process the massive graphical data in a short period. Some pioneers have used these features for parallel computation as well as displaying computer graphics. Consequently GPU manufacturers realized their needs of general purposes of GPU. FIG 1. Comparsion of Processor Structures: CPU VS GPU As shown in FIG 1., GPU has a huge number of ALUs, which are in charge of arithmetic operations, enabling massively parallel processing. With this background, GPGPU ( General Purpose Graphics Process Unit ) comes into the world and aims to process massively parallel computations not only for computer graphics but for general fields such as prediction of stock, weather, science, etc. Most of the simulations in computer graphics are based on natural phenomena and tend to need massive computations to mimic the real nature. Our research team has expected that GPGPU technology would be used for wider fields of our related research works.","title":"INTORUDUCTION"},{"location":"posts/scientific-computing/2012-02-09-realtime-fluid-simulation-using-cuda/#implementation","text":"The goal of this research is, as a preceding research, to apply the GPU technology to a realtime fluid simulation that needs to solve the natural phonomenon called \"Navier-Stokes equation\" with parallel processing. To this end we adopted the algorhithms from the simplified version of Navier-Stokes equation( Jos Stam, Real-Time Fluid Dynamics for Games, 2003 Game Development Conference ) and modified the processing structures in order for GPUs to perform the massive calculation in parallel. The simplified Navier-Stokes equation for a realtime calculation used in this research looks like: \\[ \\frac{\\partial \\mathrm{u}}{\\partial t} = -(\\mathrm{u} \\cdot \\nabla) \\mathrm{u} + \\nu \\nabla^2 \\mathrm{u} + \\mathrm{f} \\] \\[ \\frac{\\partial \\rho}{\\partial t} = -(\\mathrm{u} \\cdot \\nabla) \\rho + \\kappa \\nabla^2 \\rho + S \\] The above equation describes that the state of fluid at a given instant of time is modeled as a velocity field: a function that assigns a velocity vector to every point in space. Following this equation we designed the processing structure from Jos Stam's algorithms. FIG 2. Fluid Simulation Processing Flow of CPU Sequential Processing and GPU Parallel Processing Since this simulation performs calculations on each point within a specific area, it is a good case to verify massively parallel computation performance by GPGPU. We implemented for two cases, one carries out computation by CPU and the other the same by GPU to compare between their performances. As a result the simulation from CPU shows a good performance if the resolution is less than 128 X 128. However, if not the case, the performance is very poor.","title":"IMPLEMENTATION"},{"location":"posts/scientific-computing/2012-02-09-realtime-fluid-simulation-using-cuda/#results","text":"As you can see the results on the video below, the simulation on 512 x 512 resolution goes terribly slow since CPU does sequential computations while the GPU simulation shows a nice result on the same resolution. The performance table of frame rates by testing the same simulation between CPU and GPU is given. [TABLE 1. Comparison of results between from CPU and from GPU for realtime fluid simulation] Resolution 128 \u00d7128 256\u00d7256 512\u00d7128 Framerates from CPU Processing 60 fps 30 fps 0.7 fps Framerates from GPU Processing - - 60 fps The simulation on CPU is performed for three different resolutions while that on GPU only for one resolution, 512 \u00d7 512, which is sufficient to verify the performance since running on CPU is very slow on 512 \u00d7 512 resolution. The test is run with Intel Xeon CPU 3.07Ghz 12 cores, 12GB RAM and NVIDIA Quadro 5000. In conclusion this research inspires us with the potential of GPU usage for general computation purposes. By theses reasons we should keep up with GPGPU technology corresponding to real-time simulations with massive computation. Why? Because the technology world requires us more and more massive computations.","title":"RESULTS"}]}